{"version":3,"file":"coreui-panel.min.js","sources":["coreui-panel.min.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.CoreUI = global.CoreUI || {}, global.CoreUI.panel = factory()));\n})(this, (function () { 'use strict';\n\n  function _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n      var e,\n        n,\n        i,\n        u,\n        a = [],\n        f = !0,\n        o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) return;\n          f = !1;\n        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return a;\n    }\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n      writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n    return _setPrototypeOf(o, p);\n  }\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n  }\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    } else if (call !== void 0) {\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n  }\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n    return object;\n  }\n  function _get() {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get.bind();\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.get) {\n          return desc.get.call(arguments.length < 3 ? target : receiver);\n        }\n        return desc.value;\n      };\n    }\n    return _get.apply(this, arguments);\n  }\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        var F = function () {};\n        return {\n          s: F,\n          n: function () {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function (e) {\n            throw e;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true,\n      didErr = false,\n      err;\n    return {\n      s: function () {\n        it = it.call(o);\n      },\n      n: function () {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function (e) {\n        didErr = true;\n        err = e;\n      },\n      f: function () {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n  }\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  (function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n      module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n      define([], f);\n    } else {\n      var g;\n      if (typeof window !== \"undefined\") {\n        g = window;\n      } else if (typeof global !== \"undefined\") {\n        g = global;\n      } else if (typeof self !== \"undefined\") {\n        g = self;\n      } else {\n        g = this;\n      }\n      g.ejs = f();\n    }\n  })(function () {\n    return function () {\n      function r(e, n, t) {\n        function o(i, f) {\n          if (!n[i]) {\n            if (!e[i]) {\n              var c = \"function\" == typeof require && require;\n              if (!f && c) return c(i, !0);\n              if (u) return u(i, !0);\n              var a = new Error(\"Cannot find module '\" + i + \"'\");\n              throw a.code = \"MODULE_NOT_FOUND\", a;\n            }\n            var p = n[i] = {\n              exports: {}\n            };\n            e[i][0].call(p.exports, function (r) {\n              var n = e[i][1][r];\n              return o(n || r);\n            }, p, p.exports, r, e, n, t);\n          }\n          return n[i].exports;\n        }\n        for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n        return o;\n      }\n      return r;\n    }()({\n      1: [function (require, module, exports) {\n\n        var fs = require(\"fs\");\n        var path = require(\"path\");\n        var utils = require(\"./utils\");\n        var scopeOptionWarned = false;\n        var _VERSION_STRING = require(\"../package.json\").version;\n        var _DEFAULT_OPEN_DELIMITER = \"<\";\n        var _DEFAULT_CLOSE_DELIMITER = \">\";\n        var _DEFAULT_DELIMITER = \"%\";\n        var _DEFAULT_LOCALS_NAME = \"locals\";\n        var _NAME = \"ejs\";\n        var _REGEX_STRING = \"(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)\";\n        var _OPTS_PASSABLE_WITH_DATA = [\"delimiter\", \"scope\", \"context\", \"debug\", \"compileDebug\", \"client\", \"_with\", \"rmWhitespace\", \"strict\", \"filename\", \"async\"];\n        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(\"cache\");\n        var _BOM = /^\\uFEFF/;\n        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n        exports.cache = utils.cache;\n        exports.fileLoader = fs.readFileSync;\n        exports.localsName = _DEFAULT_LOCALS_NAME;\n        exports.promiseImpl = new Function(\"return this;\")().Promise;\n        exports.resolveInclude = function (name, filename, isDir) {\n          var dirname = path.dirname;\n          var extname = path.extname;\n          var resolve = path.resolve;\n          var includePath = resolve(isDir ? filename : dirname(filename), name);\n          var ext = extname(name);\n          if (!ext) {\n            includePath += \".ejs\";\n          }\n          return includePath;\n        };\n        function resolvePaths(name, paths) {\n          var filePath;\n          if (paths.some(function (v) {\n            filePath = exports.resolveInclude(name, v, true);\n            return fs.existsSync(filePath);\n          })) {\n            return filePath;\n          }\n        }\n        function getIncludePath(path, options) {\n          var includePath;\n          var filePath;\n          var views = options.views;\n          var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n          if (match && match.length) {\n            path = path.replace(/^\\/*/, \"\");\n            if (Array.isArray(options.root)) {\n              includePath = resolvePaths(path, options.root);\n            } else {\n              includePath = exports.resolveInclude(path, options.root || \"/\", true);\n            }\n          } else {\n            if (options.filename) {\n              filePath = exports.resolveInclude(path, options.filename);\n              if (fs.existsSync(filePath)) {\n                includePath = filePath;\n              }\n            }\n            if (!includePath && Array.isArray(views)) {\n              includePath = resolvePaths(path, views);\n            }\n            if (!includePath && typeof options.includer !== \"function\") {\n              throw new Error('Could not find the include file \"' + options.escapeFunction(path) + '\"');\n            }\n          }\n          return includePath;\n        }\n        function handleCache(options, template) {\n          var func;\n          var filename = options.filename;\n          var hasTemplate = arguments.length > 1;\n          if (options.cache) {\n            if (!filename) {\n              throw new Error(\"cache option requires a filename\");\n            }\n            func = exports.cache.get(filename);\n            if (func) {\n              return func;\n            }\n            if (!hasTemplate) {\n              template = fileLoader(filename).toString().replace(_BOM, \"\");\n            }\n          } else if (!hasTemplate) {\n            if (!filename) {\n              throw new Error(\"Internal EJS error: no file name or template \" + \"provided\");\n            }\n            template = fileLoader(filename).toString().replace(_BOM, \"\");\n          }\n          func = exports.compile(template, options);\n          if (options.cache) {\n            exports.cache.set(filename, func);\n          }\n          return func;\n        }\n        function tryHandleCache(options, data, cb) {\n          var result;\n          if (!cb) {\n            if (typeof exports.promiseImpl == \"function\") {\n              return new exports.promiseImpl(function (resolve, reject) {\n                try {\n                  result = handleCache(options)(data);\n                  resolve(result);\n                } catch (err) {\n                  reject(err);\n                }\n              });\n            } else {\n              throw new Error(\"Please provide a callback function\");\n            }\n          } else {\n            try {\n              result = handleCache(options)(data);\n            } catch (err) {\n              return cb(err);\n            }\n            cb(null, result);\n          }\n        }\n        function fileLoader(filePath) {\n          return exports.fileLoader(filePath);\n        }\n        function includeFile(path, options) {\n          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n          opts.filename = getIncludePath(path, opts);\n          if (typeof options.includer === \"function\") {\n            var includerResult = options.includer(path, opts.filename);\n            if (includerResult) {\n              if (includerResult.filename) {\n                opts.filename = includerResult.filename;\n              }\n              if (includerResult.template) {\n                return handleCache(opts, includerResult.template);\n              }\n            }\n          }\n          return handleCache(opts);\n        }\n        function rethrow(err, str, flnm, lineno, esc) {\n          var lines = str.split(\"\\n\");\n          var start = Math.max(lineno - 3, 0);\n          var end = Math.min(lines.length, lineno + 3);\n          var filename = esc(flnm);\n          var context = lines.slice(start, end).map(function (line, i) {\n            var curr = i + start + 1;\n            return (curr == lineno ? \" >> \" : \"    \") + curr + \"| \" + line;\n          }).join(\"\\n\");\n          err.path = filename;\n          err.message = (filename || \"ejs\") + \":\" + lineno + \"\\n\" + context + \"\\n\\n\" + err.message;\n          throw err;\n        }\n        function stripSemi(str) {\n          return str.replace(/;(\\s*$)/, \"$1\");\n        }\n        exports.compile = function compile(template, opts) {\n          var templ;\n          if (opts && opts.scope) {\n            if (!scopeOptionWarned) {\n              console.warn(\"`scope` option is deprecated and will be removed in EJS 3\");\n              scopeOptionWarned = true;\n            }\n            if (!opts.context) {\n              opts.context = opts.scope;\n            }\n            delete opts.scope;\n          }\n          templ = new Template(template, opts);\n          return templ.compile();\n        };\n        exports.render = function (template, d, o) {\n          var data = d || utils.createNullProtoObjWherePossible();\n          var opts = o || utils.createNullProtoObjWherePossible();\n          if (arguments.length == 2) {\n            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n          }\n          return handleCache(opts, template)(data);\n        };\n        exports.renderFile = function () {\n          var args = Array.prototype.slice.call(arguments);\n          var filename = args.shift();\n          var cb;\n          var opts = {\n            filename: filename\n          };\n          var data;\n          var viewOpts;\n          if (typeof arguments[arguments.length - 1] == \"function\") {\n            cb = args.pop();\n          }\n          if (args.length) {\n            data = args.shift();\n            if (args.length) {\n              utils.shallowCopy(opts, args.pop());\n            } else {\n              if (data.settings) {\n                if (data.settings.views) {\n                  opts.views = data.settings.views;\n                }\n                if (data.settings[\"view cache\"]) {\n                  opts.cache = true;\n                }\n                viewOpts = data.settings[\"view options\"];\n                if (viewOpts) {\n                  utils.shallowCopy(opts, viewOpts);\n                }\n              }\n              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n            }\n            opts.filename = filename;\n          } else {\n            data = utils.createNullProtoObjWherePossible();\n          }\n          return tryHandleCache(opts, data, cb);\n        };\n        exports.Template = Template;\n        exports.clearCache = function () {\n          exports.cache.reset();\n        };\n        function Template(text, optsParam) {\n          var opts = utils.hasOwnOnlyObject(optsParam);\n          var options = utils.createNullProtoObjWherePossible();\n          this.templateText = text;\n          this.mode = null;\n          this.truncate = false;\n          this.currentLine = 1;\n          this.source = \"\";\n          options.client = opts.client || false;\n          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n          options.compileDebug = opts.compileDebug !== false;\n          options.debug = !!opts.debug;\n          options.filename = opts.filename;\n          options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n          options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n          options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n          options.strict = opts.strict || false;\n          options.context = opts.context;\n          options.cache = opts.cache || false;\n          options.rmWhitespace = opts.rmWhitespace;\n          options.root = opts.root;\n          options.includer = opts.includer;\n          options.outputFunctionName = opts.outputFunctionName;\n          options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n          options.views = opts.views;\n          options.async = opts.async;\n          options.destructuredLocals = opts.destructuredLocals;\n          options.legacyInclude = typeof opts.legacyInclude != \"undefined\" ? !!opts.legacyInclude : true;\n          if (options.strict) {\n            options._with = false;\n          } else {\n            options._with = typeof opts._with != \"undefined\" ? opts._with : true;\n          }\n          this.opts = options;\n          this.regex = this.createRegex();\n        }\n        Template.modes = {\n          EVAL: \"eval\",\n          ESCAPED: \"escaped\",\n          RAW: \"raw\",\n          COMMENT: \"comment\",\n          LITERAL: \"literal\"\n        };\n        Template.prototype = {\n          createRegex: function () {\n            var str = _REGEX_STRING;\n            var delim = utils.escapeRegExpChars(this.opts.delimiter);\n            var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n            var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n            str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);\n            return new RegExp(str);\n          },\n          compile: function () {\n            var src;\n            var fn;\n            var opts = this.opts;\n            var prepended = \"\";\n            var appended = \"\";\n            var escapeFn = opts.escapeFunction;\n            var ctor;\n            var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : \"undefined\";\n            if (!this.source) {\n              this.generateSource();\n              prepended += '  var __output = \"\";\\n' + \"  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n\";\n              if (opts.outputFunctionName) {\n                if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n                  throw new Error(\"outputFunctionName is not a valid JS identifier.\");\n                }\n                prepended += \"  var \" + opts.outputFunctionName + \" = __append;\" + \"\\n\";\n              }\n              if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n                throw new Error(\"localsName is not a valid JS identifier.\");\n              }\n              if (opts.destructuredLocals && opts.destructuredLocals.length) {\n                var destructuring = \"  var __locals = (\" + opts.localsName + \" || {}),\\n\";\n                for (var i = 0; i < opts.destructuredLocals.length; i++) {\n                  var name = opts.destructuredLocals[i];\n                  if (!_JS_IDENTIFIER.test(name)) {\n                    throw new Error(\"destructuredLocals[\" + i + \"] is not a valid JS identifier.\");\n                  }\n                  if (i > 0) {\n                    destructuring += \",\\n  \";\n                  }\n                  destructuring += name + \" = __locals.\" + name;\n                }\n                prepended += destructuring + \";\\n\";\n              }\n              if (opts._with !== false) {\n                prepended += \"  with (\" + opts.localsName + \" || {}) {\" + \"\\n\";\n                appended += \"  }\" + \"\\n\";\n              }\n              appended += \"  return __output;\" + \"\\n\";\n              this.source = prepended + this.source + appended;\n            }\n            if (opts.compileDebug) {\n              src = \"var __line = 1\" + \"\\n\" + \"  , __lines = \" + JSON.stringify(this.templateText) + \"\\n\" + \"  , __filename = \" + sanitizedFilename + \";\" + \"\\n\" + \"try {\" + \"\\n\" + this.source + \"} catch (e) {\" + \"\\n\" + \"  rethrow(e, __lines, __filename, __line, escapeFn);\" + \"\\n\" + \"}\" + \"\\n\";\n            } else {\n              src = this.source;\n            }\n            if (opts.client) {\n              src = \"escapeFn = escapeFn || \" + escapeFn.toString() + \";\" + \"\\n\" + src;\n              if (opts.compileDebug) {\n                src = \"rethrow = rethrow || \" + rethrow.toString() + \";\" + \"\\n\" + src;\n              }\n            }\n            if (opts.strict) {\n              src = '\"use strict\";\\n' + src;\n            }\n            if (opts.debug) {\n              console.log(src);\n            }\n            if (opts.compileDebug && opts.filename) {\n              src = src + \"\\n\" + \"//# sourceURL=\" + sanitizedFilename + \"\\n\";\n            }\n            try {\n              if (opts.async) {\n                try {\n                  ctor = new Function(\"return (async function(){}).constructor;\")();\n                } catch (e) {\n                  if (e instanceof SyntaxError) {\n                    throw new Error(\"This environment does not support async/await\");\n                  } else {\n                    throw e;\n                  }\n                }\n              } else {\n                ctor = Function;\n              }\n              fn = new ctor(opts.localsName + \", escapeFn, include, rethrow\", src);\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                if (opts.filename) {\n                  e.message += \" in \" + opts.filename;\n                }\n                e.message += \" while compiling ejs\\n\\n\";\n                e.message += \"If the above error is not helpful, you may want to try EJS-Lint:\\n\";\n                e.message += \"https://github.com/RyanZim/EJS-Lint\";\n                if (!opts.async) {\n                  e.message += \"\\n\";\n                  e.message += \"Or, if you meant to create an async function, pass `async: true` as an option.\";\n                }\n              }\n              throw e;\n            }\n            var returnedFn = opts.client ? fn : function anonymous(data) {\n              var include = function (path, includeData) {\n                var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n                if (includeData) {\n                  d = utils.shallowCopy(d, includeData);\n                }\n                return includeFile(path, opts)(d);\n              };\n              return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n            };\n            if (opts.filename && typeof Object.defineProperty === \"function\") {\n              var filename = opts.filename;\n              var basename = path.basename(filename, path.extname(filename));\n              try {\n                Object.defineProperty(returnedFn, \"name\", {\n                  value: basename,\n                  writable: false,\n                  enumerable: false,\n                  configurable: true\n                });\n              } catch (e) {}\n            }\n            return returnedFn;\n          },\n          generateSource: function () {\n            var opts = this.opts;\n            if (opts.rmWhitespace) {\n              this.templateText = this.templateText.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n            }\n            this.templateText = this.templateText.replace(/[ \\t]*<%_/gm, \"<%_\").replace(/_%>[ \\t]*/gm, \"_%>\");\n            var self = this;\n            var matches = this.parseTemplateText();\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            if (matches && matches.length) {\n              matches.forEach(function (line, index) {\n                var closing;\n                if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {\n                  closing = matches[index + 2];\n                  if (!(closing == d + c || closing == \"-\" + d + c || closing == \"_\" + d + c)) {\n                    throw new Error('Could not find matching close tag for \"' + line + '\".');\n                  }\n                }\n                self.scanLine(line);\n              });\n            }\n          },\n          parseTemplateText: function () {\n            var str = this.templateText;\n            var pat = this.regex;\n            var result = pat.exec(str);\n            var arr = [];\n            var firstPos;\n            while (result) {\n              firstPos = result.index;\n              if (firstPos !== 0) {\n                arr.push(str.substring(0, firstPos));\n                str = str.slice(firstPos);\n              }\n              arr.push(result[0]);\n              str = str.slice(result[0].length);\n              result = pat.exec(str);\n            }\n            if (str) {\n              arr.push(str);\n            }\n            return arr;\n          },\n          _addOutput: function (line) {\n            if (this.truncate) {\n              line = line.replace(/^(?:\\r\\n|\\r|\\n)/, \"\");\n              this.truncate = false;\n            }\n            if (!line) {\n              return line;\n            }\n            line = line.replace(/\\\\/g, \"\\\\\\\\\");\n            line = line.replace(/\\n/g, \"\\\\n\");\n            line = line.replace(/\\r/g, \"\\\\r\");\n            line = line.replace(/\"/g, '\\\\\"');\n            this.source += '    ; __append(\"' + line + '\")' + \"\\n\";\n          },\n          scanLine: function (line) {\n            var self = this;\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            var newLineCount = 0;\n            newLineCount = line.split(\"\\n\").length - 1;\n            switch (line) {\n              case o + d:\n              case o + d + \"_\":\n                this.mode = Template.modes.EVAL;\n                break;\n              case o + d + \"=\":\n                this.mode = Template.modes.ESCAPED;\n                break;\n              case o + d + \"-\":\n                this.mode = Template.modes.RAW;\n                break;\n              case o + d + \"#\":\n                this.mode = Template.modes.COMMENT;\n                break;\n              case o + d + d:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + \"\\n\";\n                break;\n              case d + d + c:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + \"\\n\";\n                break;\n              case d + c:\n              case \"-\" + d + c:\n              case \"_\" + d + c:\n                if (this.mode == Template.modes.LITERAL) {\n                  this._addOutput(line);\n                }\n                this.mode = null;\n                this.truncate = line.indexOf(\"-\") === 0 || line.indexOf(\"_\") === 0;\n                break;\n              default:\n                if (this.mode) {\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                    case Template.modes.ESCAPED:\n                    case Template.modes.RAW:\n                      if (line.lastIndexOf(\"//\") > line.lastIndexOf(\"\\n\")) {\n                        line += \"\\n\";\n                      }\n                  }\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                      this.source += \"    ; \" + line + \"\\n\";\n                      break;\n                    case Template.modes.ESCAPED:\n                      this.source += \"    ; __append(escapeFn(\" + stripSemi(line) + \"))\" + \"\\n\";\n                      break;\n                    case Template.modes.RAW:\n                      this.source += \"    ; __append(\" + stripSemi(line) + \")\" + \"\\n\";\n                      break;\n                    case Template.modes.COMMENT:\n                      break;\n                    case Template.modes.LITERAL:\n                      this._addOutput(line);\n                      break;\n                  }\n                } else {\n                  this._addOutput(line);\n                }\n            }\n            if (self.opts.compileDebug && newLineCount) {\n              this.currentLine += newLineCount;\n              this.source += \"    ; __line = \" + this.currentLine + \"\\n\";\n            }\n          }\n        };\n        exports.escapeXML = utils.escapeXML;\n        exports.__express = exports.renderFile;\n        exports.VERSION = _VERSION_STRING;\n        exports.name = _NAME;\n        if (typeof window != \"undefined\") {\n          window.ejs = exports;\n        }\n      }, {\n        \"../package.json\": 6,\n        \"./utils\": 2,\n        fs: 3,\n        path: 4\n      }],\n      2: [function (require, module, exports) {\n\n        var regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var hasOwn = function (obj, key) {\n          return hasOwnProperty.apply(obj, [key]);\n        };\n        exports.escapeRegExpChars = function (string) {\n          if (!string) {\n            return \"\";\n          }\n          return String(string).replace(regExpChars, \"\\\\$&\");\n        };\n        var _ENCODE_HTML_RULES = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&#34;\",\n          \"'\": \"&#39;\"\n        };\n        var _MATCH_HTML = /[&<>'\"]/g;\n        function encode_char(c) {\n          return _ENCODE_HTML_RULES[c] || c;\n        }\n        var escapeFuncStr = \"var _ENCODE_HTML_RULES = {\\n\" + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + \"    }\\n\" + \"  , _MATCH_HTML = /[&<>'\\\"]/g;\\n\" + \"function encode_char(c) {\\n\" + \"  return _ENCODE_HTML_RULES[c] || c;\\n\" + \"};\\n\";\n        exports.escapeXML = function (markup) {\n          return markup == undefined ? \"\" : String(markup).replace(_MATCH_HTML, encode_char);\n        };\n        function escapeXMLToString() {\n          return Function.prototype.toString.call(this) + \";\\n\" + escapeFuncStr;\n        }\n        try {\n          if (typeof Object.defineProperty === \"function\") {\n            Object.defineProperty(exports.escapeXML, \"toString\", {\n              value: escapeXMLToString\n            });\n          } else {\n            exports.escapeXML.toString = escapeXMLToString;\n          }\n        } catch (err) {\n          console.warn(\"Unable to set escapeXML.toString (is the Function prototype frozen?)\");\n        }\n        exports.shallowCopy = function (to, from) {\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var p in from) {\n              if (!hasOwn(from, p)) {\n                continue;\n              }\n              if (p === \"__proto__\" || p === \"constructor\") {\n                continue;\n              }\n              to[p] = from[p];\n            }\n          }\n          return to;\n        };\n        exports.shallowCopyFromList = function (to, from, list) {\n          list = list || [];\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var i = 0; i < list.length; i++) {\n              var p = list[i];\n              if (typeof from[p] != \"undefined\") {\n                if (!hasOwn(from, p)) {\n                  continue;\n                }\n                if (p === \"__proto__\" || p === \"constructor\") {\n                  continue;\n                }\n                to[p] = from[p];\n              }\n            }\n          }\n          return to;\n        };\n        exports.cache = {\n          _data: {},\n          set: function (key, val) {\n            this._data[key] = val;\n          },\n          get: function (key) {\n            return this._data[key];\n          },\n          remove: function (key) {\n            delete this._data[key];\n          },\n          reset: function () {\n            this._data = {};\n          }\n        };\n        exports.hyphenToCamel = function (str) {\n          return str.replace(/-[a-z]/g, function (match) {\n            return match[1].toUpperCase();\n          });\n        };\n        exports.createNullProtoObjWherePossible = function () {\n          if (typeof Object.create == \"function\") {\n            return function () {\n              return Object.create(null);\n            };\n          }\n          if (!({\n            __proto__: null\n          } instanceof Object)) {\n            return function () {\n              return {\n                __proto__: null\n              };\n            };\n          }\n          return function () {\n            return {};\n          };\n        }();\n        exports.hasOwnOnlyObject = function (obj) {\n          var o = exports.createNullProtoObjWherePossible();\n          for (var p in obj) {\n            if (hasOwn(obj, p)) {\n              o[p] = obj[p];\n            }\n          }\n          return o;\n        };\n      }, {}],\n      3: [function (require, module, exports) {}, {}],\n      4: [function (require, module, exports) {\n        (function (process) {\n          function normalizeArray(parts, allowAboveRoot) {\n            var up = 0;\n            for (var i = parts.length - 1; i >= 0; i--) {\n              var last = parts[i];\n              if (last === \".\") {\n                parts.splice(i, 1);\n              } else if (last === \"..\") {\n                parts.splice(i, 1);\n                up++;\n              } else if (up) {\n                parts.splice(i, 1);\n                up--;\n              }\n            }\n            if (allowAboveRoot) {\n              for (; up--; up) {\n                parts.unshift(\"..\");\n              }\n            }\n            return parts;\n          }\n          exports.resolve = function () {\n            var resolvedPath = \"\",\n              resolvedAbsolute = false;\n            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n              var path = i >= 0 ? arguments[i] : process.cwd();\n              if (typeof path !== \"string\") {\n                throw new TypeError(\"Arguments to path.resolve must be strings\");\n              } else if (!path) {\n                continue;\n              }\n              resolvedPath = path + \"/\" + resolvedPath;\n              resolvedAbsolute = path.charAt(0) === \"/\";\n            }\n            resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function (p) {\n              return !!p;\n            }), !resolvedAbsolute).join(\"/\");\n            return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n          };\n          exports.normalize = function (path) {\n            var isAbsolute = exports.isAbsolute(path),\n              trailingSlash = substr(path, -1) === \"/\";\n            path = normalizeArray(filter(path.split(\"/\"), function (p) {\n              return !!p;\n            }), !isAbsolute).join(\"/\");\n            if (!path && !isAbsolute) {\n              path = \".\";\n            }\n            if (path && trailingSlash) {\n              path += \"/\";\n            }\n            return (isAbsolute ? \"/\" : \"\") + path;\n          };\n          exports.isAbsolute = function (path) {\n            return path.charAt(0) === \"/\";\n          };\n          exports.join = function () {\n            var paths = Array.prototype.slice.call(arguments, 0);\n            return exports.normalize(filter(paths, function (p, index) {\n              if (typeof p !== \"string\") {\n                throw new TypeError(\"Arguments to path.join must be strings\");\n              }\n              return p;\n            }).join(\"/\"));\n          };\n          exports.relative = function (from, to) {\n            from = exports.resolve(from).substr(1);\n            to = exports.resolve(to).substr(1);\n            function trim(arr) {\n              var start = 0;\n              for (; start < arr.length; start++) {\n                if (arr[start] !== \"\") break;\n              }\n              var end = arr.length - 1;\n              for (; end >= 0; end--) {\n                if (arr[end] !== \"\") break;\n              }\n              if (start > end) return [];\n              return arr.slice(start, end - start + 1);\n            }\n            var fromParts = trim(from.split(\"/\"));\n            var toParts = trim(to.split(\"/\"));\n            var length = Math.min(fromParts.length, toParts.length);\n            var samePartsLength = length;\n            for (var i = 0; i < length; i++) {\n              if (fromParts[i] !== toParts[i]) {\n                samePartsLength = i;\n                break;\n              }\n            }\n            var outputParts = [];\n            for (var i = samePartsLength; i < fromParts.length; i++) {\n              outputParts.push(\"..\");\n            }\n            outputParts = outputParts.concat(toParts.slice(samePartsLength));\n            return outputParts.join(\"/\");\n          };\n          exports.sep = \"/\";\n          exports.delimiter = \":\";\n          exports.dirname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            if (path.length === 0) return \".\";\n            var code = path.charCodeAt(0);\n            var hasRoot = code === 47;\n            var end = -1;\n            var matchedSlash = true;\n            for (var i = path.length - 1; i >= 1; --i) {\n              code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  end = i;\n                  break;\n                }\n              } else {\n                matchedSlash = false;\n              }\n            }\n            if (end === -1) return hasRoot ? \"/\" : \".\";\n            if (hasRoot && end === 1) {\n              return \"/\";\n            }\n            return path.slice(0, end);\n          };\n          function basename(path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var start = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var i;\n            for (i = path.length - 1; i >= 0; --i) {\n              if (path.charCodeAt(i) === 47) {\n                if (!matchedSlash) {\n                  start = i + 1;\n                  break;\n                }\n              } else if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n            }\n            if (end === -1) return \"\";\n            return path.slice(start, end);\n          }\n          exports.basename = function (path, ext) {\n            var f = basename(path);\n            if (ext && f.substr(-1 * ext.length) === ext) {\n              f = f.substr(0, f.length - ext.length);\n            }\n            return f;\n          };\n          exports.extname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var startDot = -1;\n            var startPart = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var preDotState = 0;\n            for (var i = path.length - 1; i >= 0; --i) {\n              var code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  startPart = i + 1;\n                  break;\n                }\n                continue;\n              }\n              if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n              if (code === 46) {\n                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n              } else if (startDot !== -1) {\n                preDotState = -1;\n              }\n            }\n            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n              return \"\";\n            }\n            return path.slice(startDot, end);\n          };\n          function filter(xs, f) {\n            if (xs.filter) return xs.filter(f);\n            var res = [];\n            for (var i = 0; i < xs.length; i++) {\n              if (f(xs[i], i, xs)) res.push(xs[i]);\n            }\n            return res;\n          }\n          var substr = \"ab\".substr(-1) === \"b\" ? function (str, start, len) {\n            return str.substr(start, len);\n          } : function (str, start, len) {\n            if (start < 0) start = str.length + start;\n            return str.substr(start, len);\n          };\n        }).call(this, require(\"_process\"));\n      }, {\n        _process: 5\n      }],\n      5: [function (require, module, exports) {\n        var process = module.exports = {};\n        var cachedSetTimeout;\n        var cachedClearTimeout;\n        function defaultSetTimout() {\n          throw new Error(\"setTimeout has not been defined\");\n        }\n        function defaultClearTimeout() {\n          throw new Error(\"clearTimeout has not been defined\");\n        }\n        (function () {\n          try {\n            if (typeof setTimeout === \"function\") {\n              cachedSetTimeout = setTimeout;\n            } else {\n              cachedSetTimeout = defaultSetTimout;\n            }\n          } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n          }\n          try {\n            if (typeof clearTimeout === \"function\") {\n              cachedClearTimeout = clearTimeout;\n            } else {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        })();\n        function runTimeout(fun) {\n          if (cachedSetTimeout === setTimeout) {\n            return setTimeout(fun, 0);\n          }\n          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n          }\n          try {\n            return cachedSetTimeout(fun, 0);\n          } catch (e) {\n            try {\n              return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n              return cachedSetTimeout.call(this, fun, 0);\n            }\n          }\n        }\n        function runClearTimeout(marker) {\n          if (cachedClearTimeout === clearTimeout) {\n            return clearTimeout(marker);\n          }\n          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n          }\n          try {\n            return cachedClearTimeout(marker);\n          } catch (e) {\n            try {\n              return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n              return cachedClearTimeout.call(this, marker);\n            }\n          }\n        }\n        var queue = [];\n        var draining = false;\n        var currentQueue;\n        var queueIndex = -1;\n        function cleanUpNextTick() {\n          if (!draining || !currentQueue) {\n            return;\n          }\n          draining = false;\n          if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n          } else {\n            queueIndex = -1;\n          }\n          if (queue.length) {\n            drainQueue();\n          }\n        }\n        function drainQueue() {\n          if (draining) {\n            return;\n          }\n          var timeout = runTimeout(cleanUpNextTick);\n          draining = true;\n          var len = queue.length;\n          while (len) {\n            currentQueue = queue;\n            queue = [];\n            while (++queueIndex < len) {\n              if (currentQueue) {\n                currentQueue[queueIndex].run();\n              }\n            }\n            queueIndex = -1;\n            len = queue.length;\n          }\n          currentQueue = null;\n          draining = false;\n          runClearTimeout(timeout);\n        }\n        process.nextTick = function (fun) {\n          var args = new Array(arguments.length - 1);\n          if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n            }\n          }\n          queue.push(new Item(fun, args));\n          if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n          }\n        };\n        function Item(fun, array) {\n          this.fun = fun;\n          this.array = array;\n        }\n        Item.prototype.run = function () {\n          this.fun.apply(null, this.array);\n        };\n        process.title = \"browser\";\n        process.browser = true;\n        process.env = {};\n        process.argv = [];\n        process.version = \"\";\n        process.versions = {};\n        function noop() {}\n        process.on = noop;\n        process.addListener = noop;\n        process.once = noop;\n        process.off = noop;\n        process.removeListener = noop;\n        process.removeAllListeners = noop;\n        process.emit = noop;\n        process.prependListener = noop;\n        process.prependOnceListener = noop;\n        process.listeners = function (name) {\n          return [];\n        };\n        process.binding = function (name) {\n          throw new Error(\"process.binding is not supported\");\n        };\n        process.cwd = function () {\n          return \"/\";\n        };\n        process.chdir = function (dir) {\n          throw new Error(\"process.chdir is not supported\");\n        };\n        process.umask = function () {\n          return 0;\n        };\n      }, {}],\n      6: [function (require, module, exports) {\n        module.exports = {\n          name: \"ejs\",\n          description: \"Embedded JavaScript templates\",\n          keywords: [\"template\", \"engine\", \"ejs\"],\n          version: \"3.1.9\",\n          author: \"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)\",\n          license: \"Apache-2.0\",\n          bin: {\n            ejs: \"./bin/cli.js\"\n          },\n          main: \"./lib/ejs.js\",\n          jsdelivr: \"ejs.min.js\",\n          unpkg: \"ejs.min.js\",\n          repository: {\n            type: \"git\",\n            url: \"git://github.com/mde/ejs.git\"\n          },\n          bugs: \"https://github.com/mde/ejs/issues\",\n          homepage: \"https://github.com/mde/ejs\",\n          dependencies: {\n            jake: \"^10.8.5\"\n          },\n          devDependencies: {\n            browserify: \"^16.5.1\",\n            eslint: \"^6.8.0\",\n            \"git-directory-deploy\": \"^1.5.1\",\n            jsdoc: \"^4.0.2\",\n            \"lru-cache\": \"^4.0.1\",\n            mocha: \"^10.2.0\",\n            \"uglify-js\": \"^3.3.16\"\n          },\n          engines: {\n            node: \">=0.10.0\"\n          },\n          scripts: {\n            test: \"npx jake test\"\n          }\n        };\n      }, {}]\n    }, {}, [1])(1);\n  });\n\n  var Utils = {\n    /**\r\n     * Проверка на объект\r\n     * @param value\r\n     */\n    isObject: function isObject(value) {\n      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;\n    },\n    /**\r\n     * @returns {string}\r\n     * @private\r\n     */\n    hashCode: function hashCode() {\n      return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);\n    },\n    /**\r\n     * @param str\r\n     * @returns {number}\r\n     * @private\r\n     */\n    crc32: function crc32(str) {\n      for (var a, o = [], c = 0; c < 256; c++) {\n        a = c;\n        for (var f = 0; f < 8; f++) {\n          a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;\n        }\n        o[c] = a;\n      }\n      for (var n = -1, t = 0; t < str.length; t++) {\n        n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];\n      }\n      return (-1 ^ n) >>> 0;\n    }\n  };\n\n  var tpl = Object.create(null);\n  tpl['badge.html'] = '<span class=\"coreui-panel__tab-badge position-absolute top-0 translate-middle z-1 badge<%= badge.classes %>\"<%- badge.attr %>> <%= badge.text %> </span>';\n  tpl['container.html'] = '<div class=\"coreui-panel text-center mb-3<%= wrapperType %><%= fit %>\" id=\"coreui-panel-<%= id %>\"> <div class=\"card-body text-start\"> <% if (issetControls) { %> <div class=\"coreui-panel-controls position-relative top-0 end-0 float-end gap-1 d-flex flex-wrap justify-content-end\"></div> <% } %> <% if (title) { %> <h4 class=\"card-title<% if ( ! subtitle) { %> mb-4<% } %>\"> <%- title %> </h4> <% } %> <% if (subtitle) { %> <p class=\"coreui-panel-subtitle text-body-secondary\"><%- subtitle %></p> <% } %> <% if (tabs.content) { %> <% if ([\\'top-left\\', \\'top-center\\', \\'top-right\\'].indexOf(tabs.position) >= 0) { %> <%- tabs.content %> <div class=\"coreui-panel-content card-content\"></div> <% } else if (tabs.position === \\'left\\') { %> <div class=\"d-flex\"> <div class=\"me-3\" style=\"width: <%= tabs.width %>\"><%- tabs.content %></div> <div class=\"coreui-panel-content card-content flex-grow-1\"></div> </div> <% } else if (tabs.position === \\'right\\') { %> <div class=\"d-flex\"> <div class=\"coreui-panel-content card-content flex-grow-1 pe-3\"></div> <div style=\"width: <%= tabs.width %>\"><%- tabs.content %></div> </div> <% } %> <% } else { %> <div class=\"coreui-panel-content card-content\"></div> <% } %> </div> </div>';\n  tpl['loader.html'] = '<div class=\"coreui-panel-lock position-absolute w-100 top-0 bottom-0\"> <div class=\"coreui-panel-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0\"></div> <div class=\"coreui-panel-message position-relative d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary\"> <div class=\"spinner-border text-secondary align-self-center\"></div> <span class=\"lh-lg\"><%= loading %></span> </div> </div>';\n  tpl['panel-control.html'] = '<div id=\"coreui-panel-control-<%= id %>\" class=\"coreui-panel__control\"></div>';\n  tpl['tabs.html'] = ' <ul class=\"coreui-panel-tabs nav <% if (type) { %>nav-<%= type %><% } %> card-body-tabs mb-3 <% if (classes) { %><%= classes %><% } %> <% if (fill) { %>nav-<%= fill %><% } %>\"> <% $.each(tabsContents, function(key, tabContent) { %> <%- tabContent %> <% }) %> </ul>';\n  tpl['controls/button.html'] = '<button type=\"button\"<%- attr %>><%- content %></button>';\n  tpl['controls/button_group.html'] = ' <div class=\"btn-group\" role=\"group\"> <% $.each(buttons, function(key, button) { %> <% if (button.type === \\'link\\') { %> <a href=\"<%= button.link %>\"<%- button.attr %>><%- button.content %></a> <% } else if (button.type === \\'button\\') { %> <button type=\"button\" id=\"btn-<%= button.id %>\"<%- button.attr %>> <%- button.content %> </button> <% } else if (button.type === \\'dropdown\\') { %> <div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- button.attr %>> <%- button.content %> </button> <ul class=\"dropdown-menu dropdown-menu-<%= button.position %>\"> <% $.each(button.items, function(key, item) { %> <% if (item.type === \\'link\\') { %> <li><a class=\"dropdown-item\" href=\"<%= item.link %>\"><%- item.content %></a></li> <% } else if (item.type === \\'button\\') { %> <li> <button type=\"button\" class=\"dropdown-item\" id=\"btn-dropdown-<%= item.id %>\"> <%- item.content %> </button> </li> <% } else if (item.type === \\'divider\\') { %> <li><hr class=\"dropdown-divider\"></li> <% } %> <% }) %> </ul> </div> <% } %> <% }) %> </div>';\n  tpl['controls/dropdown.html'] = ' <div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- attr %>> <%- content %> </button> <ul class=\"dropdown-menu dropdown-menu-<%= position %>\"> <% items.map(function(item) { %> <% if (item.type === \\'link\\') { %> <li><a class=\"dropdown-item\" href=\"<%= item.link %>\"><%- item.content %></a></li> <% } else if (item.type === \\'button\\') { %> <li> <button type=\"button\" class=\"dropdown-item\" id=\"btn-dropdown-<%= item.id %>\"> <%- item.content %> </button> </li> <% } else if (item.type === \\'divider\\') { %> <li><hr class=\"dropdown-divider\"></li> <% } %> <% }) %> </ul> </div>';\n  tpl['controls/link.html'] = '<a href=\"<%- href %>\"<%- attr %>><%- content %></a>';\n  tpl['tabs/tab-dropdown-divider.html'] = ' <li> <hr class=\"dropdown-divider\"> </li>';\n  tpl['tabs/tab-dropdown-item.html'] = ' <li class=\"coreui-panel__tab-item-<%= item.id %>\"> <a class=\"dropdown-item position-relative<% if (item.active) { %> active<% } %><% if (item.disabled) { %> disabled<% } %>\" href=\"<% if (item.url) { %><%= item.url %><% } else { %>#<% } %>\" data-bs-toggle=\"tab\" data-tab-id=\"<%= item.id %>\"> <span class=\"coreui-panel__tab-item-title\"><%= item.title %></span> <% if (item.count !== null) { %> <span class=\"coreui-panel__tab-item-count\">(<%= item.count %>)</span><% } %> <%- item.badge %> </a> </li>';\n  tpl['tabs/tab-dropdown.html'] = ' <li class=\"nav-item coreui-panel__tab-<%= tab.id %> dropdown<% if (tab.active) { %> active<% } %><% if (tab.disabled) { %> disabled<% } %>\"> <a class=\"nav-link dropdown-toggle\" data-bs-toggle=\"dropdown\" href=\"#\"> <span class=\"coreui-panel__tab-title\"><%= tab.title %></span> <% if (tab.count !== null) { %> <span class=\"coreui-panel__tab-count\">(<%= tab.count %>)</span><% } %> <%- tab.badge %> </a> <ul class=\"dropdown-menu\"> <% $.each(tab.itemsContents, function(key, itemContent) { %> <%- itemContent %> <% }) %> </ul> </li>';\n  tpl['tabs/tab.html'] = ' <li class=\"nav-item coreui-panel__tab-<%= tab.id %>\"> <a class=\"nav-link position-relative<% if (tab.active) { %> active<% } %><% if (tab.disabled) { %> disabled<% } %>\" href=\"<% if (tab.url) { %><%= tab.url %><% } else { %>#<% } %>\" data-tab-id=\"<%= tab.id %>\" data-bs-toggle=\"tab\"> <span class=\"coreui-panel__tab-title\"><%= tab.title %></span> <% if (tab.count !== null) { %> <span class=\"coreui-panel__tab-count\">(<%= tab.count %>)<% } %> <%- tab.badge %> </a> </li>';\n\n  var Elements = {\n    /**\r\n     * получение контейнера панели\r\n     * @param panelId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getPanel: function getPanel(panelId) {\n      return $('#coreui-panel-' + panelId);\n    },\n    /**\r\n     * Получение контейнера с табов\r\n     * @param panelId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabsContainer: function getTabsContainer(panelId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel-tabs');\n    },\n    /**\r\n     * Получение контейнера таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabContainer: function getTabContainer(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId);\n    },\n    /**\r\n     * Получение контейнера с количеством таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabCount: function getTabCount(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-count');\n    },\n    /**\r\n     * Получение контейнера с текстом таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabTitle: function getTabTitle(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-title');\n    },\n    /**\r\n     * Получение контейнера с меткой таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabBadge: function getTabBadge(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-badge');\n    },\n    /**\r\n     * Получение контейнера таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabItemContainer: function getTabItemContainer(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-item-' + tabId);\n    },\n    /**\r\n     * Получение контейнера с текстом таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabItemTitle: function getTabItemTitle(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-item-title');\n    },\n    /**\r\n     * Получение контейнера с количеством таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabItemCount: function getTabItemCount(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-item-count');\n    },\n    /**\r\n     *\r\n     * @param panelId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getContent: function getContent(panelId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel-content');\n    },\n    /**\r\n     *\r\n     * @param panelId\r\n     * @param controlId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getControl: function getControl(panelId, controlId) {\n      return $('#coreui-panel-' + panelId + ' #coreui-panel-control-' + controlId);\n    },\n    /**\r\n     * Получение блокировки панели\r\n     * @param {string} panelId\r\n     * @return {jQuery}\r\n     */\n    getLock: function getLock(panelId) {\n      return $('#coreui-panel-' + panelId + ' > .coreui-panel-lock');\n    }\n  };\n\n  var TabAbstract = /*#__PURE__*/function () {\n    /**\r\n     * Инициализация таба\r\n     * @param {Panel}  panel\r\n     * @param {Object} options\r\n     * @private\r\n     */\n    function TabAbstract(panel, options) {\n      _classCallCheck(this, TabAbstract);\n      _defineProperty(this, \"_id\", null);\n      _defineProperty(this, \"_panel\", null);\n      _defineProperty(this, \"_options\", {\n        id: null,\n        type: 'tab',\n        title: '',\n        url: null,\n        urlCount: null,\n        urlBadge: null,\n        count: null,\n        badge: null,\n        active: false,\n        disabled: false\n      });\n      this._panel = panel;\n      this._options = $.extend(true, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id == 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    }\n\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string|null}\r\n     */\n    return _createClass(TabAbstract, [{\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Получение типа таба\r\n       * @returns {string}\r\n       */\n    }, {\n      key: \"getType\",\n      value: function getType() {\n        return this._options.type;\n      }\n\n      /**\r\n       * Получение опций таба\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\r\n       * Проверка активен ли таб\r\n       * @return {false}\r\n       */\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        return this._options.hasOwnProperty('active') && typeof this._options.active == 'boolean' && this._options.active;\n      }\n\n      /**\r\n       * Установка названия\r\n       * @param {string} title\r\n       */\n    }, {\n      key: \"setTitle\",\n      value: function setTitle(title) {\n        if (['string', 'number'].indexOf(_typeof(title)) < 0 || title.toString().length === 0) {\n          return;\n        }\n        var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n        tabTitleElement.text(title);\n      }\n\n      /**\r\n       * Установка метки\r\n       * @param {object} badge\r\n       */\n    }, {\n      key: \"setBadge\",\n      value: function setBadge(badge) {\n        var badgeRender = Private.renderBadge(badge);\n        var tabBadgeElement = Elements.getTabBadge(this._panel.getId(), this.getId());\n        if (badgeRender) {\n          if (tabBadgeElement[0]) {\n            tabBadgeElement.replaceWith(badgeRender);\n          } else {\n            var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n            tabTitleElement.after(badgeRender);\n          }\n        } else if (tabBadgeElement[0]) {\n          tabBadgeElement.replaceWith(badgeRender);\n        }\n      }\n    }]);\n  }();\n\n  function _callSuper$3(_this, derived, args) {\n    function isNativeReflectConstruct() {\n      if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n      if (Reflect.construct.sham) return false;\n      if (typeof Proxy === \"function\") return true;\n      try {\n        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (e) {\n        return false;\n      }\n    }\n    derived = _getPrototypeOf(derived);\n    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n  }\n\n  /**\r\n   *\r\n   */\n  var Tab = /*#__PURE__*/function (_TabAbstract) {\n    /**\r\n     * Инициализация таба\r\n     * @param {Panel}  panel\r\n     * @param {Object} options\r\n     * @private\r\n     */\n    function Tab(panel, options) {\n      _classCallCheck(this, Tab);\n      var optionsDefault = {\n        id: null,\n        type: 'tab',\n        title: '',\n        url: null,\n        urlContent: null,\n        urlCount: null,\n        urlBadge: null,\n        urlWindow: null,\n        count: null,\n        badge: null,\n        active: false,\n        disabled: false\n      };\n      return _callSuper$3(this, Tab, [panel, $.extend(true, optionsDefault, options)]);\n    }\n\n    /**\r\n     * Получение опций таба\r\n     * @return {object}\r\n     */\n    _inherits(Tab, _TabAbstract);\n    return _createClass(Tab, [{\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\r\n       * Установка активного таба\r\n       */\n    }, {\n      key: \"setActive\",\n      value: function setActive() {\n        var tabTabElement = Elements.getTabContainer(this._panel.getId(), this.getId());\n        if (tabTabElement[0]) {\n          var tabTabsElement = Elements.getTabsContainer(this._panel.getId());\n          tabTabsElement.find('.nav-link').removeClass('active');\n          tabTabsElement.find('.nav-link.dropdown-toggle').removeClass('active');\n          tabTabsElement.find('.nav-link.dropdown-toggle .dropdown-item').removeClass('active');\n          tabTabElement.find('> a').addClass('active');\n          Private.trigger(this._panel, 'tab_click', this._panel, [{\n            tab: this\n          }]);\n        }\n      }\n\n      /**\r\n       * Установка количества\r\n       * @param {number|null} count\r\n       */\n    }, {\n      key: \"setCount\",\n      value: function setCount(count) {\n        var tabCountElement = Elements.getTabCount(this._panel.getId(), this.getId());\n        if (['string', 'number'].indexOf(_typeof(count)) < 0 || count.toString().length === 0) {\n          tabCountElement.remove();\n        } else {\n          if (tabCountElement[0]) {\n            tabCountElement.text(' (' + count + ')');\n          } else {\n            var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n            tabTitleElement.after('<span class=\"coreui-panel__tab-count\"> (' + count + ')>');\n          }\n        }\n      }\n\n      /**\r\n       *\r\n       */\n    }, {\n      key: \"initEvents\",\n      value: function initEvents() {\n        var that = this;\n        var options = this.getOptions();\n        this._panel.on('panel_show', function () {\n          var tabsContainerElement = Elements.getTabContainer(that._panel.getId(), that.getId());\n          $('.nav-link', tabsContainerElement).click(function (event) {\n            Private.trigger(that._panel, 'tab_click', that, [{\n              tab: that,\n              event: event\n            }]);\n            if (options.url && options.url !== '#') {\n              location.href = options.url;\n            } else {\n              return false;\n            }\n          });\n          var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options._count)) >= 0 && options._count.toString().length > 0 ? options._count : null;\n          var urlCount = options.hasOwnProperty('urlCount') && typeof options.urlCount == 'string' && options.urlCount ? options.urlCount : null;\n          if (count === null && urlCount) {\n            that.setCount('<div class=\"spinner-border spinner-border-sm text-secondary\"></div>');\n            fetch(urlCount).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (Utils.isObject(response) && response.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(response.count)) >= 0 && response.count.toString().length > 0) {\n                that.setCount(response.count);\n              } else {\n                that.setCount(null);\n              }\n            })[\"catch\"](function () {\n              that.setCount(null);\n            });\n          }\n        });\n        var badge = options.hasOwnProperty('badge') && ['string', 'number'].indexOf(_typeof(options.badge)) >= 0 && options.badge.toString().length > 0 ? options.badge : null;\n        var urlBadge = options.hasOwnProperty('urlBadge') && typeof options.urlBadge == 'string' && options.urlBadge ? options.urlBadge : null;\n        if (badge === null && urlBadge) {\n          fetch(urlBadge).then(function (response) {\n            return response.json();\n          }).then(function (response) {\n            if (Utils.isObject(response) && response.hasOwnProperty('badge') && Utils.isObject(response.badge)) {\n              that.setBadge(response.badge);\n            }\n          })[\"catch\"](function () {\n            that.setBadge(null);\n          });\n        }\n      }\n\n      /**\r\n       * Рендер содержимого\r\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n        var active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n        var disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n        var url = '';\n        if (options.hasOwnProperty('url') && typeof options.url == 'string' && options.url) {\n          url = options.url;\n        } else if (options.hasOwnProperty('urlWindow') && typeof options.urlWindow == 'string' && options.urlWindow) {\n          url = options.urlWindow;\n        } else {\n          url = '#';\n        }\n        var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options.count)) >= 0 && options.count.toString().length > 0 ? options.count : null;\n        var badge = options.hasOwnProperty('badge') ? Private.renderBadge(options.badge) : null;\n        return ejs.render(tpl['tabs/tab.html'], {\n          tab: {\n            id: this.getId(),\n            title: title,\n            active: active,\n            disabled: disabled,\n            url: url,\n            count: count,\n            badge: badge\n          }\n        });\n      }\n    }]);\n  }(TabAbstract);\n\n  var DropdownItem$1 = /*#__PURE__*/function () {\n    /**\r\n     * Инициализация таба\r\n     * @param {Panel}       panel\r\n     * @param {TabDropdown} dropdown\r\n     * @param {Object}      options\r\n     * @private\r\n     */\n    function DropdownItem(panel, dropdown, options) {\n      _classCallCheck(this, DropdownItem);\n      _defineProperty(this, \"_id\", null);\n      _defineProperty(this, \"_panel\", null);\n      _defineProperty(this, \"_dropdown\", null);\n      _defineProperty(this, \"_options\", {\n        id: null,\n        type: 'item',\n        active: false,\n        disabled: false,\n        url: '',\n        urlContent: null,\n        urlWindow: '',\n        title: '',\n        count: null\n      });\n      this._options = $.extend(true, {}, this._options, options);\n      this._panel = panel;\n      this._dropdown = dropdown;\n      this._id = this._options.hasOwnProperty('id') && ['string', 'number'].indexOf(_typeof(this._options.id)) >= 0 && this._options.id ? this._options.id : Utils.hashCode();\n    }\n\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string}\r\n     */\n    return _createClass(DropdownItem, [{\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Получение опций таба\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\r\n       * Установка активного таба\r\n       */\n    }, {\n      key: \"setActive\",\n      value: function setActive() {\n        var tabItemElement = Elements.getTabItemContainer(this._panel.getId(), this.getId());\n        if (tabItemElement[0]) {\n          var tabTabsElement = Elements.getTabsContainer(this._panel.getId());\n          tabTabsElement.find('.nav-link').removeClass('active');\n          tabTabsElement.find('.nav-link.dropdown-toggle').removeClass('active');\n          tabTabsElement.find('.nav-link.dropdown-toggle .dropdown-item').removeClass('active');\n          var tabElement = Elements.getTabContainer(this._panel.getId(), this._dropdown.getId());\n          tabElement.find('> a').addClass('active');\n          tabItemElement.find('> a').addClass('active');\n          Private.trigger(this._panel, 'tab_click', this._panel, [{\n            tab: this\n          }]);\n        }\n      }\n\n      /**\r\n       * Установка названия\r\n       * @param {string} title\r\n       */\n    }, {\n      key: \"setTitle\",\n      value: function setTitle(title) {\n        if (['string', 'number'].indexOf(_typeof(title)) < 0 || title.toString().length === 0) {\n          return;\n        }\n        var tabTitleElement = Elements.getTabItemTitle(this._panel.getId(), this.getId());\n        tabTitleElement.text(title);\n      }\n\n      /**\r\n       * Установка количества\r\n       * @param {number} count\r\n       */\n    }, {\n      key: \"setCount\",\n      value: function setCount(count) {\n        var tabCountElement = Elements.getTabItemCount(this._panel.getId(), this.getId());\n        if (['string', 'number'].indexOf(_typeof(count)) < 0 || count.toString().length === 0) {\n          tabCountElement.remove();\n        } else {\n          if (tabCountElement[0]) {\n            tabCountElement.text('(' + count + ')');\n          } else {\n            var tabTitleElement = Elements.getTabItemTitle(this._panel.getId(), this.getId());\n            tabTitleElement.after('(' + count + ')');\n          }\n        }\n      }\n\n      /**\r\n       * Рендер содержимого\r\n       * @return {*}\r\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        options.title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n        options.active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n        options.disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n        var url = '';\n        if (options.hasOwnProperty('url') && typeof options._url == 'string' && options._url) {\n          url = options._url;\n        } else if (options.hasOwnProperty('urlWindow') && typeof options._urlWindow == 'string' && options._urlWindow) {\n          url = options._urlWindow;\n        } else {\n          url = '#';\n        }\n        var title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n        var active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n        var disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n        var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options._count)) >= 0 && options._count.toString().length > 0 ? options._count : null;\n        return ejs.render(tpl['tabs/tab-dropdown-item.html'], {\n          item: {\n            id: this.getId(),\n            type: 'item',\n            active: active,\n            disabled: disabled,\n            url: url,\n            title: title,\n            count: count\n          }\n        });\n      }\n    }]);\n  }();\n\n  var DropdownDivider$1 = /*#__PURE__*/function () {\n    /**\r\n     * Инициализация таба\r\n     * @param {Panel}       panel\r\n     * @param {TabDropdown} dropdown\r\n     * @param {Object}      options\r\n     * @private\r\n     */\n    function DropdownDivider(panel, dropdown, options) {\n      _classCallCheck(this, DropdownDivider);\n      _defineProperty(this, \"_id\", null);\n      _defineProperty(this, \"_panel\", null);\n      _defineProperty(this, \"_dropdown\", null);\n      _defineProperty(this, \"_options\", {\n        id: null,\n        type: 'divider'\n      });\n      this._options = $.extend(true, {}, this._options, options);\n      this._panel = panel;\n      this._dropdown = dropdown;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id == 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    }\n\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string}\r\n     */\n    return _createClass(DropdownDivider, [{\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Рендер содержимого\r\n       * @return {*}\r\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        return tpl['tabs/tab-dropdown-divider.html'];\n      }\n    }]);\n  }();\n\n  function _callSuper$2(_this, derived, args) {\n    function isNativeReflectConstruct() {\n      if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n      if (Reflect.construct.sham) return false;\n      if (typeof Proxy === \"function\") return true;\n      try {\n        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (e) {\n        return false;\n      }\n    }\n    derived = _getPrototypeOf(derived);\n    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n  }\n\n  /**\r\n   *\r\n   */\n  var TabDropdown = /*#__PURE__*/function (_TabAbstract) {\n    /**\r\n     * Инициализация таба\r\n     * @param {Panel}  panel\r\n     * @param {object} options\r\n     * @private\r\n     */\n    function TabDropdown(panel, options) {\n      var _this2;\n      _classCallCheck(this, TabDropdown);\n      var defaultOptions = {\n        id: null,\n        type: 'dropdown',\n        title: '',\n        active: false,\n        disabled: false,\n        items: []\n      };\n      _this2 = _callSuper$2(this, TabDropdown, [panel, $.extend(true, {}, defaultOptions, options)]);\n      _defineProperty(_this2, \"_items\", []);\n      var that = _this2;\n      if (_this2._options.hasOwnProperty('items') && Array.isArray(_this2._options.items) && _this2._options.items.length > 0) {\n        _this2._options.items.map(function (item) {\n          var tabType = item.hasOwnProperty('type') && typeof item.type === 'string' ? item.type : 'item';\n          var instance = null;\n          switch (tabType) {\n            case 'item':\n            default:\n              instance = new DropdownItem$1(panel, that, item);\n              break;\n            case 'divider':\n              instance = new DropdownDivider$1(panel, that, item);\n              break;\n          }\n          if (instance) {\n            that._items.push(instance);\n          }\n        });\n      }\n      return _this2;\n    }\n\n    /**\r\n     * Инициализация событий\r\n     */\n    _inherits(TabDropdown, _TabAbstract);\n    return _createClass(TabDropdown, [{\n      key: \"initEvents\",\n      value: function initEvents() {\n        var that = this;\n        this._panel.on('panel_show', function () {\n          var tabsContainerElement = Elements.getTabContainer(that._panel.getId(), that.getId());\n          $('.dropdown-item', tabsContainerElement).click(function (event) {\n            var tabId = $(this).data('tab-id') || '';\n            var tab = that.getItem(tabId);\n            if (tab) {\n              Private.trigger(that._panel, 'tab_click', tab, [{\n                tab: tab,\n                event: event\n              }]);\n              var options = tab.getOptions();\n              if (options._url && options._url !== '#') {\n                location.href = options._url;\n              } else {\n                return false;\n              }\n            }\n          });\n        });\n      }\n\n      /**\r\n       * Получение опций таба\r\n       * @property {string} itemId\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getItem\",\n      value: function getItem(itemId) {\n        var result = null;\n        var _iterator = _createForOfIteratorHelper(this._items),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            if (item.getId && typeof item.getId === 'function' && item.getId() == itemId) {\n              result = item;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return result;\n      }\n\n      /**\r\n       * Установка количества\r\n       * @param {number} count\r\n       */\n    }, {\n      key: \"setCount\",\n      value: function setCount(count) {\n        var tabCountElement = Elements.getTabCount(this._panel.getId(), this.getId());\n        if (['string', 'number'].indexOf(_typeof(count)) < 0 || count.toString().length === 0) {\n          tabCountElement.remove();\n        } else {\n          if (tabCountElement[0]) {\n            tabCountElement.text('(' + count + ')');\n          } else {\n            var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n            tabTitleElement.after('(' + count + ')');\n          }\n        }\n      }\n\n      /**\r\n       * Рендер содержимого\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"render\",\n      value: function render() {\n        var options = this.getOptions();\n        var title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n        var active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n        var disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n        var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options.count)) >= 0 && options.count.toString().length > 0 ? options.count : null;\n        var badge = options.hasOwnProperty('badge') ? Private.renderBadge(options.badge) : null;\n        var itemsContents = [];\n        this._items.map(function (item) {\n          itemsContents.push(item.render());\n        });\n        return ejs.render(tpl['tabs/tab-dropdown.html'], {\n          tab: {\n            id: this.getId(),\n            title: title,\n            active: active,\n            disabled: disabled,\n            count: count,\n            badge: badge,\n            itemsContents: itemsContents\n          }\n        });\n      }\n    }]);\n  }(TabAbstract);\n\n  var Private = {\n    /**\r\n     * @param panel\r\n     * @param name\r\n     * @param context\r\n     * @param params\r\n     */\n    trigger: function trigger(panel, name, context, params) {\n      params = params || [];\n      if (panel._events.hasOwnProperty(name) && panel._events[name].length > 0) {\n        for (var i = 0; i < panel._events[name].length; i++) {\n          var callback = panel._events[name][i].callback;\n          context = panel._events[name][i].context || context;\n          callback.apply(context, params);\n          if (panel._events[name][i].singleExec) {\n            panel._events[name].splice(i, 1);\n            i--;\n          }\n        }\n      }\n    },\n    /**\r\n     * Инициализация контролов и фильтров\r\n     * @param {Panel} panel\r\n     * @param {Array} controls\r\n     * @private\r\n     */\n    initControls: function initControls(panel, controls) {\n      controls.map(function (control) {\n        if (Utils.isObject(control) && typeof control.type === 'string') {\n          if (panel._controller.controls.hasOwnProperty(control.type)) {\n            var instance = $.extend(true, {}, panel._controller.controls[control.type]);\n            instance.init(panel, control);\n            panel._controls.push(instance);\n          }\n        }\n      });\n    },\n    /**\r\n     * Инициализация контролов и фильтров\r\n     * @param {Panel} panel\r\n     * @param {Array} tabItems\r\n     * @private\r\n     */\n    initTabs: function initTabs(panel, tabItems) {\n      tabItems.map(function (tabItem) {\n        if (tabItem && tabItem.constructor) {\n          if (tabItem.constructor.name && typeof tabItem.toObject === 'function') {\n            tabItem = tabItem.toObject();\n          }\n        }\n        if (Utils.isObject(tabItem)) {\n          var instance = null;\n          var tabType = tabItem.hasOwnProperty('type') && typeof tabItem.type === 'string' ? tabItem.type : 'tab';\n          if (tabType === 'tab') {\n            instance = new Tab(panel, tabItem);\n          } else if (tabType === 'dropdown') {\n            instance = new TabDropdown(panel, tabItem);\n          }\n          if (instance) {\n            panel._tabs.push(instance);\n            panel.on('panel_show', function () {\n              instance.initEvents();\n            });\n          }\n        }\n      });\n    },\n    /**\r\n     * Сборка табов\r\n     * @param {object} panel\r\n     * @param {object} tabs\r\n     */\n    renderTabs: function renderTabs(panel, tabs) {\n      var classes = [];\n      var tabsContents = [];\n      if (tabs.hasOwnProperty('position') && typeof tabs.position === 'string') {\n        switch (tabs.position) {\n          case 'top-center':\n            classes.push('justify-content-center');\n            break;\n          case 'top-right':\n            classes.push('justify-content-end');\n            break;\n          case 'left':\n            classes.push('left-tabs');\n            break;\n          case 'right':\n            classes.push('right-tabs');\n            break;\n        }\n      }\n      if (tabs.hasOwnProperty('type') && typeof tabs.type === 'string' && ['tabs', 'pills'].indexOf(tabs.type) >= 0) {\n        classes.push('gap-1');\n      }\n      panel._tabs.map(function (tab) {\n        tabsContents.push(tab.render());\n      });\n      return ejs.render(tpl['tabs.html'], {\n        classes: classes.join(' '),\n        type: tabs.hasOwnProperty('type') && typeof tabs.type === 'string' ? tabs.type : '',\n        fill: tabs.hasOwnProperty('fill') && typeof tabs.fill === 'string' ? tabs.fill : '',\n        tabsContents: tabsContents\n      });\n    },\n    /**\r\n     * Сборка элемента управления\r\n     * @param {object} panel\r\n     * @param {object} control\r\n     * @private\r\n     * @returns {HTMLElement|jQuery}\r\n     */\n    renderControl: function renderControl(panel, control) {\n      if (Utils.isObject(control)) {\n        var controlElement = $(ejs.render(tpl['panel-control.html'], {\n          id: control.getId()\n        }));\n        controlElement.append(control.render());\n        if (control.hasOwnProperty('initEvents') && typeof control.initEvents === 'function') {\n          panel.on('panel_show', function () {\n            control.initEvents();\n          });\n        }\n        return controlElement;\n      }\n    },\n    /**\r\n     * Сборка содержимого\r\n     * @param {object} panel\r\n     * @param {*} content\r\n     * @return {Array}\r\n     */\n    renderContents: function renderContents(panel, content) {\n      var result = [];\n      if (typeof content === 'string') {\n        result.push(content);\n      } else if (content instanceof Object) {\n        if (!Array.isArray(content)) {\n          content = [content];\n        }\n        for (var i = 0; i < content.length; i++) {\n          if (typeof content[i] === 'string') {\n            result.push(content[i]);\n          } else if (content[i] instanceof Object && typeof content[i].render === 'function' && typeof content[i].initEvents === 'function') {\n            result.push(content[i].render());\n            panel.one('content_show', content[i].initEvents, content[i], true);\n          } else if (!Array.isArray(content[i]) && content[i].hasOwnProperty('component') && typeof content[i].component === 'string' && content[i].component.substring(0, 6) === 'coreui') {\n            var name = content[i].component.split('.')[1];\n            if (CoreUI.hasOwnProperty(name) && Utils.isObject(CoreUI[name])) {\n              var instance = CoreUI[name].create(content[i]);\n              result.push(instance.render());\n              panel.one('content_show', instance.initEvents, instance);\n            }\n          } else {\n            result.push(JSON.stringify(content[i]));\n          }\n        }\n      }\n      return result;\n    },\n    /**\r\n     * Создание метки\r\n     * @param {object} badge\r\n     * @return {null}\r\n     * @private\r\n     */\n    renderBadge: function renderBadge(badge) {\n      if (!Utils.isObject(badge) || !badge.hasOwnProperty('text') || ['string', 'number'].indexOf(_typeof(badge.text)) < 0) {\n        return '';\n      }\n      var attr = [];\n      var type = badge.hasOwnProperty('type') && typeof badge.type === 'string' ? badge.type : 'danger';\n      var classes = badge.text.toString().length > 0 ? 'rounded-pill bg-' + type : 'rounded-circle p-1 bg-' + type;\n      if (badge.hasOwnProperty('attr') && Utils.isObject(badge.attr)) {\n        if (badge.attr.hasOwnProperty('class') && typeof badge.attr[\"class\"] === 'string') {\n          classes += ' ' + badge.attr[\"class\"];\n          delete badge.attr[\"class\"];\n        }\n        for (var _i = 0, _Object$entries = Object.entries(badge.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          if (typeof name === 'string' && ['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attr.push(name + '=\"' + value + '\"');\n          }\n        }\n      }\n      return ejs.render(tpl['badge.html'], {\n        badge: {\n          text: badge.text,\n          classes: classes ? ' ' + classes : '',\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : ''\n        }\n      });\n    }\n  };\n\n  var AbstractTab = /*#__PURE__*/function () {\n    function AbstractTab() {\n      _classCallCheck(this, AbstractTab);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_title\", '');\n      _defineProperty(this, \"_disabled\", false);\n      _defineProperty(this, \"_active\", false);\n    }\n    return _createClass(AbstractTab, [{\n      key: \"setTitle\",\n      value:\n      /**\r\n       * @param {string} title\r\n       * @return {AbstractTab}\r\n       */\n      function setTitle(title) {\n        this._title = title;\n        return this;\n      }\n\n      /**\r\n       * Получение названия таба\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getTitle\",\n      value: function getTitle() {\n        return this._title;\n      }\n\n      /**\r\n       * Установка ID таба\r\n       * @param {string} id\r\n       * @return AbstractTab\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID таба\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка запрета на переход в таб\r\n       * @param {boolean} isDisabled\r\n       * @return {AbstractTab}\r\n       */\n    }, {\n      key: \"setDisabled\",\n      value: function setDisabled() {\n        var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._disabled = isDisabled;\n        return this;\n      }\n\n      /**\r\n       * Получение запрета на переход в таб\r\n       * @return {boolean}\r\n       */\n    }, {\n      key: \"isDisabled\",\n      value: function isDisabled() {\n        return this._disabled;\n      }\n\n      /**\r\n       * Установка информации активен ли таб\r\n       * @param {boolean} isActive\r\n       * @return {AbstractTab}\r\n       */\n    }, {\n      key: \"setActive\",\n      value: function setActive() {\n        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._active = isActive;\n        return this;\n      }\n\n      /**\r\n       * Получение информации активен ли таб\r\n       * @return {boolean}\r\n       */\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        return this._active;\n      }\n\n      /**\r\n       * Проебразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = {\n          id: this.getId(),\n          type: 'tab',\n          title: this.getTitle()\n        };\n        if (this.isActive()) {\n          result.active = true;\n        }\n        if (this.isDisabled()) {\n          result.disabled = true;\n        }\n        return result;\n      }\n    }]);\n  }();\n\n  function _callSuper$1(_this, derived, args) {\n    function isNativeReflectConstruct() {\n      if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n      if (Reflect.construct.sham) return false;\n      if (typeof Proxy === \"function\") return true;\n      try {\n        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (e) {\n        return false;\n      }\n    }\n    derived = _getPrototypeOf(derived);\n    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n  }\n  var HelperTab = /*#__PURE__*/function (_AbstractTab) {\n    /**\r\n     * @param {string} id\r\n     */\n    function HelperTab(id) {\n      var _this2;\n      _classCallCheck(this, HelperTab);\n      _this2 = _callSuper$1(this, HelperTab);\n      _defineProperty(_this2, \"BADGE_TYPE_DANGER\", 'danger');\n      _defineProperty(_this2, \"BADGE_TYPE_PRIMARY\", 'primary');\n      _defineProperty(_this2, \"BADGE_TYPE_SECONDARY\", 'secondary');\n      _defineProperty(_this2, \"BADGE_TYPE_SUCCESS\", 'success');\n      _defineProperty(_this2, \"BADGE_TYPE_WARNING\", 'warning');\n      _defineProperty(_this2, \"BADGE_TYPE_INFO\", 'info');\n      _defineProperty(_this2, \"BADGE_TYPE_LIGHT\", 'light');\n      _defineProperty(_this2, \"BADGE_TYPE_DARK\", 'dark');\n      _defineProperty(_this2, \"_url\", null);\n      _defineProperty(_this2, \"_urlContent\", null);\n      _defineProperty(_this2, \"_urlCount\", null);\n      _defineProperty(_this2, \"_urlBadge\", null);\n      _defineProperty(_this2, \"_urlWindow\", null);\n      _defineProperty(_this2, \"_count\", null);\n      _defineProperty(_this2, \"_badge\", null);\n      _this2.setId(id);\n      return _this2;\n    }\n\n    /**\r\n     * Установка количества для таба\r\n     * @param {string|null} count\r\n     * @return {this}\r\n     */\n    _inherits(HelperTab, _AbstractTab);\n    return _createClass(HelperTab, [{\n      key: \"setCount\",\n      value: function setCount() {\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._count = count;\n        return this;\n      }\n\n      /**\r\n       * Получение количества для таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getCount\",\n      value: function getCount() {\n        return this._count;\n      }\n\n      /**\r\n       * Установка метки для таба\r\n       * @param {string|null} text\r\n       * @param {string} type\r\n       * @param {array} attr\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setBadge\",\n      value: function setBadge() {\n        var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.BADGE_TYPE_DANGER;\n        var attr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        if (text === null) {\n          this._badge = null;\n        } else {\n          this._badge = {\n            text: text,\n            type: type,\n            attr: attr\n          };\n        }\n        return this;\n      }\n\n      /**\r\n       * Установка метки для таба в виде точки\r\n       * @param {string} type\r\n       * @param {array} attr\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setBadgeDot\",\n      value: function setBadgeDot() {\n        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.BADGE_TYPE_DANGER;\n        var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        this._badge = {\n          text: '',\n          type: type,\n          attr: attr\n        };\n        return this;\n      }\n\n      /**\r\n       * Получение метки для таба\r\n       * @return {object|null}\r\n       */\n    }, {\n      key: \"getBadge\",\n      value: function getBadge() {\n        return this._badge;\n      }\n\n      /**\r\n       * Установка url таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrl\",\n      value: function setUrl() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._url = url;\n        return this;\n      }\n\n      /**\r\n       * Установка url таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrl\",\n      value: function getUrl() {\n        return this._url;\n      }\n\n      /**\r\n       * Получение метки для таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlContent\",\n      value: function setUrlContent() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlContent = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url таба для загрузки содержимого\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlContent\",\n      value: function getUrlContent() {\n        return this._urlContent;\n      }\n\n      /**\r\n       * Установка url количества таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlCount\",\n      value: function setUrlCount() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlCount = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url количества таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlCount\",\n      value: function getUrlCount() {\n        return this._urlCount;\n      }\n\n      /**\r\n       * Установка url метки таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlBadge\",\n      value: function setUrlBadge() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlBadge = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url метки таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlBadge\",\n      value: function getUrlBadge() {\n        return this._urlBadge;\n      }\n\n      /**\r\n       * Установка url для окна браузера\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlWindow\",\n      value: function setUrlWindow() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlWindow = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url для окна браузера\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlWindow\",\n      value: function getUrlWindow() {\n        return this._urlWindow;\n      }\n\n      /**\r\n       * Convert tab to object\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = _get(_getPrototypeOf(HelperTab.prototype), \"toObject\", this).call(this);\n        var url = this.getUrl();\n        if (url !== null) {\n          result.url = url;\n        }\n        var urlContent = this.getUrlContent();\n        if (urlContent !== null) {\n          result.urlContent = urlContent;\n        }\n        var urlWindow = this.getUrlWindow();\n        if (urlWindow !== null) {\n          result.urlWindow = urlWindow;\n        }\n        var count = this.getCount();\n        if (count !== null) {\n          result.count = count;\n        }\n        var badge = this.getBadge();\n        if (badge !== null) {\n          result.badge = badge;\n        }\n        var urlCount = this.getUrlCount();\n        if (urlCount !== null) {\n          result.urlCount = urlCount;\n        }\n        var urlBadge = this.getUrlBadge();\n        if (urlBadge !== null) {\n          result.urlBadge = urlBadge;\n        }\n        return result;\n      }\n    }]);\n  }(AbstractTab);\n\n  /**\r\n   *\r\n   */\n  var DropdownItem = /*#__PURE__*/function () {\n    /**\r\n     * @param {string} id\r\n     * @param {string} title\r\n     */\n    function DropdownItem(id, title) {\n      _classCallCheck(this, DropdownItem);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_title\", '');\n      _defineProperty(this, \"_url\", null);\n      _defineProperty(this, \"_urlContent\", null);\n      _defineProperty(this, \"_urlCount\", null);\n      _defineProperty(this, \"_urlWindow\", null);\n      _defineProperty(this, \"_count\", null);\n      _defineProperty(this, \"_disabled\", false);\n      _defineProperty(this, \"_active\", false);\n      if (id) {\n        this._id = id;\n      } else {\n        this._id = String(Math.abs(Math.floor(Math.random() * 4294967295)));\n      }\n      this._title = title;\n    }\n\n    /**\r\n     * Set item ID\r\n     * @param {string} id\r\n     */\n    return _createClass(DropdownItem, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Get item ID\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set item title\r\n       * @param {string} title\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setTitle\",\n      value: function setTitle(title) {\n        this._title = title;\n        return this;\n      }\n\n      /**\r\n       * Get item title\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getTitle\",\n      value: function getTitle() {\n        return this._title;\n      }\n\n      /**\r\n       * Set item count\r\n       * @param {string|null} count\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setCount\",\n      value: function setCount() {\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._count = count;\n        return this;\n      }\n\n      /**\r\n       * Get item count\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getCount\",\n      value: function getCount() {\n        return this._count;\n      }\n\n      /**\r\n       * Set item URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrl\",\n      value: function setUrl() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._url = url;\n        return this;\n      }\n\n      /**\r\n       * Get item URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrl\",\n      value: function getUrl() {\n        return this._url;\n      }\n\n      /**\r\n       * Set content URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrlContent\",\n      value: function setUrlContent() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlContent = url;\n        return this;\n      }\n\n      /**\r\n       * Get content URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlContent\",\n      value: function getUrlContent() {\n        return this._urlContent;\n      }\n\n      /**\r\n       * Set count URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrlCount\",\n      value: function setUrlCount() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlCount = url;\n        return this;\n      }\n\n      /**\r\n       * Get count URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlCount\",\n      value: function getUrlCount() {\n        return this._urlCount;\n      }\n\n      /**\r\n       * Set window URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrlWindow\",\n      value: function setUrlWindow() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlWindow = url;\n        return this;\n      }\n\n      /**\r\n       * Get window URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlWindow\",\n      value: function getUrlWindow() {\n        return this._urlWindow;\n      }\n\n      /**\r\n       * Set disabled state\r\n       * @param {boolean} isDisabled\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setDisabled\",\n      value: function setDisabled() {\n        var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._disabled = isDisabled;\n        return this;\n      }\n\n      /**\r\n       * Set active state\r\n       * @param {boolean} isActive\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setActive\",\n      value: function setActive() {\n        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._active = isActive;\n        return this;\n      }\n\n      /**\r\n       * Check if item is active\r\n       * @return {boolean}\r\n       */\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        return this._active;\n      }\n\n      /**\r\n       * Convert item to plain object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = {\n          id: this.getId(),\n          type: 'tab',\n          title: this.getTitle(),\n          disabled: this._disabled,\n          active: this._active\n        };\n        var url = this.getUrl();\n        if (url !== null) {\n          result.url = url;\n        }\n        var count = this.getCount();\n        if (count !== null) {\n          result.count = count;\n        }\n        var urlContent = this.getUrlContent();\n        if (urlContent !== null) {\n          result.urlContent = urlContent;\n        }\n        var urlCount = this.getUrlCount();\n        if (urlCount !== null) {\n          result.urlCount = urlCount;\n        }\n        var urlWindow = this.getUrlWindow();\n        if (urlWindow !== null) {\n          result.urlWindow = urlWindow;\n        }\n        return result;\n      }\n    }]);\n  }();\n\n  function _callSuper(_this, derived, args) {\n    function isNativeReflectConstruct() {\n      if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n      if (Reflect.construct.sham) return false;\n      if (typeof Proxy === \"function\") return true;\n      try {\n        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (e) {\n        return false;\n      }\n    }\n    derived = _getPrototypeOf(derived);\n    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n  }\n  var HelperTabDropdown = /*#__PURE__*/function (_AbstractTab) {\n    /**\r\n     * @param {string} title\r\n     */\n    function HelperTabDropdown(title) {\n      var _this2;\n      _classCallCheck(this, HelperTabDropdown);\n      _this2 = _callSuper(this, HelperTabDropdown);\n      _defineProperty(_this2, \"_items\", []);\n      _this2.setTitle(title);\n      return _this2;\n    }\n\n    /**\r\n     * Add item to the dropdown list\r\n     * @param {string} title\r\n     * @param {string|null} id\r\n     * @return {DropdownItem}\r\n     */\n    _inherits(HelperTabDropdown, _AbstractTab);\n    return _createClass(HelperTabDropdown, [{\n      key: \"addItem\",\n      value: function addItem(title) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var item = new DropdownItem(id, title);\n        this._items.push(item);\n        return item;\n      }\n\n      /**\r\n       * Add divider to the dropdown\r\n       * @return {void}\r\n       */\n    }, {\n      key: \"addDivider\",\n      value: function addDivider() {\n        this._items.push({\n          type: 'divider'\n        });\n      }\n\n      /**\r\n       * Get dropdown items\r\n       * @return {Array}\r\n       */\n    }, {\n      key: \"getItems\",\n      value: function getItems() {\n        return this._items;\n      }\n\n      /**\r\n       * Установка активности для таба\r\n       * @param {string} tabId\r\n       */\n    }, {\n      key: \"setActiveItem\",\n      value: function setActiveItem(tabId) {\n        this._items.map(function (item) {\n          if (item.getId() === tabId) {\n            item.setActive(true);\n          }\n        });\n      }\n\n      /**\r\n       * Convert dropdown to object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = _get(_getPrototypeOf(HelperTabDropdown.prototype), \"toObject\", this).call(this);\n        result.type = 'dropdown';\n        result.items = this._items.map(function (item) {\n          return typeof item.toObject === 'function' ? item.toObject() : item;\n        });\n        return result;\n      }\n    }]);\n  }(AbstractTab);\n\n  /**\r\n   *\r\n   */\n  var HelperControlButton = /*#__PURE__*/function () {\n    /**\r\n     * @param {string}      content\r\n     * @param {string|null} id\r\n     */\n    function HelperControlButton(content) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      _classCallCheck(this, HelperControlButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      _defineProperty(this, \"_attr\", {\n        'class': \"btn btn-outline-secondary\"\n      });\n      this.setContent(content);\n      this.setId(id || String(Math.abs(Math.floor(Math.random() * 4294967295))));\n    }\n\n    /**\r\n     * Установка содержимого кнопки\r\n     * @param {string} content\r\n     * @return {HelperControlButton}\r\n     */\n    return _createClass(HelperControlButton, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка js функции выполняющейся при клике\r\n       * @param {function|string} onclick\r\n       * @return {HelperControlButton}\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение js функции выполняющейся при клике\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Установка ID контрола\r\n       * @param {string} id\r\n       * @return {HelperControlButton}\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'button',\n          content: this.getContent(),\n          onClick: this.getOnClick(),\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupButton = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор кнопки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupButton() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      _defineProperty(this, \"_attr\", {\n        'class': 'btn btn-secondary'\n      });\n      this.setId(id || Math.random().toString(36).substring(2, 11));\n    }\n\n    /**\r\n     * Установка содержимого кнопки\r\n     * @param {string} content - Текст кнопки\r\n     * @return {ButtonGroupButton} Возвращает текущий экземпляр для цепочки вызовов\r\n     */\n    return _createClass(ButtonGroupButton, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string} Текущий текст кнопки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка обработчика клика\r\n       * @param {string} onclick - JavaScript код для выполнения при клике\r\n       * @return {ButtonGroupButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение обработчика клика\r\n       * @return {string} Текущий обработчик клика\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Установка идентификатора кнопки\r\n       * @param {string} id - Новый идентификатор\r\n       * @return {ButtonGroupButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора кнопки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование кнопки в объект\r\n       * @return {Object} Объект с данными кнопки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'button',\n          content: this._content,\n          onClick: this._onclick,\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdownLink = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор ссылки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupDropdownLink() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupDropdownLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_link\", '');\n      if (id) {\n        this._id = id;\n      } else {\n        this._id = 'link-' + Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n      }\n    }\n\n    /**\r\n     * Установка идентификатора ссылки\r\n     * @param {string} id - Новый идентификатор\r\n     */\n    return _createClass(ButtonGroupDropdownLink, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Получение идентификатора ссылки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого ссылки\r\n       * @param {string} content - Текст ссылки\r\n       * @return {ButtonGroupDropdownLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого ссылки\r\n       * @return {string} Текущий текст ссылки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка URL ссылки\r\n       * @param {string} link - URL адрес\r\n       * @return {ButtonGroupDropdownLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setLink\",\n      value: function setLink(link) {\n        this._link = link;\n        return this;\n      }\n\n      /**\r\n       * Получение URL ссылки\r\n       * @return {string} Текущий URL\r\n       */\n    }, {\n      key: \"getLink\",\n      value: function getLink() {\n        return this._link;\n      }\n\n      /**\r\n       * Преобразование ссылки в объект\r\n       * @return {Object} Объект с данными ссылки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'link',\n          content: this._content,\n          link: this._link\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdownButton = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор кнопки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupDropdownButton() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupDropdownButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      this.setId(id || 'btn-' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5));\n    }\n\n    /**\r\n     * Установка идентификатора кнопки\r\n     * @param {string} id - Новый идентификатор\r\n     * @return {ButtonGroupDropdownButton} Возвращает текущий экземпляр для цепочки вызовов\r\n     */\n    return _createClass(ButtonGroupDropdownButton, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора кнопки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого кнопки\r\n       * @param {string} content - Текст кнопки\r\n       * @return {ButtonGroupDropdownButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string} Текущий текст кнопки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка обработчика клика\r\n       * @param {string} onclick - JavaScript код для выполнения при клике\r\n       * @return {ButtonGroupDropdownButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение обработчика клика\r\n       * @return {string} Текущий обработчик клика\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Преобразование кнопки в объект\r\n       * @return {Object} Объект с данными кнопки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'button',\n          content: this._content,\n          onClick: this._onclick\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdownDivider = /*#__PURE__*/function () {\n    function ButtonGroupDropdownDivider() {\n      _classCallCheck(this, ButtonGroupDropdownDivider);\n    }\n    return _createClass(ButtonGroupDropdownDivider, [{\n      key: \"toObject\",\n      value:\n      /**\r\n       * Преобразование разделителя в объект\r\n       * @return {Object} Объект с типом разделителя\r\n       */\n      function toObject() {\n        return {\n          type: 'divider'\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdown = /*#__PURE__*/function () {\n    /**\r\n     * @param {string|null} id\r\n     */\n    function ButtonGroupDropdown() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupDropdown);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_position\", ButtonGroupDropdown.POSITION_END);\n      _defineProperty(this, \"_items\", []);\n      _defineProperty(this, \"_itemIndex\", 1);\n      _defineProperty(this, \"_attr\", {\n        'class': 'btn btn-secondary'\n      });\n      this.setId(id || Math.random().toString(36).substring(2, 11));\n    }\n\n    /**\r\n     * Установка содержимого кнопки выпадающего меню\r\n     * @param {string} content\r\n     * @return {ButtonGroupDropdown}\r\n     */\n    return _createClass(ButtonGroupDropdown, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка позиции раскрытия меню\r\n       * @param {string} position\r\n       * @return {ButtonGroupDropdown}\r\n       */\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(position) {\n        this._position = position;\n        return this;\n      }\n\n      /**\r\n       * Получение позиции раскрытия меню\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getPosition\",\n      value: function getPosition() {\n        return this._position;\n      }\n\n      /**\r\n       * Установка идентификатора\r\n       * @param {string} id\r\n       * @return {ButtonGroupDropdown}\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Добавление ссылки в выпадающее меню\r\n       * @param {string} content\r\n       * @param {string} link\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupDropdownLink}\r\n       */\n    }, {\n      key: \"addItemLink\",\n      value: function addItemLink(content, link) {\n        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new ButtonGroupDropdownLink(id);\n        item.setContent(content);\n        item.setLink(link);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление кнопки в выпадающее меню\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupDropdownButton}\r\n       */\n    }, {\n      key: \"addItemButton\",\n      value: function addItemButton(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new ButtonGroupDropdownButton(id);\n        item.setContent(content);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление разделителя в меню\r\n       * @return {ButtonGroupDropdownDivider}\r\n       */\n    }, {\n      key: \"addItemDivider\",\n      value: function addItemDivider() {\n        var item = new ButtonGroupDropdownDivider();\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var items = this._items.map(function (item) {\n          return item.toObject();\n        });\n        return {\n          id: this._id,\n          type: 'dropdown',\n          content: this._content,\n          position: this._position,\n          attr: this._attr,\n          items: items\n        };\n      }\n    }]);\n  }();\n  _defineProperty(ButtonGroupDropdown, \"POSITION_START\", 'start');\n  _defineProperty(ButtonGroupDropdown, \"POSITION_END\", 'end');\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupLink = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор ссылки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupLink() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_link\", '');\n      _defineProperty(this, \"_attr\", {});\n      this.setId(id || Math.random().toString(36).substring(2, 9));\n    }\n\n    /**\r\n     * Установка идентификатора ссылки\r\n     * @param {string} id - Новый идентификатор\r\n     * @return {ButtonGroupLink} Возвращает текущий экземпляр для цепочки вызовов\r\n     */\n    return _createClass(ButtonGroupLink, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора ссылки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого ссылки\r\n       * @param {string} content - Текст ссылки\r\n       * @return {ButtonGroupLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого ссылки\r\n       * @return {string} Текущий текст ссылки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка URL ссылки\r\n       * @param {string} link - URL адрес\r\n       * @return {ButtonGroupLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setLink\",\n      value: function setLink(link) {\n        this._link = link;\n        return this;\n      }\n\n      /**\r\n       * Получение URL ссылки\r\n       * @return {string} Текущий URL\r\n       */\n    }, {\n      key: \"getLink\",\n      value: function getLink() {\n        return this._link;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование ссылки в объект\r\n       * @return {Object} Объект с данными ссылки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'link',\n          content: this._content,\n          link: this._link,\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var HelperControlButtonGroup = /*#__PURE__*/function () {\n    /**\r\n     * @param {string|null} id\r\n     */\n    function HelperControlButtonGroup() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, HelperControlButtonGroup);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_buttons\", []);\n      _defineProperty(this, \"_btnIndex\", 1);\n      _defineProperty(this, \"_attr\", {\n        'class': \"btn-group\"\n      });\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка ID контрола\r\n     * @param {string} id\r\n     */\n    return _createClass(HelperControlButtonGroup, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Добавление ссылки\r\n       * @param {string} content\r\n       * @param {string} link\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupLink}\r\n       */\n    }, {\n      key: \"addBtnLink\",\n      value: function addBtnLink(content, link) {\n        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!id) {\n          id = \"btn\".concat(this._btnIndex);\n        }\n        var item = new ButtonGroupLink(id);\n        item.setContent(content);\n        item.setLink(link);\n        this._buttons.push(item);\n        this._btnIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление кнопки\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupButton}\r\n       */\n    }, {\n      key: \"addBtnButton\",\n      value: function addBtnButton(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"btn\".concat(this._btnIndex);\n        }\n        var item = new ButtonGroupButton(id);\n        item.setContent(content);\n        this._buttons.push(item);\n        this._btnIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление выпадающего меню\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupDropdown}\r\n       */\n    }, {\n      key: \"addBtnDropdown\",\n      value: function addBtnDropdown(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"btn\".concat(this._btnIndex);\n        }\n        var item = new ButtonGroupDropdown(id);\n        item.setContent(content);\n        this._buttons.push(item);\n        this._btnIndex++;\n        return item;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var buttons = this._buttons.map(function (button) {\n          return button.toObject();\n        });\n        return {\n          id: this.getId(),\n          type: 'buttonGroup',\n          buttons: buttons,\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  var HelperControlCustom = /*#__PURE__*/function () {\n    /**\r\n     * @param {string}      content\r\n     * @param {string|null} id\r\n     */\n    function HelperControlCustom(content) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      _classCallCheck(this, HelperControlCustom);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      this.setContent(content);\n      this.setId(id || String(Math.floor(Math.random() * 4294967296)));\n    }\n\n    /**\r\n     * Set control ID\r\n     * @param {string} id\r\n     */\n    return _createClass(HelperControlCustom, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Get control ID\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set control content\r\n       * @param {string} content\r\n       * @return {HelperControlCustom} Returns self for method chaining\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Get control content\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Convert to plain object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'custom',\n          content: this.getContent()\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var DropdownLink = /*#__PURE__*/function () {\n    /**\r\n     * @param id\r\n     */\n    function DropdownLink() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, DropdownLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_link\", '');\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка ID контрола\r\n     * @param {string} id\r\n     * @return {DropdownLink}\r\n     */\n    return _createClass(DropdownLink, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого ссылки\r\n       * @param {string} content\r\n       * @return {DropdownLink}\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого ссылки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка ссылки\r\n       * @param {string} link\r\n       * @return {DropdownLink}\r\n       */\n    }, {\n      key: \"setLink\",\n      value: function setLink(link) {\n        this._link = link;\n        return this;\n      }\n\n      /**\r\n       * Получение ссылки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getLink\",\n      value: function getLink() {\n        return this._link;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'link',\n          content: this.getContent(),\n          link: this.getLink()\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var DropdownButton = /*#__PURE__*/function () {\n    /**\r\n      * @param id\r\n     */\n    function DropdownButton() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, DropdownButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка ID контрола\r\n     * @param {string} id\r\n     * @return {DropdownButton}\r\n     */\n    return _createClass(DropdownButton, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого кнопки\r\n       * @param {string} content\r\n       * @return {DropdownButton}\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка JavaScript-функции, выполняющейся при клике\r\n       * @param {string} onclick\r\n       * @return {DropdownButton}\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение JavaScript-функции, выполняющейся при клике\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'button',\n          content: this.getContent(),\n          onClick: this.getOnClick()\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var DropdownDivider = /*#__PURE__*/function () {\n    function DropdownDivider() {\n      _classCallCheck(this, DropdownDivider);\n    }\n    return _createClass(DropdownDivider, [{\n      key: \"toObject\",\n      value:\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n      function toObject() {\n        return {\n          type: 'divider'\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var HelperControlDropdown = /*#__PURE__*/function () {\n    /**\r\n     @param {string}      content\r\n     @param {string|null} id\r\n     */\n    function HelperControlDropdown(content) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      _classCallCheck(this, HelperControlDropdown);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_position\", 'end');\n      _defineProperty(this, \"_items\", []);\n      _defineProperty(this, \"_itemIndex\", 1);\n      _defineProperty(this, \"_attr\", {\n        'class': \"btn btn-secondary\"\n      });\n      this.setContent(content);\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка содержимого кнопки\r\n     * @param {string} content\r\n     * @return {HelperControlDropdown}\r\n     */\n    return _createClass(HelperControlDropdown, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка позиции раскрывающегося списка\r\n       * @param {string} position\r\n       * @return {HelperControlDropdown}\r\n       */\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(position) {\n        this._position = position;\n        return this;\n      }\n\n      /**\r\n       * Получение позиции раскрывающегося списка\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getPosition\",\n      value: function getPosition() {\n        return this._position;\n      }\n\n      /**\r\n       * Установка ID контрола\r\n       * @param {string} id\r\n       * @return {HelperControlDropdown}\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Добавление ссылки\r\n       * @param {string} content\r\n       * @param {string} link\r\n       * @param {string|null} id\r\n       * @return {DropdownLink}\r\n       */\n    }, {\n      key: \"addItemLink\",\n      value: function addItemLink(content, link) {\n        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new DropdownLink(id);\n        item.setContent(content);\n        item.setLink(link);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление кнопки\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {DropdownButton}\r\n       */\n    }, {\n      key: \"addItemButton\",\n      value: function addItemButton(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new DropdownButton(id);\n        item.setContent(content);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление разделителя\r\n       * @return {DropdownDivider}\r\n       */\n    }, {\n      key: \"addItemDivider\",\n      value: function addItemDivider() {\n        var item = new DropdownDivider();\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var items = this._items.map(function (item) {\n          return item.toObject();\n        });\n        return {\n          id: this.getId(),\n          type: 'dropdown',\n          content: this.getContent(),\n          position: this.getPosition(),\n          attr: this._attr,\n          items: items\n        };\n      }\n    }]);\n  }();\n  _defineProperty(HelperControlDropdown, \"POSITION_START\", 'start');\n  _defineProperty(HelperControlDropdown, \"POSITION_END\", 'end');\n\n  var HelperControlLink = /*#__PURE__*/function () {\n    /**\r\n     * @param {string}      content\r\n     * @param {string}      href\r\n     * @param {string|null} id\r\n     */\n    function HelperControlLink(content, href) {\n      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      _classCallCheck(this, HelperControlLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_href\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      _defineProperty(this, \"_attr\", {});\n      this.setContent(content);\n      this.setHref(href);\n      this.setId(id || String(Math.floor(Math.random() * 4294967296)));\n    }\n\n    /**\r\n     * Set link content\r\n     * @param {string} content\r\n     * @return {HelperControlLink}\r\n     */\n    return _createClass(HelperControlLink, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Get link content\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Set href URL\r\n       * @param {string} href\r\n       * @return {HelperControlLink}\r\n       */\n    }, {\n      key: \"setHref\",\n      value: function setHref(href) {\n        this._href = href;\n        return this;\n      }\n\n      /**\r\n       * Get href URL\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getHref\",\n      value: function getHref() {\n        return this._href;\n      }\n\n      /**\r\n       * Set onClick handler\r\n       * @param {function} onclick\r\n       * @return {HelperControlLink}\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Get onClick handler\r\n       * @return {function}\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Set control ID\r\n       * @param {string} id\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Get control ID\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Get attribute value\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Convert to plain object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'link',\n          content: this.getContent(),\n          href: this.getHref(),\n          onClick: this.getOnClick(),\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  var Panel = /*#__PURE__*/function () {\n    /**\r\n     *\r\n     * @param {object} options\r\n     */\n    function Panel(options) {\n      _classCallCheck(this, Panel);\n      _defineProperty(this, \"_options\", {\n        id: '',\n        lang: 'en',\n        langList: {},\n        title: null,\n        subtitle: null,\n        controls: [],\n        contentFit: null,\n        content: null,\n        contentUrl: null,\n        wrapperType: 'card',\n        tabs: {\n          type: 'tabs',\n          // pills, underline\n          position: 'top-left',\n          // top-center, top-right, left, right\n          width: 200,\n          fill: '',\n          // fill, justify\n          items: []\n        }\n      });\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_tabs\", []);\n      _defineProperty(this, \"_controls\", []);\n      _defineProperty(this, \"_events\", {});\n      _defineProperty(this, \"_controller\", null);\n      _defineProperty(this, \"controls\", {\n        button: function button(content) {\n          var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return new HelperControlButton(content, id);\n        },\n        buttonGroup: function buttonGroup() {\n          var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          return new HelperControlButtonGroup(id);\n        },\n        custom: function custom(content) {\n          var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return new HelperControlCustom(content, id);\n        },\n        dropdown: function dropdown(content) {\n          var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return new HelperControlDropdown(content, id);\n        },\n        link: function link(content, _link) {\n          var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          return new HelperControlLink(content, _link, id);\n        }\n      });\n      this._controller = Controller;\n      options = Utils.isObject(options) ? options : {};\n      this._options = $.extend(true, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    }\n\n    /**\r\n     * Инициализация событий\r\n     */\n    return _createClass(Panel, [{\n      key: \"initEvents\",\n      value: function initEvents() {\n        var that = this;\n        this.on('tab_click', function (prop) {\n          var options = prop.tab.getOptions();\n          var urlContent = options.hasOwnProperty('urlContent') && typeof options.urlContent == 'string' && options.urlContent ? options.urlContent : '#';\n          if (urlContent && urlContent !== '#') {\n            that.loadContent(urlContent);\n          }\n          var urlWindow = options.hasOwnProperty('urlWindow') && typeof options.urlWindow == 'string' && options.urlWindow ? options.urlWindow : null;\n          if (urlWindow) {\n            window.history.pushState({\n              path: urlWindow\n            }, '', urlWindow);\n          }\n          if (that._tabs.length > 0) {\n            Private.trigger(this, 'tab_active', that, [prop]);\n          }\n        });\n        Private.trigger(this, 'panel_show');\n        if (that._tabs.length > 0) {\n          Private.trigger(this, 'tab_active', that, [{\n            tab: that.getTabActive()\n          }]);\n        }\n        if (this._options.content !== null) {\n          Private.trigger(this, 'content_show');\n        }\n      }\n\n      /**\r\n       * Получение идентификатора\r\n       * @returns {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Получение опций\r\n       * @returns {object}\r\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\r\n       * Блокировка панели\r\n       * @param {string} text\r\n       */\n    }, {\n      key: \"lock\",\n      value: function lock(text) {\n        var container = Elements.getPanel(this.getId());\n        if (container[0] && !container.find('.coreui-panel-lock')[0]) {\n          var html = ejs.render(tpl['loader.html'], {\n            loading: typeof text === 'string' ? text : this.getLang().loading\n          });\n          container.prepend(html);\n        }\n      }\n\n      /**\r\n       * Разблокировка панели\r\n       */\n    }, {\n      key: \"unlock\",\n      value: function unlock() {\n        Elements.getLock(this.getId()).hide(50, function () {\n          $(this).remove();\n        });\n      }\n\n      /**\r\n       * Загрузка данных и установка их в панель\r\n       * @param {string}      url\r\n       * @param {string|null} urlWindow\r\n       */\n    }, {\n      key: \"loadContent\",\n      value: function loadContent(url, urlWindow) {\n        var that = this;\n        this.lock();\n        if (typeof urlWindow === 'string') {\n          window.history.pushState({\n            path: urlWindow\n          }, '', urlWindow);\n        }\n        $.ajax({\n          url: url,\n          method: 'get',\n          beforeSend: function beforeSend(xhr) {\n            Private.trigger(that, 'load_start', that, [{\n              xhr: xhr\n            }]);\n          },\n          success: function success(result) {\n            Private.trigger(that, 'load_success', that, [{\n              result: result\n            }]);\n            that.setContent(result);\n          },\n          error: function error(xhr, textStatus, errorThrown) {\n            Private.trigger(that, 'load_error', that, [{\n              xhr: xhr,\n              textStatus: textStatus,\n              errorThrown: errorThrown\n            }]);\n            that.setContent('');\n          },\n          complete: function complete(xhr, textStatus) {\n            that.unlock();\n            Private.trigger(that, 'load_end', that, [{\n              xhr: xhr,\n              textStatus: textStatus\n            }]);\n          }\n        });\n      }\n\n      /**\r\n       * Получение переводов текущего языка\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getLang\",\n      value: function getLang() {\n        return $.extend(true, {}, this._options.langList);\n      }\n\n      /**\r\n       * Установка заголовка\r\n       * @param {string} title\r\n       * @param {string} subtitle\r\n       */\n    }, {\n      key: \"setTitle\",\n      value: function setTitle(title, subtitle) {\n        this._options.title = title;\n        this._options.subtitle = subtitle;\n      }\n\n      /**\r\n       * Установка правила для отображения обертки в панели\r\n       * @param {string} wrapperType\r\n       */\n    }, {\n      key: \"setWrapperType\",\n      value: function setWrapperType(wrapperType) {\n        this._options.wrapperType = wrapperType;\n      }\n\n      /**\r\n       * Правило для отображения панели относительно ее содержимого\r\n       * @param {string} contentFit\r\n       */\n    }, {\n      key: \"setContentFit\",\n      value: function setContentFit(contentFit) {\n        this._options.contentFit = contentFit;\n      }\n\n      /**\r\n       * Установка вида табов\r\n       * @param {string} type\r\n       */\n    }, {\n      key: \"setTabType\",\n      value: function setTabType(type) {\n        this._options.tabs.type = type;\n      }\n\n      /**\r\n       * Установка состояния табов\r\n       * @param {string} fill\r\n       */\n    }, {\n      key: \"setTabFill\",\n      value: function setTabFill(fill) {\n        this._options.tabs.fill = fill;\n      }\n\n      /**\r\n       * Установка положения табов\r\n       * @param {string} position\r\n       */\n    }, {\n      key: \"setTabPosition\",\n      value: function setTabPosition(position) {\n        this._options.tabs.position = position;\n      }\n\n      /**\r\n       * Установка ширины табов\r\n       * @param {string} width\r\n       */\n    }, {\n      key: \"setTabsWidth\",\n      value: function setTabsWidth(width) {\n        this._options.tabs.width = width;\n      }\n\n      /**\r\n       * Установка ширины табов\r\n       * @param {string} tabId\r\n       */\n    }, {\n      key: \"setTabActive\",\n      value: function setTabActive(tabId) {\n        if (this._options.tabs && this._options.tabs.items && Array.isArray(this._options.tabs.items)) {\n          var isActive = false;\n          this._options.tabs.items.map(function (tab) {\n            if (isActive) {\n              return;\n            }\n            if (tab) {\n              if (tab.constructor) {\n                if (typeof tab.setActive === 'function') {\n                  if (tab.getId() === tabId) {\n                    tab.setActive(true);\n                    isActive = true;\n                  }\n                } else if (typeof tab.getItems === 'function') {\n                  tab.getItems().map(function (item) {\n                    if (item.getId() === tabId) {\n                      item.setActive(true);\n                      isActive = true;\n                    }\n                  });\n                }\n              } else if (Utils.isObject(tab)) {\n                if (tab._id === tabId) {\n                  tab.active = true;\n                  isActive = true;\n                }\n              }\n            }\n          });\n        }\n      }\n\n      /**\r\n       * Добавление таба\r\n       * @param {string} id\r\n       * @param {string} title\r\n       * @param {string} url\r\n       * @return {HelperTab}\r\n       */\n    }, {\n      key: \"addTab\",\n      value: function addTab(id, title, url) {\n        var tab = new HelperTab(id);\n        if (title) {\n          tab.setTitle(title);\n        }\n        if (url) {\n          tab.setUrl(url);\n        }\n        if (!this._options.tabs) {\n          this._options.tabs = {};\n        }\n        if (!this._options.tabs.items) {\n          this._options.tabs.items = [];\n        }\n        this._options.tabs.items.push(tab);\n        return tab;\n      }\n\n      /**\r\n       * Добавление таба\r\n       * @param {string} title\r\n       * @return HelperTabDropdown\r\n       */\n    }, {\n      key: \"addTabDropdown\",\n      value: function addTabDropdown(title) {\n        var dropdown = new HelperTabDropdown(title);\n        if (!this._options.tabs) {\n          this._options.tabs = {};\n        }\n        if (!this._options.tabs.items) {\n          this._options.tabs.items = [];\n        }\n        this._options.tabs.items.push(dropdown);\n        return dropdown;\n      }\n\n      /**\r\n       * Установка элементов управления\r\n       * @param {Array} controls\r\n       */\n    }, {\n      key: \"addControls\",\n      value: function addControls(controls) {\n        if (!Array.isArray(controls)) {\n          return;\n        }\n        if (!Array.isArray(this._options.controls)) {\n          this._options.controls = [];\n        }\n        var that = this;\n        controls.map(function (control) {\n          if (control && control.constructor) {\n            if (control.constructor.name && typeof control.toObject === 'function') {\n              that._options.controls.push(control.toObject());\n            }\n          } else if (Utils.isObject(control)) {\n            that._options.controls.push(control);\n          }\n        });\n      }\n\n      /**\r\n       * Получение объекта таба по id\r\n       * @param tabId\r\n       */\n    }, {\n      key: \"getTabById\",\n      value: function getTabById(tabId) {\n        var result = null;\n        this._tabs.map(function (tab) {\n          if (tab.hasOwnProperty('getId') && typeof tab.getId === 'function' && tab.getId() === tabId) {\n            result = tab;\n          }\n        });\n        return result;\n      }\n\n      /**\r\n       * Получение объекта активного таба\r\n       * @return {Object|null}\r\n       */\n    }, {\n      key: \"getTabActive\",\n      value: function getTabActive() {\n        var result = null;\n        this._tabs.map(function (tab) {\n          if (tab.isActive && typeof tab.isActive === 'function' && tab.isActive()) {\n            result = tab;\n          }\n        });\n        return result;\n      }\n\n      /**\r\n       * Получение объекта контрола по его id\r\n       * @param {string} id\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getControlById\",\n      value: function getControlById(id) {\n        var result = null;\n        this._controls.map(function (control) {\n          if (control.getId && typeof control.getId === 'function' && control.getId() === id) {\n            result = control;\n          }\n        });\n        return result;\n      }\n\n      /**\r\n       * Установка содержимого для контейнера\r\n       * @param {string} url\r\n       */\n    }, {\n      key: \"setContentUrl\",\n      value: function setContentUrl(url) {\n        this._options.contentUrl = url;\n      }\n\n      /**\r\n       * Размещение содержимого внутри панели\r\n       * @param {string|object|Array} content\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        var container = Elements.getContent(this.getId());\n        if (container[0]) {\n          var contents = Private.renderContents(this, content);\n          container.html('');\n          contents.map(function (content) {\n            container.append(content);\n          });\n          Private.trigger(this, 'content_show');\n        } else {\n          this._options.content = content;\n        }\n      }\n\n      /**\r\n       *\r\n       * @param element\r\n       * @returns {*}\r\n       */\n    }, {\n      key: \"render\",\n      value: function render(element) {\n        var that = this;\n        var tabsContent = null;\n        var tabsPosition = 'top-left';\n        var tabsWidth = '200px';\n        var fitContent = '';\n        var wrapperType = '';\n        if (!this._options.hasOwnProperty('lang')) {\n          this._options.lang = this._controller.getSetting('lang');\n        }\n        var langList = this._controller.lang.hasOwnProperty(this._options.lang) ? this._controller.lang[this._options.lang] : {};\n        this._options.langList = this._options.hasOwnProperty('langList') && Utils.isObject(this._options.langList) ? $.extend(true, {}, langList, this._options.langList) : langList;\n\n        // Инициализация контролов\n        if (this._options.hasOwnProperty('controls') && Array.isArray(this._options.controls) && this._options.controls.length > 0) {\n          Private.initControls(this, this._options.controls);\n        }\n\n        // Инициализация табов\n        if (this._options.hasOwnProperty('tabs') && Utils.isObject(this._options.tabs) && this._options.tabs.hasOwnProperty('items') && Array.isArray(this._options.tabs.items) && this._options.tabs.items.length > 0) {\n          Private.initTabs(this, this._options.tabs.items);\n        }\n        if (this._options.hasOwnProperty('tabs') && Utils.isObject(this._options.tabs) && this._options.tabs.hasOwnProperty('items') && Array.isArray(this._options.tabs.items) && this._options.tabs.items.length > 0) {\n          tabsContent = Private.renderTabs(this, this._options.tabs);\n          tabsPosition = this._options.tabs.hasOwnProperty('position') && typeof this._options.tabs.position === 'string' ? this._options.tabs.position : 'top-left';\n          if (this._options.tabs.hasOwnProperty('width') && ['string', 'number'].indexOf(_typeof(this._options.tabs.width)) && this._options.tabs.width) {\n            var unit = typeof this._options.tabs.width === 'number' ? 'px' : '';\n            tabsWidth = this._options.tabs.width + unit;\n          }\n        }\n        if (this._options.hasOwnProperty('contentFit') && typeof this._options.contentFit === 'string') {\n          switch (this._options.contentFit) {\n            case 'fit':\n              fitContent = ' coreui-panel__content-fit';\n              break;\n            case 'min':\n              fitContent = ' coreui-panel__content-min';\n              break;\n            case 'max':\n              fitContent = ' coreui-panel__content-max';\n              break;\n          }\n        }\n        if (this._options.hasOwnProperty('wrapperType') && typeof this._options.wrapperType === 'string') {\n          if (this._options.wrapperType === 'card') {\n            wrapperType = ' card shadow-sm';\n          }\n        }\n        var panelElement = $(ejs.render(tpl['container.html'], {\n          issetControls: !!this._controls.length,\n          id: this.getId(),\n          title: this._options.title,\n          subtitle: this._options.subtitle,\n          fit: fitContent,\n          wrapperType: wrapperType,\n          tabs: {\n            content: tabsContent,\n            position: tabsPosition,\n            width: tabsWidth\n          }\n        }));\n        this._controls.map(function (control) {\n          panelElement.find('.coreui-panel-controls').append(Private.renderControl(that, control));\n        });\n        if (this._options.contentUrl) {\n          this.on('panel_show', function (event) {\n            that.loadContent(this._options.contentUrl);\n          });\n        } else {\n          var renderContents = Private.renderContents(this, this._options.content);\n          renderContents.map(function (content) {\n            panelElement.find('.coreui-panel-content').append(content);\n          });\n        }\n        if (element === undefined) {\n          return panelElement;\n        }\n\n        // Dom element\n        var domElement = null;\n        if (typeof element === 'string') {\n          domElement = document.getElementById(element);\n        } else if (element instanceof HTMLElement) {\n          domElement = element;\n        }\n        if (domElement) {\n          $(domElement).html(panelElement);\n          this.initEvents();\n        }\n      }\n\n      /**\r\n       * Установка события которое будет выполняться при смене таба\r\n       * @param {function} callback\r\n       */\n    }, {\n      key: \"onTabActive\",\n      value: function onTabActive(callback) {\n        if (typeof callback === 'function') {\n          this.on('tab_active', callback);\n        }\n      }\n\n      /**\r\n       * Регистрация функции на событие\r\n       * @param eventName\r\n       * @param callback\r\n       * @param context\r\n       */\n    }, {\n      key: \"on\",\n      value: function on(eventName, callback, context) {\n        if (_typeof(this._events[eventName]) !== 'object') {\n          this._events[eventName] = [];\n        }\n        this._events[eventName].push({\n          context: context || this,\n          callback: callback,\n          singleExec: false\n        });\n      }\n\n      /**\r\n       * Регистрация функции на событие\r\n       * @param eventName\r\n       * @param callback\r\n       * @param context\r\n       */\n    }, {\n      key: \"one\",\n      value: function one(eventName, callback, context) {\n        if (_typeof(this._events[eventName]) !== 'object') {\n          this._events[eventName] = [];\n        }\n        this._events[eventName].push({\n          context: context || this,\n          callback: callback,\n          singleExec: true\n        });\n      }\n    }]);\n  }();\n\n  var Controller = {\n    lang: {},\n    controls: {},\n    _instances: {},\n    _settings: {\n      lang: 'en'\n    },\n    /**\r\n     * @param {object} options\r\n     * @returns {Panel}\r\n     */\n    create: function create(options) {\n      options = Utils.isObject(options) ? options : {};\n      var instance = new Panel(options);\n      var panelId = instance.getId();\n      this._instances[panelId] = instance;\n      return instance;\n    },\n    /**\r\n     * @param {string} id\r\n     * @returns {Panel|null}\r\n     */\n    get: function get(id) {\n      if (!this._instances.hasOwnProperty(id)) {\n        return null;\n      }\n      if (!$('#coreui-panel-' + id)[0]) {\n        delete this._instances[id];\n        return null;\n      }\n      return this._instances[id];\n    },\n    /**\r\n     * Установка настроек\r\n     * @param {object} settings\r\n     */\n    setSettings: function setSettings(settings) {\n      this._settings = $.extend(true, {}, this._settings, settings);\n    },\n    /**\r\n     * Получение значения настройки\r\n     * @param {string} name\r\n     */\n    getSetting: function getSetting(name) {\n      var value = null;\n      if (this._settings.hasOwnProperty(name)) {\n        value = this._settings[name];\n      }\n      return value;\n    }\n  };\n\n  var PanelControlLink = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'link',\n      href: null,\n      content: null,\n      onClick: null,\n      attr: null\n    },\n    /**\r\n     * Инициализация\r\n     * @param {object} panel\r\n     * @param {object}                options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {\n        var control = Elements.getControl(this._panel.getId(), this.getId());\n        $('a', control).click(function (event) {\n          var prop = {\n            event: event,\n            panel: that._panel\n          };\n          if (typeof that._options.onClick === 'function') {\n            return that._options.onClick(prop);\n          } else if (typeof that._options.onClick === 'string') {\n            return new Function(that._options.onClick)(prop);\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var attributes = [];\n      if (_typeof(this._options.attr) === 'object') {\n        for (var _i = 0, _Object$entries = Object.entries(this._options.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      }\n      return ejs.render(tpl['controls/link.html'], {\n        href: this._options.href,\n        content: this._options.content,\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n      });\n    }\n  };\n\n  var PanelControlButton = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'button',\n      content: null,\n      onClick: null,\n      attr: null\n    },\n    /**\r\n     * Инициализация\r\n     * @param {Panel}  panel\r\n     * @param {object} options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {\n        var control = Elements.getControl(this._panel.getId(), this.getId());\n        $('button', control).click(function (event) {\n          var prop = {\n            event: event,\n            panel: that._panel\n          };\n          if (typeof that._options.onClick === 'function') {\n            return that._options.onClick(prop);\n          } else if (typeof that._options.onClick === 'string') {\n            return new Function(that._options.onClick)(prop);\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var attributes = [];\n      if (Utils.isObject(this._options.attr)) {\n        for (var _i = 0, _Object$entries = Object.entries(this._options.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      }\n      return ejs.render(tpl['controls/button.html'], {\n        content: this._options.content,\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n      });\n    }\n  };\n\n  var PanelControlDropdown = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'dropdown',\n      content: null,\n      items: null,\n      attr: {\n        \"class\": 'btn btn-primary dropdown-toggle'\n      }\n    },\n    /**\r\n     * Инициализация\r\n     * @param {Panel}  panel\r\n     * @param {object} options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n      if (Array.isArray(this._options.items)) {\n        this._options.items.map(function (item) {\n          if (Utils.isObject(item) && typeof item.type === 'string') {\n            item.id = item.hasOwnProperty('id') && typeof item.id === 'string' && item.id ? item.id : Utils.hashCode();\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение параметров\r\n     * @returns {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      var options = this.getOptions();\n      if (Array.isArray(options.items)) {\n        options.items.map(function (item) {\n          if (Utils.isObject(item) && typeof item.type === 'string') {\n            if (item.type === 'button') {\n              if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {\n                var control = Elements.getControl(that._panel.getId(), that.getId());\n                $('button#btn-dropdown-' + item.id, control).click(function (event) {\n                  var prop = {\n                    event: event,\n                    panel: that._panel\n                  };\n                  if (typeof item.onClick === 'function') {\n                    return item.onClick(prop);\n                  } else if (typeof item.onClick === 'string') {\n                    return new Function(item.onClick)(prop);\n                  }\n                });\n              }\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      var items = [];\n      var attributes = [];\n      if (Array.isArray(options.items)) {\n        options.items.map(function (item) {\n          if (Utils.isObject(item) && typeof item.type === 'string') {\n            if (item.type === 'link') {\n              if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {\n                items.push({\n                  type: 'link',\n                  link: item.link,\n                  content: item.content\n                });\n              }\n            } else if (item.type === 'button') {\n              if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                items.push({\n                  type: 'button',\n                  id: item.id,\n                  content: item.content\n                });\n              }\n            } else if (item.type === 'divider') {\n              items.push({\n                type: 'divider'\n              });\n            }\n          }\n        });\n      }\n      if (Utils.isObject(options.attr)) {\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (options.attr.hasOwnProperty('id')) {\n          delete options.attr.id;\n        }\n        if (options.attr.hasOwnProperty('data-bs-toggle')) {\n          delete options.attr['data-bs-toggle'];\n        }\n        for (var _i = 0, _Object$entries = Object.entries(options.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      }\n      return ejs.render(tpl['controls/dropdown.html'], {\n        content: options.content,\n        position: options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'end',\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n        items: items\n      });\n    }\n  };\n\n  var PanelControlButtonGroup = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'buttonGroup',\n      content: null,\n      onClick: null,\n      attr: null\n    },\n    _link: {\n      attr: {\n        \"class\": 'btn btn-secondary'\n      }\n    },\n    _button: {\n      attr: {\n        \"class\": 'btn btn-secondary'\n      }\n    },\n    _dropdown: {\n      attr: {\n        \"class\": 'btn btn-secondary dropdown-toggle'\n      }\n    },\n    /**\r\n     * Инициализация\r\n     * @param {object} panel\r\n     * @param {object}                options\r\n     */\n    init: function init(panel, options) {\n      this._panel = panel;\n      this._options = $.extend({}, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n      if (Array.isArray(this._options.buttons)) {\n        this._options.buttons.map(function (button) {\n          if (Utils.isObject(button) && typeof button.type === 'string') {\n            button.id = Utils.hashCode();\n            if (button.type === 'dropdown' && Array.isArray(button.items)) {\n              $.each(button.items, function (key, item) {\n                if (Utils.isObject(item) && typeof item.type === 'string') {\n                  item.id = item.hasOwnProperty('id') && typeof item.id === 'string' && item.id ? item.id : Utils.hashCode();\n                }\n              });\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение параметров\r\n     * @returns {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      var options = this.getOptions();\n      if (Array.isArray(options.buttons)) {\n        var control = Elements.getControl(this._panel.getId(), this._id);\n        options.buttons.map(function (button) {\n          if (Utils.isObject(button) && typeof button.type === 'string') {\n            if (button.type === 'button') {\n              if (button.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {\n                $('button#btn-' + button.id, control).click(function (event) {\n                  var prop = {\n                    event: event,\n                    panel: that._panel\n                  };\n                  if (typeof button.onClick === 'function') {\n                    button.onClick(prop);\n                  } else if (typeof button.onClick === 'string') {\n                    new Function(button.onClick)(prop);\n                  }\n                });\n              }\n            } else if (button.type === 'dropdown' && Array.isArray(button.items)) {\n              button.items.map(function (item) {\n                if (Utils.isObject(item) && typeof item.type === 'string') {\n                  if (item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                    $('button#btn-dropdown-' + item.id, control).click(function (event) {\n                      var prop = {\n                        event: event,\n                        panel: that._panel\n                      };\n                      if (typeof item.onClick === 'function') {\n                        item.onClick(prop);\n                      } else if (typeof item.onClick === 'string') {\n                        new Function(item.onClick)(prop);\n                      }\n                    });\n                  }\n                }\n              });\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      var buttons = [];\n      var that = this;\n      if (Array.isArray(options.buttons)) {\n        options.buttons.map(function (button) {\n          if (Utils.isObject(button) && typeof button.type === 'string') {\n            if (button.type === 'link') {\n              if (button.hasOwnProperty('link') && button.hasOwnProperty('content') && typeof button.link === 'string' && typeof button.content === 'string') {\n                var attributes = [];\n                if (!Utils.isObject(button.attr)) {\n                  button.attr = {};\n                }\n                if (button.attr.hasOwnProperty('href')) {\n                  delete button.attr.href;\n                }\n                if (!button.attr.hasOwnProperty('class')) {\n                  button.attr[\"class\"] = that._link.attr[\"class\"];\n                }\n                $.each(button.attr, function (name, value) {\n                  attributes.push(name + '=\"' + value + '\"');\n                });\n                buttons.push({\n                  type: 'link',\n                  link: button.link,\n                  content: button.content,\n                  attr: attributes\n                });\n              }\n            } else if (button.type === 'button') {\n              if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && typeof button.content === 'string' && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {\n                var _attributes = [];\n                if (!Utils.isObject(button.attr)) {\n                  button.attr = {};\n                }\n                if (button.attr.hasOwnProperty('type')) {\n                  delete button.attr.type;\n                }\n                if (button.attr.hasOwnProperty('id')) {\n                  delete button.attr.id;\n                }\n                if (!button.attr.hasOwnProperty('class')) {\n                  button.attr[\"class\"] = that._button.attr[\"class\"];\n                }\n                for (var _i = 0, _Object$entries = Object.entries(button.attr); _i < _Object$entries.length; _i++) {\n                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                    name = _Object$entries$_i[0],\n                    value = _Object$entries$_i[1];\n                  _attributes.push(name + '=\"' + value + '\"');\n                }\n                buttons.push({\n                  type: 'button',\n                  link: button.link,\n                  id: button.id,\n                  content: button.content,\n                  attr: _attributes\n                });\n              }\n            } else if (button.type === 'dropdown') {\n              if (Array.isArray(button.items)) {\n                var _attributes2 = [];\n                var items = [];\n                button.items.map(function (item) {\n                  if (Utils.isObject(item) && typeof item.type === 'string') {\n                    if (item.type === 'link') {\n                      if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {\n                        items.push({\n                          type: 'link',\n                          link: item.link,\n                          content: item.content\n                        });\n                      }\n                    } else if (item.type === 'button') {\n                      if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                        items.push({\n                          type: 'button',\n                          id: item.id,\n                          content: item.content\n                        });\n                      }\n                    } else if (item.type === 'divider') {\n                      items.push({\n                        type: 'divider'\n                      });\n                    }\n                  }\n                });\n                if (!Utils.isObject(button.attr)) {\n                  button.attr = {};\n                }\n                if (button.attr.hasOwnProperty('type')) {\n                  delete button.attr.type;\n                }\n                if (button.attr.hasOwnProperty('id')) {\n                  delete button.attr.id;\n                }\n                if (!button.attr.hasOwnProperty('class')) {\n                  button.attr[\"class\"] = that.dropdown.attr[\"class\"];\n                }\n                for (var _i2 = 0, _Object$entries2 = Object.entries(button.attr); _i2 < _Object$entries2.length; _i2++) {\n                  var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                    _name = _Object$entries2$_i[0],\n                    _value = _Object$entries2$_i[1];\n                  _attributes2.push(_name + '=\"' + _value + '\"');\n                }\n                buttons.push({\n                  type: 'dropdown',\n                  content: button.content,\n                  position: button.hasOwnProperty('position') && typeof button.position === 'string' ? button.position : 'end',\n                  attr: _attributes2,\n                  items: items\n                });\n              }\n            }\n          }\n        });\n      }\n      return ejs.render(tpl['controls/button_group.html'], {\n        buttons: buttons\n      });\n    }\n  };\n\n  var PanelControlCustom = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'custom',\n      content: null\n    },\n    /**\r\n     * Инициализация\r\n     * @param {object} panel\r\n     * @param {object}                options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {},\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      if (typeof this._options.content === 'string') {\n        return this._options.content;\n      } else if (typeof this._options.content === 'function') {\n        return this._options.content();\n      }\n    }\n  };\n\n  var langEn = {\n    \"loading\": \"Loading...\"\n  };\n\n  var langRu = {\n    \"loading\": \"Загрузка...\"\n  };\n\n  Controller.controls.link = PanelControlLink;\n  Controller.controls.button = PanelControlButton;\n  Controller.controls.dropdown = PanelControlDropdown;\n  Controller.controls.buttonGroup = PanelControlButtonGroup;\n  Controller.controls.custom = PanelControlCustom;\n  Controller.lang.en = langEn;\n  Controller.lang.ru = langRu;\n\n  return Controller;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL2Vqcy9lanMubWluLmpzIiwic3JjL2pzL3V0aWxzLmpzIiwic3JjL2pzL3RwbC5qcyIsInNyYy9qcy9lbGVtZW50cy5qcyIsInNyYy9qcy9hYnN0cmFjdC90YWIuanMiLCJzcmMvanMvdGFicy90YWIuanMiLCJzcmMvanMvdGFicy9kcm9wZG93bi9pdGVtLmpzIiwic3JjL2pzL3RhYnMvZHJvcGRvd24vZGl2aWRlci5qcyIsInNyYy9qcy90YWJzL2Ryb3Bkb3duLmpzIiwic3JjL2pzL3ByaXZhdGUuanMiLCJzcmMvanMvaGVscGVycy90YWIuanMiLCJzcmMvanMvaGVscGVycy90YWJzL3RhYi5qcyIsInNyYy9qcy9oZWxwZXJzL3RhYnMvZHJvcGRvd24vaXRlbS5qcyIsInNyYy9qcy9oZWxwZXJzL3RhYnMvZHJvcGRvd24uanMiLCJzcmMvanMvaGVscGVycy9jb250cm9scy9idXR0b24uanMiLCJzcmMvanMvaGVscGVycy9jb250cm9scy9idXR0b25Hcm91cC9idXR0b24uanMiLCJzcmMvanMvaGVscGVycy9jb250cm9scy9idXR0b25Hcm91cC9kcm9wZG93bi9saW5rLmpzIiwic3JjL2pzL2hlbHBlcnMvY29udHJvbHMvYnV0dG9uR3JvdXAvZHJvcGRvd24vYnV0dG9uLmpzIiwic3JjL2pzL2hlbHBlcnMvY29udHJvbHMvYnV0dG9uR3JvdXAvZHJvcGRvd24vZGl2aWRlci5qcyIsInNyYy9qcy9oZWxwZXJzL2NvbnRyb2xzL2J1dHRvbkdyb3VwL2Ryb3Bkb3duLmpzIiwic3JjL2pzL2hlbHBlcnMvY29udHJvbHMvYnV0dG9uR3JvdXAvbGluay5qcyIsInNyYy9qcy9oZWxwZXJzL2NvbnRyb2xzL2J1dHRvbkdyb3VwLmpzIiwic3JjL2pzL2hlbHBlcnMvY29udHJvbHMvY3VzdG9tLmpzIiwic3JjL2pzL2hlbHBlcnMvY29udHJvbHMvZHJvcGRvd24vbGluay5qcyIsInNyYy9qcy9oZWxwZXJzL2NvbnRyb2xzL2Ryb3Bkb3duL2J1dHRvbi5qcyIsInNyYy9qcy9oZWxwZXJzL2NvbnRyb2xzL2Ryb3Bkb3duL2RpdmlkZXIuanMiLCJzcmMvanMvaGVscGVycy9jb250cm9scy9kcm9wZG93bi5qcyIsInNyYy9qcy9oZWxwZXJzL2NvbnRyb2xzL2xpbmsuanMiLCJzcmMvanMvcGFuZWwuanMiLCJzcmMvanMvY29udHJvbGxlci5qcyIsInNyYy9qcy9jb250cm9scy9saW5rLmpzIiwic3JjL2pzL2NvbnRyb2xzL2J1dHRvbi5qcyIsInNyYy9qcy9jb250cm9scy9kcm9wZG93bi5qcyIsInNyYy9qcy9jb250cm9scy9idXR0b25fZ3JvdXAuanMiLCJzcmMvanMvY29udHJvbHMvY3VzdG9tLmpzIiwic3JjL2pzL2xhbmcvZW4uanMiLCJzcmMvanMvbGFuZy9ydS5qcyIsInNyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmVqcz1mKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0oKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTt2YXIgcGF0aD1yZXF1aXJlKFwicGF0aFwiKTt2YXIgdXRpbHM9cmVxdWlyZShcIi4vdXRpbHNcIik7dmFyIHNjb3BlT3B0aW9uV2FybmVkPWZhbHNlO3ZhciBfVkVSU0lPTl9TVFJJTkc9cmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKS52ZXJzaW9uO3ZhciBfREVGQVVMVF9PUEVOX0RFTElNSVRFUj1cIjxcIjt2YXIgX0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSPVwiPlwiO3ZhciBfREVGQVVMVF9ERUxJTUlURVI9XCIlXCI7dmFyIF9ERUZBVUxUX0xPQ0FMU19OQU1FPVwibG9jYWxzXCI7dmFyIF9OQU1FPVwiZWpzXCI7dmFyIF9SRUdFWF9TVFJJTkc9XCIoPCUlfCUlPnw8JT18PCUtfDwlX3w8JSN8PCV8JT58LSU+fF8lPilcIjt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBPVtcImRlbGltaXRlclwiLFwic2NvcGVcIixcImNvbnRleHRcIixcImRlYnVnXCIsXCJjb21waWxlRGVidWdcIixcImNsaWVudFwiLFwiX3dpdGhcIixcInJtV2hpdGVzcGFjZVwiLFwic3RyaWN0XCIsXCJmaWxlbmFtZVwiLFwiYXN5bmNcIl07dmFyIF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTPV9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQS5jb25jYXQoXCJjYWNoZVwiKTt2YXIgX0JPTT0vXlxcdUZFRkYvO3ZhciBfSlNfSURFTlRJRklFUj0vXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvO2V4cG9ydHMuY2FjaGU9dXRpbHMuY2FjaGU7ZXhwb3J0cy5maWxlTG9hZGVyPWZzLnJlYWRGaWxlU3luYztleHBvcnRzLmxvY2Fsc05hbWU9X0RFRkFVTFRfTE9DQUxTX05BTUU7ZXhwb3J0cy5wcm9taXNlSW1wbD1uZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKS5Qcm9taXNlO2V4cG9ydHMucmVzb2x2ZUluY2x1ZGU9ZnVuY3Rpb24obmFtZSxmaWxlbmFtZSxpc0Rpcil7dmFyIGRpcm5hbWU9cGF0aC5kaXJuYW1lO3ZhciBleHRuYW1lPXBhdGguZXh0bmFtZTt2YXIgcmVzb2x2ZT1wYXRoLnJlc29sdmU7dmFyIGluY2x1ZGVQYXRoPXJlc29sdmUoaXNEaXI/ZmlsZW5hbWU6ZGlybmFtZShmaWxlbmFtZSksbmFtZSk7dmFyIGV4dD1leHRuYW1lKG5hbWUpO2lmKCFleHQpe2luY2x1ZGVQYXRoKz1cIi5lanNcIn1yZXR1cm4gaW5jbHVkZVBhdGh9O2Z1bmN0aW9uIHJlc29sdmVQYXRocyhuYW1lLHBhdGhzKXt2YXIgZmlsZVBhdGg7aWYocGF0aHMuc29tZShmdW5jdGlvbih2KXtmaWxlUGF0aD1leHBvcnRzLnJlc29sdmVJbmNsdWRlKG5hbWUsdix0cnVlKTtyZXR1cm4gZnMuZXhpc3RzU3luYyhmaWxlUGF0aCl9KSl7cmV0dXJuIGZpbGVQYXRofX1mdW5jdGlvbiBnZXRJbmNsdWRlUGF0aChwYXRoLG9wdGlvbnMpe3ZhciBpbmNsdWRlUGF0aDt2YXIgZmlsZVBhdGg7dmFyIHZpZXdzPW9wdGlvbnMudmlld3M7dmFyIG1hdGNoPS9eW0EtWmEtel0rOlxcXFx8XlxcLy8uZXhlYyhwYXRoKTtpZihtYXRjaCYmbWF0Y2gubGVuZ3RoKXtwYXRoPXBhdGgucmVwbGFjZSgvXlxcLyovLFwiXCIpO2lmKEFycmF5LmlzQXJyYXkob3B0aW9ucy5yb290KSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsb3B0aW9ucy5yb290KX1lbHNle2luY2x1ZGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCxvcHRpb25zLnJvb3R8fFwiL1wiLHRydWUpfX1lbHNle2lmKG9wdGlvbnMuZmlsZW5hbWUpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCxvcHRpb25zLmZpbGVuYW1lKTtpZihmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSl7aW5jbHVkZVBhdGg9ZmlsZVBhdGh9fWlmKCFpbmNsdWRlUGF0aCYmQXJyYXkuaXNBcnJheSh2aWV3cykpe2luY2x1ZGVQYXRoPXJlc29sdmVQYXRocyhwYXRoLHZpZXdzKX1pZighaW5jbHVkZVBhdGgmJnR5cGVvZiBvcHRpb25zLmluY2x1ZGVyIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoZSBpbmNsdWRlIGZpbGUgXCInK29wdGlvbnMuZXNjYXBlRnVuY3Rpb24ocGF0aCkrJ1wiJyl9fXJldHVybiBpbmNsdWRlUGF0aH1mdW5jdGlvbiBoYW5kbGVDYWNoZShvcHRpb25zLHRlbXBsYXRlKXt2YXIgZnVuYzt2YXIgZmlsZW5hbWU9b3B0aW9ucy5maWxlbmFtZTt2YXIgaGFzVGVtcGxhdGU9YXJndW1lbnRzLmxlbmd0aD4xO2lmKG9wdGlvbnMuY2FjaGUpe2lmKCFmaWxlbmFtZSl7dGhyb3cgbmV3IEVycm9yKFwiY2FjaGUgb3B0aW9uIHJlcXVpcmVzIGEgZmlsZW5hbWVcIil9ZnVuYz1leHBvcnRzLmNhY2hlLmdldChmaWxlbmFtZSk7aWYoZnVuYyl7cmV0dXJuIGZ1bmN9aWYoIWhhc1RlbXBsYXRlKXt0ZW1wbGF0ZT1maWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSxcIlwiKX19ZWxzZSBpZighaGFzVGVtcGxhdGUpe2lmKCFmaWxlbmFtZSl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJuYWwgRUpTIGVycm9yOiBubyBmaWxlIG5hbWUgb3IgdGVtcGxhdGUgXCIrXCJwcm92aWRlZFwiKX10ZW1wbGF0ZT1maWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSxcIlwiKX1mdW5jPWV4cG9ydHMuY29tcGlsZSh0ZW1wbGF0ZSxvcHRpb25zKTtpZihvcHRpb25zLmNhY2hlKXtleHBvcnRzLmNhY2hlLnNldChmaWxlbmFtZSxmdW5jKX1yZXR1cm4gZnVuY31mdW5jdGlvbiB0cnlIYW5kbGVDYWNoZShvcHRpb25zLGRhdGEsY2Ipe3ZhciByZXN1bHQ7aWYoIWNiKXtpZih0eXBlb2YgZXhwb3J0cy5wcm9taXNlSW1wbD09XCJmdW5jdGlvblwiKXtyZXR1cm4gbmV3IGV4cG9ydHMucHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3RyeXtyZXN1bHQ9aGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSk7cmVzb2x2ZShyZXN1bHQpfWNhdGNoKGVycil7cmVqZWN0KGVycil9fSl9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhIGNhbGxiYWNrIGZ1bmN0aW9uXCIpfX1lbHNle3RyeXtyZXN1bHQ9aGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSl9Y2F0Y2goZXJyKXtyZXR1cm4gY2IoZXJyKX1jYihudWxsLHJlc3VsdCl9fWZ1bmN0aW9uIGZpbGVMb2FkZXIoZmlsZVBhdGgpe3JldHVybiBleHBvcnRzLmZpbGVMb2FkZXIoZmlsZVBhdGgpfWZ1bmN0aW9uIGluY2x1ZGVGaWxlKHBhdGgsb3B0aW9ucyl7dmFyIG9wdHM9dXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLG9wdGlvbnMpO29wdHMuZmlsZW5hbWU9Z2V0SW5jbHVkZVBhdGgocGF0aCxvcHRzKTtpZih0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlcj09PVwiZnVuY3Rpb25cIil7dmFyIGluY2x1ZGVyUmVzdWx0PW9wdGlvbnMuaW5jbHVkZXIocGF0aCxvcHRzLmZpbGVuYW1lKTtpZihpbmNsdWRlclJlc3VsdCl7aWYoaW5jbHVkZXJSZXN1bHQuZmlsZW5hbWUpe29wdHMuZmlsZW5hbWU9aW5jbHVkZXJSZXN1bHQuZmlsZW5hbWV9aWYoaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpe3JldHVybiBoYW5kbGVDYWNoZShvcHRzLGluY2x1ZGVyUmVzdWx0LnRlbXBsYXRlKX19fXJldHVybiBoYW5kbGVDYWNoZShvcHRzKX1mdW5jdGlvbiByZXRocm93KGVycixzdHIsZmxubSxsaW5lbm8sZXNjKXt2YXIgbGluZXM9c3RyLnNwbGl0KFwiXFxuXCIpO3ZhciBzdGFydD1NYXRoLm1heChsaW5lbm8tMywwKTt2YXIgZW5kPU1hdGgubWluKGxpbmVzLmxlbmd0aCxsaW5lbm8rMyk7dmFyIGZpbGVuYW1lPWVzYyhmbG5tKTt2YXIgY29udGV4dD1saW5lcy5zbGljZShzdGFydCxlbmQpLm1hcChmdW5jdGlvbihsaW5lLGkpe3ZhciBjdXJyPWkrc3RhcnQrMTtyZXR1cm4oY3Vycj09bGluZW5vP1wiID4+IFwiOlwiICAgIFwiKStjdXJyK1wifCBcIitsaW5lfSkuam9pbihcIlxcblwiKTtlcnIucGF0aD1maWxlbmFtZTtlcnIubWVzc2FnZT0oZmlsZW5hbWV8fFwiZWpzXCIpK1wiOlwiK2xpbmVubytcIlxcblwiK2NvbnRleHQrXCJcXG5cXG5cIitlcnIubWVzc2FnZTt0aHJvdyBlcnJ9ZnVuY3Rpb24gc3RyaXBTZW1pKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC87KFxccyokKS8sXCIkMVwiKX1leHBvcnRzLmNvbXBpbGU9ZnVuY3Rpb24gY29tcGlsZSh0ZW1wbGF0ZSxvcHRzKXt2YXIgdGVtcGw7aWYob3B0cyYmb3B0cy5zY29wZSl7aWYoIXNjb3BlT3B0aW9uV2FybmVkKXtjb25zb2xlLndhcm4oXCJgc2NvcGVgIG9wdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gRUpTIDNcIik7c2NvcGVPcHRpb25XYXJuZWQ9dHJ1ZX1pZighb3B0cy5jb250ZXh0KXtvcHRzLmNvbnRleHQ9b3B0cy5zY29wZX1kZWxldGUgb3B0cy5zY29wZX10ZW1wbD1uZXcgVGVtcGxhdGUodGVtcGxhdGUsb3B0cyk7cmV0dXJuIHRlbXBsLmNvbXBpbGUoKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24odGVtcGxhdGUsZCxvKXt2YXIgZGF0YT1kfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dmFyIG9wdHM9b3x8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO2lmKGFyZ3VtZW50cy5sZW5ndGg9PTIpe3V0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQSl9cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsdGVtcGxhdGUpKGRhdGEpfTtleHBvcnRzLnJlbmRlckZpbGU9ZnVuY3Rpb24oKXt2YXIgYXJncz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3ZhciBmaWxlbmFtZT1hcmdzLnNoaWZ0KCk7dmFyIGNiO3ZhciBvcHRzPXtmaWxlbmFtZTpmaWxlbmFtZX07dmFyIGRhdGE7dmFyIHZpZXdPcHRzO2lmKHR5cGVvZiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXT09XCJmdW5jdGlvblwiKXtjYj1hcmdzLnBvcCgpfWlmKGFyZ3MubGVuZ3RoKXtkYXRhPWFyZ3Muc2hpZnQoKTtpZihhcmdzLmxlbmd0aCl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyxhcmdzLnBvcCgpKX1lbHNle2lmKGRhdGEuc2V0dGluZ3Mpe2lmKGRhdGEuc2V0dGluZ3Mudmlld3Mpe29wdHMudmlld3M9ZGF0YS5zZXR0aW5ncy52aWV3c31pZihkYXRhLnNldHRpbmdzW1widmlldyBjYWNoZVwiXSl7b3B0cy5jYWNoZT10cnVlfXZpZXdPcHRzPWRhdGEuc2V0dGluZ3NbXCJ2aWV3IG9wdGlvbnNcIl07aWYodmlld09wdHMpe3V0aWxzLnNoYWxsb3dDb3B5KG9wdHMsdmlld09wdHMpfX11dGlscy5zaGFsbG93Q29weUZyb21MaXN0KG9wdHMsZGF0YSxfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyl9b3B0cy5maWxlbmFtZT1maWxlbmFtZX1lbHNle2RhdGE9dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpfXJldHVybiB0cnlIYW5kbGVDYWNoZShvcHRzLGRhdGEsY2IpfTtleHBvcnRzLlRlbXBsYXRlPVRlbXBsYXRlO2V4cG9ydHMuY2xlYXJDYWNoZT1mdW5jdGlvbigpe2V4cG9ydHMuY2FjaGUucmVzZXQoKX07ZnVuY3Rpb24gVGVtcGxhdGUodGV4dCxvcHRzUGFyYW0pe3ZhciBvcHRzPXV0aWxzLmhhc093bk9ubHlPYmplY3Qob3B0c1BhcmFtKTt2YXIgb3B0aW9ucz11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dGhpcy50ZW1wbGF0ZVRleHQ9dGV4dDt0aGlzLm1vZGU9bnVsbDt0aGlzLnRydW5jYXRlPWZhbHNlO3RoaXMuY3VycmVudExpbmU9MTt0aGlzLnNvdXJjZT1cIlwiO29wdGlvbnMuY2xpZW50PW9wdHMuY2xpZW50fHxmYWxzZTtvcHRpb25zLmVzY2FwZUZ1bmN0aW9uPW9wdHMuZXNjYXBlfHxvcHRzLmVzY2FwZUZ1bmN0aW9ufHx1dGlscy5lc2NhcGVYTUw7b3B0aW9ucy5jb21waWxlRGVidWc9b3B0cy5jb21waWxlRGVidWchPT1mYWxzZTtvcHRpb25zLmRlYnVnPSEhb3B0cy5kZWJ1ZztvcHRpb25zLmZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7b3B0aW9ucy5vcGVuRGVsaW1pdGVyPW9wdHMub3BlbkRlbGltaXRlcnx8ZXhwb3J0cy5vcGVuRGVsaW1pdGVyfHxfREVGQVVMVF9PUEVOX0RFTElNSVRFUjtvcHRpb25zLmNsb3NlRGVsaW1pdGVyPW9wdHMuY2xvc2VEZWxpbWl0ZXJ8fGV4cG9ydHMuY2xvc2VEZWxpbWl0ZXJ8fF9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUjtvcHRpb25zLmRlbGltaXRlcj1vcHRzLmRlbGltaXRlcnx8ZXhwb3J0cy5kZWxpbWl0ZXJ8fF9ERUZBVUxUX0RFTElNSVRFUjtvcHRpb25zLnN0cmljdD1vcHRzLnN0cmljdHx8ZmFsc2U7b3B0aW9ucy5jb250ZXh0PW9wdHMuY29udGV4dDtvcHRpb25zLmNhY2hlPW9wdHMuY2FjaGV8fGZhbHNlO29wdGlvbnMucm1XaGl0ZXNwYWNlPW9wdHMucm1XaGl0ZXNwYWNlO29wdGlvbnMucm9vdD1vcHRzLnJvb3Q7b3B0aW9ucy5pbmNsdWRlcj1vcHRzLmluY2x1ZGVyO29wdGlvbnMub3V0cHV0RnVuY3Rpb25OYW1lPW9wdHMub3V0cHV0RnVuY3Rpb25OYW1lO29wdGlvbnMubG9jYWxzTmFtZT1vcHRzLmxvY2Fsc05hbWV8fGV4cG9ydHMubG9jYWxzTmFtZXx8X0RFRkFVTFRfTE9DQUxTX05BTUU7b3B0aW9ucy52aWV3cz1vcHRzLnZpZXdzO29wdGlvbnMuYXN5bmM9b3B0cy5hc3luYztvcHRpb25zLmRlc3RydWN0dXJlZExvY2Fscz1vcHRzLmRlc3RydWN0dXJlZExvY2FscztvcHRpb25zLmxlZ2FjeUluY2x1ZGU9dHlwZW9mIG9wdHMubGVnYWN5SW5jbHVkZSE9XCJ1bmRlZmluZWRcIj8hIW9wdHMubGVnYWN5SW5jbHVkZTp0cnVlO2lmKG9wdGlvbnMuc3RyaWN0KXtvcHRpb25zLl93aXRoPWZhbHNlfWVsc2V7b3B0aW9ucy5fd2l0aD10eXBlb2Ygb3B0cy5fd2l0aCE9XCJ1bmRlZmluZWRcIj9vcHRzLl93aXRoOnRydWV9dGhpcy5vcHRzPW9wdGlvbnM7dGhpcy5yZWdleD10aGlzLmNyZWF0ZVJlZ2V4KCl9VGVtcGxhdGUubW9kZXM9e0VWQUw6XCJldmFsXCIsRVNDQVBFRDpcImVzY2FwZWRcIixSQVc6XCJyYXdcIixDT01NRU5UOlwiY29tbWVudFwiLExJVEVSQUw6XCJsaXRlcmFsXCJ9O1RlbXBsYXRlLnByb3RvdHlwZT17Y3JlYXRlUmVnZXg6ZnVuY3Rpb24oKXt2YXIgc3RyPV9SRUdFWF9TVFJJTkc7dmFyIGRlbGltPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5kZWxpbWl0ZXIpO3ZhciBvcGVuPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5vcGVuRGVsaW1pdGVyKTt2YXIgY2xvc2U9dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyKTtzdHI9c3RyLnJlcGxhY2UoLyUvZyxkZWxpbSkucmVwbGFjZSgvPC9nLG9wZW4pLnJlcGxhY2UoLz4vZyxjbG9zZSk7cmV0dXJuIG5ldyBSZWdFeHAoc3RyKX0sY29tcGlsZTpmdW5jdGlvbigpe3ZhciBzcmM7dmFyIGZuO3ZhciBvcHRzPXRoaXMub3B0czt2YXIgcHJlcGVuZGVkPVwiXCI7dmFyIGFwcGVuZGVkPVwiXCI7dmFyIGVzY2FwZUZuPW9wdHMuZXNjYXBlRnVuY3Rpb247dmFyIGN0b3I7dmFyIHNhbml0aXplZEZpbGVuYW1lPW9wdHMuZmlsZW5hbWU/SlNPTi5zdHJpbmdpZnkob3B0cy5maWxlbmFtZSk6XCJ1bmRlZmluZWRcIjtpZighdGhpcy5zb3VyY2Upe3RoaXMuZ2VuZXJhdGVTb3VyY2UoKTtwcmVwZW5kZWQrPScgIHZhciBfX291dHB1dCA9IFwiXCI7XFxuJytcIiAgZnVuY3Rpb24gX19hcHBlbmQocykgeyBpZiAocyAhPT0gdW5kZWZpbmVkICYmIHMgIT09IG51bGwpIF9fb3V0cHV0ICs9IHMgfVxcblwiO2lmKG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKXtpZighX0pTX0lERU5USUZJRVIudGVzdChvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSkpe3Rocm93IG5ldyBFcnJvcihcIm91dHB1dEZ1bmN0aW9uTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1wcmVwZW5kZWQrPVwiICB2YXIgXCIrb3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUrXCIgPSBfX2FwcGVuZDtcIitcIlxcblwifWlmKG9wdHMubG9jYWxzTmFtZSYmIV9KU19JREVOVElGSUVSLnRlc3Qob3B0cy5sb2NhbHNOYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwibG9jYWxzTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1pZihvcHRzLmRlc3RydWN0dXJlZExvY2FscyYmb3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMubGVuZ3RoKXt2YXIgZGVzdHJ1Y3R1cmluZz1cIiAgdmFyIF9fbG9jYWxzID0gKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSksXFxuXCI7Zm9yKHZhciBpPTA7aTxvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGg7aSsrKXt2YXIgbmFtZT1vcHRzLmRlc3RydWN0dXJlZExvY2Fsc1tpXTtpZighX0pTX0lERU5USUZJRVIudGVzdChuYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwiZGVzdHJ1Y3R1cmVkTG9jYWxzW1wiK2krXCJdIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKGk+MCl7ZGVzdHJ1Y3R1cmluZys9XCIsXFxuICBcIn1kZXN0cnVjdHVyaW5nKz1uYW1lK1wiID0gX19sb2NhbHMuXCIrbmFtZX1wcmVwZW5kZWQrPWRlc3RydWN0dXJpbmcrXCI7XFxuXCJ9aWYob3B0cy5fd2l0aCE9PWZhbHNlKXtwcmVwZW5kZWQrPVwiICB3aXRoIChcIitvcHRzLmxvY2Fsc05hbWUrXCIgfHwge30pIHtcIitcIlxcblwiO2FwcGVuZGVkKz1cIiAgfVwiK1wiXFxuXCJ9YXBwZW5kZWQrPVwiICByZXR1cm4gX19vdXRwdXQ7XCIrXCJcXG5cIjt0aGlzLnNvdXJjZT1wcmVwZW5kZWQrdGhpcy5zb3VyY2UrYXBwZW5kZWR9aWYob3B0cy5jb21waWxlRGVidWcpe3NyYz1cInZhciBfX2xpbmUgPSAxXCIrXCJcXG5cIitcIiAgLCBfX2xpbmVzID0gXCIrSlNPTi5zdHJpbmdpZnkodGhpcy50ZW1wbGF0ZVRleHQpK1wiXFxuXCIrXCIgICwgX19maWxlbmFtZSA9IFwiK3Nhbml0aXplZEZpbGVuYW1lK1wiO1wiK1wiXFxuXCIrXCJ0cnkge1wiK1wiXFxuXCIrdGhpcy5zb3VyY2UrXCJ9IGNhdGNoIChlKSB7XCIrXCJcXG5cIitcIiAgcmV0aHJvdyhlLCBfX2xpbmVzLCBfX2ZpbGVuYW1lLCBfX2xpbmUsIGVzY2FwZUZuKTtcIitcIlxcblwiK1wifVwiK1wiXFxuXCJ9ZWxzZXtzcmM9dGhpcy5zb3VyY2V9aWYob3B0cy5jbGllbnQpe3NyYz1cImVzY2FwZUZuID0gZXNjYXBlRm4gfHwgXCIrZXNjYXBlRm4udG9TdHJpbmcoKStcIjtcIitcIlxcblwiK3NyYztpZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwicmV0aHJvdyA9IHJldGhyb3cgfHwgXCIrcmV0aHJvdy50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjfX1pZihvcHRzLnN0cmljdCl7c3JjPSdcInVzZSBzdHJpY3RcIjtcXG4nK3NyY31pZihvcHRzLmRlYnVnKXtjb25zb2xlLmxvZyhzcmMpfWlmKG9wdHMuY29tcGlsZURlYnVnJiZvcHRzLmZpbGVuYW1lKXtzcmM9c3JjK1wiXFxuXCIrXCIvLyMgc291cmNlVVJMPVwiK3Nhbml0aXplZEZpbGVuYW1lK1wiXFxuXCJ9dHJ5e2lmKG9wdHMuYXN5bmMpe3RyeXtjdG9yPW5ldyBGdW5jdGlvbihcInJldHVybiAoYXN5bmMgZnVuY3Rpb24oKXt9KS5jb25zdHJ1Y3RvcjtcIikoKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBhc3luYy9hd2FpdFwiKX1lbHNle3Rocm93IGV9fX1lbHNle2N0b3I9RnVuY3Rpb259Zm49bmV3IGN0b3Iob3B0cy5sb2NhbHNOYW1lK1wiLCBlc2NhcGVGbiwgaW5jbHVkZSwgcmV0aHJvd1wiLHNyYyl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKXtpZihvcHRzLmZpbGVuYW1lKXtlLm1lc3NhZ2UrPVwiIGluIFwiK29wdHMuZmlsZW5hbWV9ZS5tZXNzYWdlKz1cIiB3aGlsZSBjb21waWxpbmcgZWpzXFxuXFxuXCI7ZS5tZXNzYWdlKz1cIklmIHRoZSBhYm92ZSBlcnJvciBpcyBub3QgaGVscGZ1bCwgeW91IG1heSB3YW50IHRvIHRyeSBFSlMtTGludDpcXG5cIjtlLm1lc3NhZ2UrPVwiaHR0cHM6Ly9naXRodWIuY29tL1J5YW5aaW0vRUpTLUxpbnRcIjtpZighb3B0cy5hc3luYyl7ZS5tZXNzYWdlKz1cIlxcblwiO2UubWVzc2FnZSs9XCJPciwgaWYgeW91IG1lYW50IHRvIGNyZWF0ZSBhbiBhc3luYyBmdW5jdGlvbiwgcGFzcyBgYXN5bmM6IHRydWVgIGFzIGFuIG9wdGlvbi5cIn19dGhyb3cgZX12YXIgcmV0dXJuZWRGbj1vcHRzLmNsaWVudD9mbjpmdW5jdGlvbiBhbm9ueW1vdXMoZGF0YSl7dmFyIGluY2x1ZGU9ZnVuY3Rpb24ocGF0aCxpbmNsdWRlRGF0YSl7dmFyIGQ9dXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLGRhdGEpO2lmKGluY2x1ZGVEYXRhKXtkPXV0aWxzLnNoYWxsb3dDb3B5KGQsaW5jbHVkZURhdGEpfXJldHVybiBpbmNsdWRlRmlsZShwYXRoLG9wdHMpKGQpfTtyZXR1cm4gZm4uYXBwbHkob3B0cy5jb250ZXh0LFtkYXRhfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZXNjYXBlRm4saW5jbHVkZSxyZXRocm93XSl9O2lmKG9wdHMuZmlsZW5hbWUmJnR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk9PT1cImZ1bmN0aW9uXCIpe3ZhciBmaWxlbmFtZT1vcHRzLmZpbGVuYW1lO3ZhciBiYXNlbmFtZT1wYXRoLmJhc2VuYW1lKGZpbGVuYW1lLHBhdGguZXh0bmFtZShmaWxlbmFtZSkpO3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0dXJuZWRGbixcIm5hbWVcIix7dmFsdWU6YmFzZW5hbWUsd3JpdGFibGU6ZmFsc2UsZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZX0pfWNhdGNoKGUpe319cmV0dXJuIHJldHVybmVkRm59LGdlbmVyYXRlU291cmNlOmZ1bmN0aW9uKCl7dmFyIG9wdHM9dGhpcy5vcHRzO2lmKG9wdHMucm1XaGl0ZXNwYWNlKXt0aGlzLnRlbXBsYXRlVGV4dD10aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bXFxyXFxuXSsvZyxcIlxcblwiKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nbSxcIlwiKX10aGlzLnRlbXBsYXRlVGV4dD10aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bIFxcdF0qPCVfL2dtLFwiPCVfXCIpLnJlcGxhY2UoL18lPlsgXFx0XSovZ20sXCJfJT5cIik7dmFyIHNlbGY9dGhpczt2YXIgbWF0Y2hlcz10aGlzLnBhcnNlVGVtcGxhdGVUZXh0KCk7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7aWYobWF0Y2hlcyYmbWF0Y2hlcy5sZW5ndGgpe21hdGNoZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLGluZGV4KXt2YXIgY2xvc2luZztpZihsaW5lLmluZGV4T2YobytkKT09PTAmJmxpbmUuaW5kZXhPZihvK2QrZCkhPT0wKXtjbG9zaW5nPW1hdGNoZXNbaW5kZXgrMl07aWYoIShjbG9zaW5nPT1kK2N8fGNsb3Npbmc9PVwiLVwiK2QrY3x8Y2xvc2luZz09XCJfXCIrZCtjKSl7dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBtYXRjaGluZyBjbG9zZSB0YWcgZm9yIFwiJytsaW5lKydcIi4nKX19c2VsZi5zY2FuTGluZShsaW5lKX0pfX0scGFyc2VUZW1wbGF0ZVRleHQ6ZnVuY3Rpb24oKXt2YXIgc3RyPXRoaXMudGVtcGxhdGVUZXh0O3ZhciBwYXQ9dGhpcy5yZWdleDt2YXIgcmVzdWx0PXBhdC5leGVjKHN0cik7dmFyIGFycj1bXTt2YXIgZmlyc3RQb3M7d2hpbGUocmVzdWx0KXtmaXJzdFBvcz1yZXN1bHQuaW5kZXg7aWYoZmlyc3RQb3MhPT0wKXthcnIucHVzaChzdHIuc3Vic3RyaW5nKDAsZmlyc3RQb3MpKTtzdHI9c3RyLnNsaWNlKGZpcnN0UG9zKX1hcnIucHVzaChyZXN1bHRbMF0pO3N0cj1zdHIuc2xpY2UocmVzdWx0WzBdLmxlbmd0aCk7cmVzdWx0PXBhdC5leGVjKHN0cil9aWYoc3RyKXthcnIucHVzaChzdHIpfXJldHVybiBhcnJ9LF9hZGRPdXRwdXQ6ZnVuY3Rpb24obGluZSl7aWYodGhpcy50cnVuY2F0ZSl7bGluZT1saW5lLnJlcGxhY2UoL14oPzpcXHJcXG58XFxyfFxcbikvLFwiXCIpO3RoaXMudHJ1bmNhdGU9ZmFsc2V9aWYoIWxpbmUpe3JldHVybiBsaW5lfWxpbmU9bGluZS5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXFxuL2csXCJcXFxcblwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXFxyL2csXCJcXFxcclwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXCIvZywnXFxcXFwiJyk7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZSsnXCIpJytcIlxcblwifSxzY2FuTGluZTpmdW5jdGlvbihsaW5lKXt2YXIgc2VsZj10aGlzO3ZhciBkPXRoaXMub3B0cy5kZWxpbWl0ZXI7dmFyIG89dGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXI7dmFyIGM9dGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyO3ZhciBuZXdMaW5lQ291bnQ9MDtuZXdMaW5lQ291bnQ9bGluZS5zcGxpdChcIlxcblwiKS5sZW5ndGgtMTtzd2l0Y2gobGluZSl7Y2FzZSBvK2Q6Y2FzZSBvK2QrXCJfXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkVWQUw7YnJlYWs7Y2FzZSBvK2QrXCI9XCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ7YnJlYWs7Y2FzZSBvK2QrXCItXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLlJBVzticmVhaztjYXNlIG8rZCtcIiNcIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuQ09NTUVOVDticmVhaztjYXNlIG8rZCtkOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShvK2QrZCxvK2QpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2QrYzp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuTElURVJBTDt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lLnJlcGxhY2UoZCtkK2MsZCtjKSsnXCIpJytcIlxcblwiO2JyZWFrO2Nhc2UgZCtjOmNhc2VcIi1cIitkK2M6Y2FzZVwiX1wiK2QrYzppZih0aGlzLm1vZGU9PVRlbXBsYXRlLm1vZGVzLkxJVEVSQUwpe3RoaXMuX2FkZE91dHB1dChsaW5lKX10aGlzLm1vZGU9bnVsbDt0aGlzLnRydW5jYXRlPWxpbmUuaW5kZXhPZihcIi1cIik9PT0wfHxsaW5lLmluZGV4T2YoXCJfXCIpPT09MDticmVhaztkZWZhdWx0OmlmKHRoaXMubW9kZSl7c3dpdGNoKHRoaXMubW9kZSl7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOmNhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDpjYXNlIFRlbXBsYXRlLm1vZGVzLlJBVzppZihsaW5lLmxhc3RJbmRleE9mKFwiLy9cIik+bGluZS5sYXN0SW5kZXhPZihcIlxcblwiKSl7bGluZSs9XCJcXG5cIn19c3dpdGNoKHRoaXMubW9kZSl7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOnRoaXMuc291cmNlKz1cIiAgICA7IFwiK2xpbmUrXCJcXG5cIjticmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoZXNjYXBlRm4oXCIrc3RyaXBTZW1pKGxpbmUpK1wiKSlcIitcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuUkFXOnRoaXMuc291cmNlKz1cIiAgICA7IF9fYXBwZW5kKFwiK3N0cmlwU2VtaShsaW5lKStcIilcIitcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuQ09NTUVOVDpicmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkxJVEVSQUw6dGhpcy5fYWRkT3V0cHV0KGxpbmUpO2JyZWFrfX1lbHNle3RoaXMuX2FkZE91dHB1dChsaW5lKX19aWYoc2VsZi5vcHRzLmNvbXBpbGVEZWJ1ZyYmbmV3TGluZUNvdW50KXt0aGlzLmN1cnJlbnRMaW5lKz1uZXdMaW5lQ291bnQ7dGhpcy5zb3VyY2UrPVwiICAgIDsgX19saW5lID0gXCIrdGhpcy5jdXJyZW50TGluZStcIlxcblwifX19O2V4cG9ydHMuZXNjYXBlWE1MPXV0aWxzLmVzY2FwZVhNTDtleHBvcnRzLl9fZXhwcmVzcz1leHBvcnRzLnJlbmRlckZpbGU7ZXhwb3J0cy5WRVJTSU9OPV9WRVJTSU9OX1NUUklORztleHBvcnRzLm5hbWU9X05BTUU7aWYodHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIil7d2luZG93LmVqcz1leHBvcnRzfX0se1wiLi4vcGFja2FnZS5qc29uXCI6NixcIi4vdXRpbHNcIjoyLGZzOjMscGF0aDo0fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHJlZ0V4cENoYXJzPS9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZzt2YXIgaGFzT3duUHJvcGVydHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgaGFzT3duPWZ1bmN0aW9uKG9iaixrZXkpe3JldHVybiBoYXNPd25Qcm9wZXJ0eS5hcHBseShvYmosW2tleV0pfTtleHBvcnRzLmVzY2FwZVJlZ0V4cENoYXJzPWZ1bmN0aW9uKHN0cmluZyl7aWYoIXN0cmluZyl7cmV0dXJuXCJcIn1yZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZWdFeHBDaGFycyxcIlxcXFwkJlwiKX07dmFyIF9FTkNPREVfSFRNTF9SVUxFUz17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImIzM0O1wiLFwiJ1wiOlwiJiMzOTtcIn07dmFyIF9NQVRDSF9IVE1MPS9bJjw+J1wiXS9nO2Z1bmN0aW9uIGVuY29kZV9jaGFyKGMpe3JldHVybiBfRU5DT0RFX0hUTUxfUlVMRVNbY118fGN9dmFyIGVzY2FwZUZ1bmNTdHI9XCJ2YXIgX0VOQ09ERV9IVE1MX1JVTEVTID0ge1xcblwiKycgICAgICBcIiZcIjogXCImYW1wO1wiXFxuJysnICAgICwgXCI8XCI6IFwiJmx0O1wiXFxuJysnICAgICwgXCI+XCI6IFwiJmd0O1wiXFxuJysnICAgICwgXFwnXCJcXCc6IFwiJiMzNDtcIlxcbicrJyAgICAsIFwiXFwnXCI6IFwiJiMzOTtcIlxcbicrXCIgICAgfVxcblwiK1wiICAsIF9NQVRDSF9IVE1MID0gL1smPD4nXFxcIl0vZztcXG5cIitcImZ1bmN0aW9uIGVuY29kZV9jaGFyKGMpIHtcXG5cIitcIiAgcmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXSB8fCBjO1xcblwiK1wifTtcXG5cIjtleHBvcnRzLmVzY2FwZVhNTD1mdW5jdGlvbihtYXJrdXApe3JldHVybiBtYXJrdXA9PXVuZGVmaW5lZD9cIlwiOlN0cmluZyhtYXJrdXApLnJlcGxhY2UoX01BVENIX0hUTUwsZW5jb2RlX2NoYXIpfTtmdW5jdGlvbiBlc2NhcGVYTUxUb1N0cmluZygpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKStcIjtcXG5cIitlc2NhcGVGdW5jU3RyfXRyeXtpZih0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5PT09XCJmdW5jdGlvblwiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5lc2NhcGVYTUwsXCJ0b1N0cmluZ1wiLHt2YWx1ZTplc2NhcGVYTUxUb1N0cmluZ30pfWVsc2V7ZXhwb3J0cy5lc2NhcGVYTUwudG9TdHJpbmc9ZXNjYXBlWE1MVG9TdHJpbmd9fWNhdGNoKGVycil7Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHNldCBlc2NhcGVYTUwudG9TdHJpbmcgKGlzIHRoZSBGdW5jdGlvbiBwcm90b3R5cGUgZnJvemVuPylcIil9ZXhwb3J0cy5zaGFsbG93Q29weT1mdW5jdGlvbih0byxmcm9tKXtmcm9tPWZyb218fHt9O2lmKHRvIT09bnVsbCYmdG8hPT11bmRlZmluZWQpe2Zvcih2YXIgcCBpbiBmcm9tKXtpZighaGFzT3duKGZyb20scCkpe2NvbnRpbnVlfWlmKHA9PT1cIl9fcHJvdG9fX1wifHxwPT09XCJjb25zdHJ1Y3RvclwiKXtjb250aW51ZX10b1twXT1mcm9tW3BdfX1yZXR1cm4gdG99O2V4cG9ydHMuc2hhbGxvd0NvcHlGcm9tTGlzdD1mdW5jdGlvbih0byxmcm9tLGxpc3Qpe2xpc3Q9bGlzdHx8W107ZnJvbT1mcm9tfHx7fTtpZih0byE9PW51bGwmJnRvIT09dW5kZWZpbmVkKXtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKyl7dmFyIHA9bGlzdFtpXTtpZih0eXBlb2YgZnJvbVtwXSE9XCJ1bmRlZmluZWRcIil7aWYoIWhhc093bihmcm9tLHApKXtjb250aW51ZX1pZihwPT09XCJfX3Byb3RvX19cInx8cD09PVwiY29uc3RydWN0b3JcIil7Y29udGludWV9dG9bcF09ZnJvbVtwXX19fXJldHVybiB0b307ZXhwb3J0cy5jYWNoZT17X2RhdGE6e30sc2V0OmZ1bmN0aW9uKGtleSx2YWwpe3RoaXMuX2RhdGFba2V5XT12YWx9LGdldDpmdW5jdGlvbihrZXkpe3JldHVybiB0aGlzLl9kYXRhW2tleV19LHJlbW92ZTpmdW5jdGlvbihrZXkpe2RlbGV0ZSB0aGlzLl9kYXRhW2tleV19LHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT17fX19O2V4cG9ydHMuaHlwaGVuVG9DYW1lbD1mdW5jdGlvbihzdHIpe3JldHVybiBzdHIucmVwbGFjZSgvLVthLXpdL2csZnVuY3Rpb24obWF0Y2gpe3JldHVybiBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpfSl9O2V4cG9ydHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZT1mdW5jdGlvbigpe2lmKHR5cGVvZiBPYmplY3QuY3JlYXRlPT1cImZ1bmN0aW9uXCIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBPYmplY3QuY3JlYXRlKG51bGwpfX1pZighKHtfX3Byb3RvX186bnVsbH1pbnN0YW5jZW9mIE9iamVjdCkpe3JldHVybiBmdW5jdGlvbigpe3JldHVybntfX3Byb3RvX186bnVsbH19fXJldHVybiBmdW5jdGlvbigpe3JldHVybnt9fX0oKTtleHBvcnRzLmhhc093bk9ubHlPYmplY3Q9ZnVuY3Rpb24ob2JqKXt2YXIgbz1leHBvcnRzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtmb3IodmFyIHAgaW4gb2JqKXtpZihoYXNPd24ob2JqLHApKXtvW3BdPW9ialtwXX19cmV0dXJuIG99fSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7fSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKHByb2Nlc3Mpe2Z1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLGFsbG93QWJvdmVSb290KXt2YXIgdXA9MDtmb3IodmFyIGk9cGFydHMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBsYXN0PXBhcnRzW2ldO2lmKGxhc3Q9PT1cIi5cIil7cGFydHMuc3BsaWNlKGksMSl9ZWxzZSBpZihsYXN0PT09XCIuLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cCsrfWVsc2UgaWYodXApe3BhcnRzLnNwbGljZShpLDEpO3VwLS19fWlmKGFsbG93QWJvdmVSb290KXtmb3IoO3VwLS07dXApe3BhcnRzLnVuc2hpZnQoXCIuLlwiKX19cmV0dXJuIHBhcnRzfWV4cG9ydHMucmVzb2x2ZT1mdW5jdGlvbigpe3ZhciByZXNvbHZlZFBhdGg9XCJcIixyZXNvbHZlZEFic29sdXRlPWZhbHNlO2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLTE7aT49LTEmJiFyZXNvbHZlZEFic29sdXRlO2ktLSl7dmFyIHBhdGg9aT49MD9hcmd1bWVudHNbaV06cHJvY2Vzcy5jd2QoKTtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5nc1wiKX1lbHNlIGlmKCFwYXRoKXtjb250aW51ZX1yZXNvbHZlZFBhdGg9cGF0aCtcIi9cIityZXNvbHZlZFBhdGg7cmVzb2x2ZWRBYnNvbHV0ZT1wYXRoLmNoYXJBdCgwKT09PVwiL1wifXJlc29sdmVkUGF0aD1ub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbihcIi9cIik7cmV0dXJuKHJlc29sdmVkQWJzb2x1dGU/XCIvXCI6XCJcIikrcmVzb2x2ZWRQYXRofHxcIi5cIn07ZXhwb3J0cy5ub3JtYWxpemU9ZnVuY3Rpb24ocGF0aCl7dmFyIGlzQWJzb2x1dGU9ZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLHRyYWlsaW5nU2xhc2g9c3Vic3RyKHBhdGgsLTEpPT09XCIvXCI7cGF0aD1ub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdChcIi9cIiksZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksIWlzQWJzb2x1dGUpLmpvaW4oXCIvXCIpO2lmKCFwYXRoJiYhaXNBYnNvbHV0ZSl7cGF0aD1cIi5cIn1pZihwYXRoJiZ0cmFpbGluZ1NsYXNoKXtwYXRoKz1cIi9cIn1yZXR1cm4oaXNBYnNvbHV0ZT9cIi9cIjpcIlwiKStwYXRofTtleHBvcnRzLmlzQWJzb2x1dGU9ZnVuY3Rpb24ocGF0aCl7cmV0dXJuIHBhdGguY2hhckF0KDApPT09XCIvXCJ9O2V4cG9ydHMuam9pbj1mdW5jdGlvbigpe3ZhciBwYXRocz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocyxmdW5jdGlvbihwLGluZGV4KXtpZih0eXBlb2YgcCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5nc1wiKX1yZXR1cm4gcH0pLmpvaW4oXCIvXCIpKX07ZXhwb3J0cy5yZWxhdGl2ZT1mdW5jdGlvbihmcm9tLHRvKXtmcm9tPWV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7dG89ZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7ZnVuY3Rpb24gdHJpbShhcnIpe3ZhciBzdGFydD0wO2Zvcig7c3RhcnQ8YXJyLmxlbmd0aDtzdGFydCsrKXtpZihhcnJbc3RhcnRdIT09XCJcIilicmVha312YXIgZW5kPWFyci5sZW5ndGgtMTtmb3IoO2VuZD49MDtlbmQtLSl7aWYoYXJyW2VuZF0hPT1cIlwiKWJyZWFrfWlmKHN0YXJ0PmVuZClyZXR1cm5bXTtyZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LGVuZC1zdGFydCsxKX12YXIgZnJvbVBhcnRzPXRyaW0oZnJvbS5zcGxpdChcIi9cIikpO3ZhciB0b1BhcnRzPXRyaW0odG8uc3BsaXQoXCIvXCIpKTt2YXIgbGVuZ3RoPU1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsdG9QYXJ0cy5sZW5ndGgpO3ZhciBzYW1lUGFydHNMZW5ndGg9bGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7aWYoZnJvbVBhcnRzW2ldIT09dG9QYXJ0c1tpXSl7c2FtZVBhcnRzTGVuZ3RoPWk7YnJlYWt9fXZhciBvdXRwdXRQYXJ0cz1bXTtmb3IodmFyIGk9c2FtZVBhcnRzTGVuZ3RoO2k8ZnJvbVBhcnRzLmxlbmd0aDtpKyspe291dHB1dFBhcnRzLnB1c2goXCIuLlwiKX1vdXRwdXRQYXJ0cz1vdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtyZXR1cm4gb3V0cHV0UGFydHMuam9pbihcIi9cIil9O2V4cG9ydHMuc2VwPVwiL1wiO2V4cG9ydHMuZGVsaW1pdGVyPVwiOlwiO2V4cG9ydHMuZGlybmFtZT1mdW5jdGlvbihwYXRoKXtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpcGF0aD1wYXRoK1wiXCI7aWYocGF0aC5sZW5ndGg9PT0wKXJldHVyblwiLlwiO3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdCgwKTt2YXIgaGFzUm9vdD1jb2RlPT09NDc7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MTstLWkpe2NvZGU9cGF0aC5jaGFyQ29kZUF0KGkpO2lmKGNvZGU9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7ZW5kPWk7YnJlYWt9fWVsc2V7bWF0Y2hlZFNsYXNoPWZhbHNlfX1pZihlbmQ9PT0tMSlyZXR1cm4gaGFzUm9vdD9cIi9cIjpcIi5cIjtpZihoYXNSb290JiZlbmQ9PT0xKXtyZXR1cm5cIi9cIn1yZXR1cm4gcGF0aC5zbGljZSgwLGVuZCl9O2Z1bmN0aW9uIGJhc2VuYW1lKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjt2YXIgc3RhcnQ9MDt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTt2YXIgaTtmb3IoaT1wYXRoLmxlbmd0aC0xO2k+PTA7LS1pKXtpZihwYXRoLmNoYXJDb2RlQXQoaSk9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7c3RhcnQ9aSsxO2JyZWFrfX1lbHNlIGlmKGVuZD09PS0xKXttYXRjaGVkU2xhc2g9ZmFsc2U7ZW5kPWkrMX19aWYoZW5kPT09LTEpcmV0dXJuXCJcIjtyZXR1cm4gcGF0aC5zbGljZShzdGFydCxlbmQpfWV4cG9ydHMuYmFzZW5hbWU9ZnVuY3Rpb24ocGF0aCxleHQpe3ZhciBmPWJhc2VuYW1lKHBhdGgpO2lmKGV4dCYmZi5zdWJzdHIoLTEqZXh0Lmxlbmd0aCk9PT1leHQpe2Y9Zi5zdWJzdHIoMCxmLmxlbmd0aC1leHQubGVuZ3RoKX1yZXR1cm4gZn07ZXhwb3J0cy5leHRuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjt2YXIgc3RhcnREb3Q9LTE7dmFyIHN0YXJ0UGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBwcmVEb3RTdGF0ZT0wO2Zvcih2YXIgaT1wYXRoLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgY29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydFBhcnQ9aSsxO2JyZWFrfWNvbnRpbnVlfWlmKGVuZD09PS0xKXttYXRjaGVkU2xhc2g9ZmFsc2U7ZW5kPWkrMX1pZihjb2RlPT09NDYpe2lmKHN0YXJ0RG90PT09LTEpc3RhcnREb3Q9aTtlbHNlIGlmKHByZURvdFN0YXRlIT09MSlwcmVEb3RTdGF0ZT0xfWVsc2UgaWYoc3RhcnREb3QhPT0tMSl7cHJlRG90U3RhdGU9LTF9fWlmKHN0YXJ0RG90PT09LTF8fGVuZD09PS0xfHxwcmVEb3RTdGF0ZT09PTB8fHByZURvdFN0YXRlPT09MSYmc3RhcnREb3Q9PT1lbmQtMSYmc3RhcnREb3Q9PT1zdGFydFBhcnQrMSl7cmV0dXJuXCJcIn1yZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCxlbmQpfTtmdW5jdGlvbiBmaWx0ZXIoeHMsZil7aWYoeHMuZmlsdGVyKXJldHVybiB4cy5maWx0ZXIoZik7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPHhzLmxlbmd0aDtpKyspe2lmKGYoeHNbaV0saSx4cykpcmVzLnB1c2goeHNbaV0pfXJldHVybiByZXN9dmFyIHN1YnN0cj1cImFiXCIuc3Vic3RyKC0xKT09PVwiYlwiP2Z1bmN0aW9uKHN0cixzdGFydCxsZW4pe3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9OmZ1bmN0aW9uKHN0cixzdGFydCxsZW4pe2lmKHN0YXJ0PDApc3RhcnQ9c3RyLmxlbmd0aCtzdGFydDtyZXR1cm4gc3RyLnN1YnN0cihzdGFydCxsZW4pfX0pLmNhbGwodGhpcyxyZXF1aXJlKFwiX3Byb2Nlc3NcIikpfSx7X3Byb2Nlc3M6NX1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBwcm9jZXNzPW1vZHVsZS5leHBvcnRzPXt9O3ZhciBjYWNoZWRTZXRUaW1lb3V0O3ZhciBjYWNoZWRDbGVhclRpbWVvdXQ7ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dH1lbHNle2NhY2hlZFNldFRpbWVvdXQ9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtjYWNoZWRDbGVhclRpbWVvdXQ9Y2xlYXJUaW1lb3V0fWVsc2V7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChmdW4pe2lmKGNhY2hlZFNldFRpbWVvdXQ9PT1zZXRUaW1lb3V0KXtyZXR1cm4gc2V0VGltZW91dChmdW4sMCl9aWYoKGNhY2hlZFNldFRpbWVvdXQ9PT1kZWZhdWx0U2V0VGltb3V0fHwhY2FjaGVkU2V0VGltZW91dCkmJnNldFRpbWVvdXQpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChmdW4sMCl9dHJ5e3JldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGZ1biwwKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsZnVuLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcil7aWYoY2FjaGVkQ2xlYXJUaW1lb3V0PT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9aWYoKGNhY2hlZENsZWFyVGltZW91dD09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFjYWNoZWRDbGVhclRpbWVvdXQpJiZjbGVhclRpbWVvdXQpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpfXRyeXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcil9Y2F0Y2goZSl7dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLG1hcmtlcil9Y2F0Y2goZSl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsbWFya2VyKX19fXZhciBxdWV1ZT1bXTt2YXIgZHJhaW5pbmc9ZmFsc2U7dmFyIGN1cnJlbnRRdWV1ZTt2YXIgcXVldWVJbmRleD0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighZHJhaW5pbmd8fCFjdXJyZW50UXVldWUpe3JldHVybn1kcmFpbmluZz1mYWxzZTtpZihjdXJyZW50UXVldWUubGVuZ3RoKXtxdWV1ZT1jdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKX1lbHNle3F1ZXVlSW5kZXg9LTF9aWYocXVldWUubGVuZ3RoKXtkcmFpblF1ZXVlKCl9fWZ1bmN0aW9uIGRyYWluUXVldWUoKXtpZihkcmFpbmluZyl7cmV0dXJufXZhciB0aW1lb3V0PXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtkcmFpbmluZz10cnVlO3ZhciBsZW49cXVldWUubGVuZ3RoO3doaWxlKGxlbil7Y3VycmVudFF1ZXVlPXF1ZXVlO3F1ZXVlPVtdO3doaWxlKCsrcXVldWVJbmRleDxsZW4pe2lmKGN1cnJlbnRRdWV1ZSl7Y3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpfX1xdWV1ZUluZGV4PS0xO2xlbj1xdWV1ZS5sZW5ndGh9Y3VycmVudFF1ZXVlPW51bGw7ZHJhaW5pbmc9ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpfXByb2Nlc3MubmV4dFRpY2s9ZnVuY3Rpb24oZnVuKXt2YXIgYXJncz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe2FyZ3NbaS0xXT1hcmd1bWVudHNbaV19fXF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLGFyZ3MpKTtpZihxdWV1ZS5sZW5ndGg9PT0xJiYhZHJhaW5pbmcpe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSl9fTtmdW5jdGlvbiBJdGVtKGZ1bixhcnJheSl7dGhpcy5mdW49ZnVuO3RoaXMuYXJyYXk9YXJyYXl9SXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX07cHJvY2Vzcy50aXRsZT1cImJyb3dzZXJcIjtwcm9jZXNzLmJyb3dzZXI9dHJ1ZTtwcm9jZXNzLmVudj17fTtwcm9jZXNzLmFyZ3Y9W107cHJvY2Vzcy52ZXJzaW9uPVwiXCI7cHJvY2Vzcy52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXByb2Nlc3Mub249bm9vcDtwcm9jZXNzLmFkZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5vbmNlPW5vb3A7cHJvY2Vzcy5vZmY9bm9vcDtwcm9jZXNzLnJlbW92ZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDtwcm9jZXNzLmVtaXQ9bm9vcDtwcm9jZXNzLnByZXBlbmRMaXN0ZW5lcj1ub29wO3Byb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3Byb2Nlc3MubGlzdGVuZXJzPWZ1bmN0aW9uKG5hbWUpe3JldHVybltdfTtwcm9jZXNzLmJpbmRpbmc9ZnVuY3Rpb24obmFtZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3Byb2Nlc3MuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9O3Byb2Nlc3MuY2hkaXI9ZnVuY3Rpb24oZGlyKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3Byb2Nlc3MudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LHt9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz17bmFtZTpcImVqc1wiLGRlc2NyaXB0aW9uOlwiRW1iZWRkZWQgSmF2YVNjcmlwdCB0ZW1wbGF0ZXNcIixrZXl3b3JkczpbXCJ0ZW1wbGF0ZVwiLFwiZW5naW5lXCIsXCJlanNcIl0sdmVyc2lvbjpcIjMuMS45XCIsYXV0aG9yOlwiTWF0dGhldyBFZXJuaXNzZSA8bWRlQGZsZWVnaXgub3JnPiAoaHR0cDovL2ZsZWVnaXgub3JnKVwiLGxpY2Vuc2U6XCJBcGFjaGUtMi4wXCIsYmluOntlanM6XCIuL2Jpbi9jbGkuanNcIn0sbWFpbjpcIi4vbGliL2Vqcy5qc1wiLGpzZGVsaXZyOlwiZWpzLm1pbi5qc1wiLHVucGtnOlwiZWpzLm1pbi5qc1wiLHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJnaXQ6Ly9naXRodWIuY29tL21kZS9lanMuZ2l0XCJ9LGJ1Z3M6XCJodHRwczovL2dpdGh1Yi5jb20vbWRlL2Vqcy9pc3N1ZXNcIixob21lcGFnZTpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzXCIsZGVwZW5kZW5jaWVzOntqYWtlOlwiXjEwLjguNVwifSxkZXZEZXBlbmRlbmNpZXM6e2Jyb3dzZXJpZnk6XCJeMTYuNS4xXCIsZXNsaW50OlwiXjYuOC4wXCIsXCJnaXQtZGlyZWN0b3J5LWRlcGxveVwiOlwiXjEuNS4xXCIsanNkb2M6XCJeNC4wLjJcIixcImxydS1jYWNoZVwiOlwiXjQuMC4xXCIsbW9jaGE6XCJeMTAuMi4wXCIsXCJ1Z2xpZnktanNcIjpcIl4zLjMuMTZcIn0sZW5naW5lczp7bm9kZTpcIj49MC4xMC4wXCJ9LHNjcmlwdHM6e3Rlc3Q6XCJucHggamFrZSB0ZXN0XCJ9fX0se31dfSx7fSxbMV0pKDEpfSk7XG4iLCJcclxubGV0IFV0aWxzID0ge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQvtCy0LXRgNC60LAg0L3QsCDQvtCx0YrQtdC60YJcclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBpc09iamVjdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICEgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcclxuICAgICAgICAgICAgdmFsdWUgIT09IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGhhc2hDb2RlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmMzMigobmV3IERhdGUoKS5nZXRUaW1lKCkgKyBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpKS50b1N0cmluZygxNik7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBzdHJcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjcmMzMjogZnVuY3Rpb24gKHN0cikge1xyXG5cclxuICAgICAgICBmb3IgKHZhciBhLCBvID0gW10sIGMgPSAwOyBjIDwgMjU2OyBjKyspIHtcclxuICAgICAgICAgICAgYSA9IGM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgODsgZisrKSB7XHJcbiAgICAgICAgICAgICAgICBhID0gMSAmIGEgPyAzOTg4MjkyMzg0IF4gYSA+Pj4gMSA6IGEgPj4+IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvW2NdID0gYVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgbiA9IC0xLCB0ID0gMDsgdCA8IHN0ci5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICBuID0gbiA+Pj4gOCBeIG9bMjU1ICYgKG4gXiBzdHIuY2hhckNvZGVBdCh0KSldXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKC0xIF4gbikgPj4+IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFV0aWxzOyIsImxldCB0cGwgPSBPYmplY3QuY3JlYXRlKG51bGwpXG50cGxbJ2JhZGdlLmh0bWwnXSA9ICc8c3BhbiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLWJhZGdlIHBvc2l0aW9uLWFic29sdXRlIHRvcC0wIHRyYW5zbGF0ZS1taWRkbGUgei0xIGJhZGdlPCU9IGJhZGdlLmNsYXNzZXMgJT5cIjwlLSBiYWRnZS5hdHRyICU+PiA8JT0gYmFkZ2UudGV4dCAlPiA8L3NwYW4+J1xudHBsWydjb250YWluZXIuaHRtbCddID0gJzxkaXYgY2xhc3M9XCJjb3JldWktcGFuZWwgdGV4dC1jZW50ZXIgbWItMzwlPSB3cmFwcGVyVHlwZSAlPjwlPSBmaXQgJT5cIiBpZD1cImNvcmV1aS1wYW5lbC08JT0gaWQgJT5cIj4gPGRpdiBjbGFzcz1cImNhcmQtYm9keSB0ZXh0LXN0YXJ0XCI+IDwlIGlmIChpc3NldENvbnRyb2xzKSB7ICU+IDxkaXYgY2xhc3M9XCJjb3JldWktcGFuZWwtY29udHJvbHMgcG9zaXRpb24tcmVsYXRpdmUgdG9wLTAgZW5kLTAgZmxvYXQtZW5kIGdhcC0xIGQtZmxleCBmbGV4LXdyYXAganVzdGlmeS1jb250ZW50LWVuZFwiPjwvZGl2PiA8JSB9ICU+IDwlIGlmICh0aXRsZSkgeyAlPiA8aDQgY2xhc3M9XCJjYXJkLXRpdGxlPCUgaWYgKCAhIHN1YnRpdGxlKSB7ICU+IG1iLTQ8JSB9ICU+XCI+IDwlLSB0aXRsZSAlPiA8L2g0PiA8JSB9ICU+IDwlIGlmIChzdWJ0aXRsZSkgeyAlPiA8cCBjbGFzcz1cImNvcmV1aS1wYW5lbC1zdWJ0aXRsZSB0ZXh0LWJvZHktc2Vjb25kYXJ5XCI+PCUtIHN1YnRpdGxlICU+PC9wPiA8JSB9ICU+IDwlIGlmICh0YWJzLmNvbnRlbnQpIHsgJT4gPCUgaWYgKFtcXCd0b3AtbGVmdFxcJywgXFwndG9wLWNlbnRlclxcJywgXFwndG9wLXJpZ2h0XFwnXS5pbmRleE9mKHRhYnMucG9zaXRpb24pID49IDApIHsgJT4gPCUtIHRhYnMuY29udGVudCAlPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXBhbmVsLWNvbnRlbnQgY2FyZC1jb250ZW50XCI+PC9kaXY+IDwlIH0gZWxzZSBpZiAodGFicy5wb3NpdGlvbiA9PT0gXFwnbGVmdFxcJykgeyAlPiA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+IDxkaXYgY2xhc3M9XCJtZS0zXCIgc3R5bGU9XCJ3aWR0aDogPCU9IHRhYnMud2lkdGggJT5cIj48JS0gdGFicy5jb250ZW50ICU+PC9kaXY+IDxkaXYgY2xhc3M9XCJjb3JldWktcGFuZWwtY29udGVudCBjYXJkLWNvbnRlbnQgZmxleC1ncm93LTFcIj48L2Rpdj4gPC9kaXY+IDwlIH0gZWxzZSBpZiAodGFicy5wb3NpdGlvbiA9PT0gXFwncmlnaHRcXCcpIHsgJT4gPGRpdiBjbGFzcz1cImQtZmxleFwiPiA8ZGl2IGNsYXNzPVwiY29yZXVpLXBhbmVsLWNvbnRlbnQgY2FyZC1jb250ZW50IGZsZXgtZ3Jvdy0xIHBlLTNcIj48L2Rpdj4gPGRpdiBzdHlsZT1cIndpZHRoOiA8JT0gdGFicy53aWR0aCAlPlwiPjwlLSB0YWJzLmNvbnRlbnQgJT48L2Rpdj4gPC9kaXY+IDwlIH0gJT4gPCUgfSBlbHNlIHsgJT4gPGRpdiBjbGFzcz1cImNvcmV1aS1wYW5lbC1jb250ZW50IGNhcmQtY29udGVudFwiPjwvZGl2PiA8JSB9ICU+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ2xvYWRlci5odG1sJ10gPSAnPGRpdiBjbGFzcz1cImNvcmV1aS1wYW5lbC1sb2NrIHBvc2l0aW9uLWFic29sdXRlIHctMTAwIHRvcC0wIGJvdHRvbS0wXCI+IDxkaXYgY2xhc3M9XCJjb3JldWktcGFuZWwtYmxvY2sgYmctc2Vjb25kYXJ5LXN1YnRsZSBwb3NpdGlvbi1hYnNvbHV0ZSBvcGFjaXR5LTUwIHctMTAwIHRvcC0wIGJvdHRvbS0wXCI+PC9kaXY+IDxkaXYgY2xhc3M9XCJjb3JldWktcGFuZWwtbWVzc2FnZSBwb3NpdGlvbi1yZWxhdGl2ZSBkLWZsZXggYWxpZ24tY29udGVudC1jZW50ZXIganVzdGlmeS1jb250ZW50LXN0YXJ0IGdhcC0yIG10LTMgcHktMSBweC0yIG0tYXV0byBib3JkZXIgYm9yZGVyLXNlY29uZGFyeS1zdWJ0bGUgcm91bmRlZC0zIGJnLWJvZHktc2Vjb25kYXJ5XCI+IDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXNlY29uZGFyeSBhbGlnbi1zZWxmLWNlbnRlclwiPjwvZGl2PiA8c3BhbiBjbGFzcz1cImxoLWxnXCI+PCU9IGxvYWRpbmcgJT48L3NwYW4+IDwvZGl2PiA8L2Rpdj4nXG50cGxbJ3BhbmVsLWNvbnRyb2wuaHRtbCddID0gJzxkaXYgaWQ9XCJjb3JldWktcGFuZWwtY29udHJvbC08JT0gaWQgJT5cIiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fY29udHJvbFwiPjwvZGl2PidcbnRwbFsndGFicy5odG1sJ10gPSAnIDx1bCBjbGFzcz1cImNvcmV1aS1wYW5lbC10YWJzIG5hdiA8JSBpZiAodHlwZSkgeyAlPm5hdi08JT0gdHlwZSAlPjwlIH0gJT4gY2FyZC1ib2R5LXRhYnMgbWItMyA8JSBpZiAoY2xhc3NlcykgeyAlPjwlPSBjbGFzc2VzICU+PCUgfSAlPiA8JSBpZiAoZmlsbCkgeyAlPm5hdi08JT0gZmlsbCAlPjwlIH0gJT5cIj4gPCUgJC5lYWNoKHRhYnNDb250ZW50cywgZnVuY3Rpb24oa2V5LCB0YWJDb250ZW50KSB7ICU+IDwlLSB0YWJDb250ZW50ICU+IDwlIH0pICU+IDwvdWw+J1xudHBsWydjb250cm9scy9idXR0b24uaHRtbCddID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPCUtIGF0dHIgJT4+PCUtIGNvbnRlbnQgJT48L2J1dHRvbj4nXG50cGxbJ2NvbnRyb2xzL2J1dHRvbl9ncm91cC5odG1sJ10gPSAnIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPCUgJC5lYWNoKGJ1dHRvbnMsIGZ1bmN0aW9uKGtleSwgYnV0dG9uKSB7ICU+IDwlIGlmIChidXR0b24udHlwZSA9PT0gXFwnbGlua1xcJykgeyAlPiA8YSBocmVmPVwiPCU9IGJ1dHRvbi5saW5rICU+XCI8JS0gYnV0dG9uLmF0dHIgJT4+PCUtIGJ1dHRvbi5jb250ZW50ICU+PC9hPiA8JSB9IGVsc2UgaWYgKGJ1dHRvbi50eXBlID09PSBcXCdidXR0b25cXCcpIHsgJT4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tPCU9IGJ1dHRvbi5pZCAlPlwiPCUtIGJ1dHRvbi5hdHRyICU+PiA8JS0gYnV0dG9uLmNvbnRlbnQgJT4gPC9idXR0b24+IDwlIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09IFxcJ2Ryb3Bkb3duXFwnKSB7ICU+IDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPCUtIGJ1dHRvbi5hdHRyICU+PiA8JS0gYnV0dG9uLmNvbnRlbnQgJT4gPC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gYnV0dG9uLnBvc2l0aW9uICU+XCI+IDwlICQuZWFjaChidXR0b24uaXRlbXMsIGZ1bmN0aW9uKGtleSwgaXRlbSkgeyAlPiA8JSBpZiAoaXRlbS50eXBlID09PSBcXCdsaW5rXFwnKSB7ICU+IDxsaT48YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiPCU9IGl0ZW0ubGluayAlPlwiPjwlLSBpdGVtLmNvbnRlbnQgJT48L2E+PC9saT4gPCUgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFxcJ2J1dHRvblxcJykgeyAlPiA8bGk+IDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGlkPVwiYnRuLWRyb3Bkb3duLTwlPSBpdGVtLmlkICU+XCI+IDwlLSBpdGVtLmNvbnRlbnQgJT4gPC9idXR0b24+IDwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdkaXZpZGVyXFwnKSB7ICU+IDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9saT4gPCUgfSAlPiA8JSB9KSAlPiA8L3VsPiA8L2Rpdj4gPCUgfSAlPiA8JSB9KSAlPiA8L2Rpdj4nXG50cGxbJ2NvbnRyb2xzL2Ryb3Bkb3duLmh0bWwnXSA9ICcgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCI8JS0gYXR0ciAlPj4gPCUtIGNvbnRlbnQgJT4gPC9idXR0b24+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS08JT0gcG9zaXRpb24gJT5cIj4gPCUgaXRlbXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgJT4gPCUgaWYgKGl0ZW0udHlwZSA9PT0gXFwnbGlua1xcJykgeyAlPiA8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIjwlPSBpdGVtLmxpbmsgJT5cIj48JS0gaXRlbS5jb250ZW50ICU+PC9hPjwvbGk+IDwlIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBcXCdidXR0b25cXCcpIHsgJT4gPGxpPiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBpZD1cImJ0bi1kcm9wZG93bi08JT0gaXRlbS5pZCAlPlwiPiA8JS0gaXRlbS5jb250ZW50ICU+IDwvYnV0dG9uPiA8L2xpPiA8JSB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXFwnZGl2aWRlclxcJykgeyAlPiA8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPjwvbGk+IDwlIH0gJT4gPCUgfSkgJT4gPC91bD4gPC9kaXY+J1xudHBsWydjb250cm9scy9saW5rLmh0bWwnXSA9ICc8YSBocmVmPVwiPCUtIGhyZWYgJT5cIjwlLSBhdHRyICU+PjwlLSBjb250ZW50ICU+PC9hPidcbnRwbFsndGFicy90YWItZHJvcGRvd24tZGl2aWRlci5odG1sJ10gPSAnIDxsaT4gPGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiPiA8L2xpPidcbnRwbFsndGFicy90YWItZHJvcGRvd24taXRlbS5odG1sJ10gPSAnIDxsaSBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLWl0ZW0tPCU9IGl0ZW0uaWQgJT5cIj4gPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtIHBvc2l0aW9uLXJlbGF0aXZlPCUgaWYgKGl0ZW0uYWN0aXZlKSB7ICU+IGFjdGl2ZTwlIH0gJT48JSBpZiAoaXRlbS5kaXNhYmxlZCkgeyAlPiBkaXNhYmxlZDwlIH0gJT5cIiBocmVmPVwiPCUgaWYgKGl0ZW0udXJsKSB7ICU+PCU9IGl0ZW0udXJsICU+PCUgfSBlbHNlIHsgJT4jPCUgfSAlPlwiIGRhdGEtYnMtdG9nZ2xlPVwidGFiXCIgZGF0YS10YWItaWQ9XCI8JT0gaXRlbS5pZCAlPlwiPiA8c3BhbiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLWl0ZW0tdGl0bGVcIj48JT0gaXRlbS50aXRsZSAlPjwvc3Bhbj4gPCUgaWYgKGl0ZW0uY291bnQgIT09IG51bGwpIHsgJT4gPHNwYW4gY2xhc3M9XCJjb3JldWktcGFuZWxfX3RhYi1pdGVtLWNvdW50XCI+KDwlPSBpdGVtLmNvdW50ICU+KTwvc3Bhbj48JSB9ICU+IDwlLSBpdGVtLmJhZGdlICU+IDwvYT4gPC9saT4nXG50cGxbJ3RhYnMvdGFiLWRyb3Bkb3duLmh0bWwnXSA9ICcgPGxpIGNsYXNzPVwibmF2LWl0ZW0gY29yZXVpLXBhbmVsX190YWItPCU9IHRhYi5pZCAlPiBkcm9wZG93bjwlIGlmICh0YWIuYWN0aXZlKSB7ICU+IGFjdGl2ZTwlIH0gJT48JSBpZiAodGFiLmRpc2FibGVkKSB7ICU+IGRpc2FibGVkPCUgfSAlPlwiPiA8YSBjbGFzcz1cIm5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiBocmVmPVwiI1wiPiA8c3BhbiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLXRpdGxlXCI+PCU9IHRhYi50aXRsZSAlPjwvc3Bhbj4gPCUgaWYgKHRhYi5jb3VudCAhPT0gbnVsbCkgeyAlPiA8c3BhbiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLWNvdW50XCI+KDwlPSB0YWIuY291bnQgJT4pPC9zcGFuPjwlIH0gJT4gPCUtIHRhYi5iYWRnZSAlPiA8L2E+IDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj4gPCUgJC5lYWNoKHRhYi5pdGVtc0NvbnRlbnRzLCBmdW5jdGlvbihrZXksIGl0ZW1Db250ZW50KSB7ICU+IDwlLSBpdGVtQ29udGVudCAlPiA8JSB9KSAlPiA8L3VsPiA8L2xpPidcbnRwbFsndGFicy90YWIuaHRtbCddID0gJyA8bGkgY2xhc3M9XCJuYXYtaXRlbSBjb3JldWktcGFuZWxfX3RhYi08JT0gdGFiLmlkICU+XCI+IDxhIGNsYXNzPVwibmF2LWxpbmsgcG9zaXRpb24tcmVsYXRpdmU8JSBpZiAodGFiLmFjdGl2ZSkgeyAlPiBhY3RpdmU8JSB9ICU+PCUgaWYgKHRhYi5kaXNhYmxlZCkgeyAlPiBkaXNhYmxlZDwlIH0gJT5cIiBocmVmPVwiPCUgaWYgKHRhYi51cmwpIHsgJT48JT0gdGFiLnVybCAlPjwlIH0gZWxzZSB7ICU+IzwlIH0gJT5cIiBkYXRhLXRhYi1pZD1cIjwlPSB0YWIuaWQgJT5cIiBkYXRhLWJzLXRvZ2dsZT1cInRhYlwiPiA8c3BhbiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLXRpdGxlXCI+PCU9IHRhYi50aXRsZSAlPjwvc3Bhbj4gPCUgaWYgKHRhYi5jb3VudCAhPT0gbnVsbCkgeyAlPiA8c3BhbiBjbGFzcz1cImNvcmV1aS1wYW5lbF9fdGFiLWNvdW50XCI+KDwlPSB0YWIuY291bnQgJT4pPCUgfSAlPiA8JS0gdGFiLmJhZGdlICU+IDwvYT4gPC9saT4nO1xuZXhwb3J0IGRlZmF1bHQgdHBsOyIsIlxyXG5sZXQgRWxlbWVudHMgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQv9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0L/QsNC90LXQu9C4XHJcbiAgICAgKiBAcGFyYW0gcGFuZWxJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldFBhbmVsOiBmdW5jdGlvbiAocGFuZWxJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS1wYW5lbC0nICsgcGFuZWxJZCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0L3RgtC10LnQvdC10YDQsCDRgSDRgtCw0LHQvtCyXHJcbiAgICAgKiBAcGFyYW0gcGFuZWxJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYnNDb250YWluZXI6IGZ1bmN0aW9uIChwYW5lbElkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXBhbmVsLScgKyBwYW5lbElkICsgJyAuY29yZXVpLXBhbmVsLXRhYnMnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0gcGFuZWxJZFxyXG4gICAgICogQHBhcmFtIHRhYklkXHJcbiAgICAgKiBAcmV0dXJuIHsqfGpRdWVyeXxIVE1MRWxlbWVudH1cclxuICAgICAqL1xyXG4gICAgZ2V0VGFiQ29udGFpbmVyOiBmdW5jdGlvbiAocGFuZWxJZCwgdGFiSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktcGFuZWwtJyArIHBhbmVsSWQgKyAnIC5jb3JldWktcGFuZWxfX3RhYi0nICsgdGFiSWQpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YEg0LrQvtC70LjRh9C10YHRgtCy0L7QvCDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHBhbmVsSWRcclxuICAgICAqIEBwYXJhbSB0YWJJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYkNvdW50OiBmdW5jdGlvbiAocGFuZWxJZCwgdGFiSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktcGFuZWwtJyArIHBhbmVsSWQgKyAnIC5jb3JldWktcGFuZWxfX3RhYi0nICsgdGFiSWQgKyAnIC5jb3JldWktcGFuZWxfX3RhYi1jb3VudCcpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YEg0YLQtdC60YHRgtC+0Lwg0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSBwYW5lbElkXHJcbiAgICAgKiBAcGFyYW0gdGFiSWRcclxuICAgICAqIEByZXR1cm4geyp8alF1ZXJ5fEhUTUxFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBnZXRUYWJUaXRsZTogZnVuY3Rpb24gKHBhbmVsSWQsIHRhYklkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXBhbmVsLScgKyBwYW5lbElkICsgJyAuY29yZXVpLXBhbmVsX190YWItJyArIHRhYklkICsgJyAuY29yZXVpLXBhbmVsX190YWItdGl0bGUnKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC60L7QvdGC0LXQudC90LXRgNCwINGBINC80LXRgtC60L7QuSDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHBhbmVsSWRcclxuICAgICAqIEBwYXJhbSB0YWJJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYkJhZGdlOiBmdW5jdGlvbiAocGFuZWxJZCwgdGFiSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktcGFuZWwtJyArIHBhbmVsSWQgKyAnIC5jb3JldWktcGFuZWxfX3RhYi0nICsgdGFiSWQgKyAnIC5jb3JldWktcGFuZWxfX3RhYi1iYWRnZScpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSBwYW5lbElkXHJcbiAgICAgKiBAcGFyYW0gdGFiSWRcclxuICAgICAqIEByZXR1cm4geyp8alF1ZXJ5fEhUTUxFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBnZXRUYWJJdGVtQ29udGFpbmVyOiBmdW5jdGlvbiAocGFuZWxJZCwgdGFiSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktcGFuZWwtJyArIHBhbmVsSWQgKyAnIC5jb3JldWktcGFuZWxfX3RhYi1pdGVtLScgKyB0YWJJZCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0L3RgtC10LnQvdC10YDQsCDRgSDRgtC10LrRgdGC0L7QvCDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHBhbmVsSWRcclxuICAgICAqIEBwYXJhbSB0YWJJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYkl0ZW1UaXRsZTogZnVuY3Rpb24gKHBhbmVsSWQsIHRhYklkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXBhbmVsLScgKyBwYW5lbElkICsgJyAuY29yZXVpLXBhbmVsX190YWItJyArIHRhYklkICsgJyAuY29yZXVpLXBhbmVsX190YWItaXRlbS10aXRsZScpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LrQvtC90YLQtdC50L3QtdGA0LAg0YEg0LrQvtC70LjRh9C10YHRgtCy0L7QvCDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHBhbmVsSWRcclxuICAgICAqIEBwYXJhbSB0YWJJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYkl0ZW1Db3VudDogZnVuY3Rpb24gKHBhbmVsSWQsIHRhYklkKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAkKCcjY29yZXVpLXBhbmVsLScgKyBwYW5lbElkICsgJyAuY29yZXVpLXBhbmVsX190YWItJyArIHRhYklkICsgJyAuY29yZXVpLXBhbmVsX190YWItaXRlbS1jb3VudCcpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhbmVsSWRcclxuICAgICAqIEByZXR1cm4geyp8alF1ZXJ5fEhUTUxFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBnZXRDb250ZW50OiBmdW5jdGlvbiAocGFuZWxJZCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJCgnI2NvcmV1aS1wYW5lbC0nICsgcGFuZWxJZCArICcgLmNvcmV1aS1wYW5lbC1jb250ZW50Jyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFuZWxJZFxyXG4gICAgICogQHBhcmFtIGNvbnRyb2xJZFxyXG4gICAgICogQHJldHVybiB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRyb2w6IGZ1bmN0aW9uIChwYW5lbElkLCBjb250cm9sSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktcGFuZWwtJyArIHBhbmVsSWQgKyAnICNjb3JldWktcGFuZWwtY29udHJvbC0nICsgY29udHJvbElkKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INCx0LvQvtC60LjRgNC+0LLQutC4INC/0LDQvdC10LvQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhbmVsSWRcclxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgZ2V0TG9jazogZnVuY3Rpb24gKHBhbmVsSWQpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQoJyNjb3JldWktcGFuZWwtJyArIHBhbmVsSWQgKyAnID4gLmNvcmV1aS1wYW5lbC1sb2NrJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVsZW1lbnRzOyIsImltcG9ydCBVdGlscyAgICBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IEVsZW1lbnRzIGZyb20gXCIuLi9lbGVtZW50c1wiO1xyXG5pbXBvcnQgUHJpdmF0ZSAgZnJvbSBcIi4uL3ByaXZhdGVcIjtcclxuXHJcblxyXG5jbGFzcyBUYWJBYnN0cmFjdCB7XHJcblxyXG4gICAgX2lkID0gbnVsbDtcclxuICAgIF9wYW5lbCA9IG51bGw7XHJcblxyXG4gICAgX29wdGlvbnMgPSB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ3RhYicsXHJcbiAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgIHVybDogbnVsbCxcclxuICAgICAgICB1cmxDb3VudDogbnVsbCxcclxuICAgICAgICB1cmxCYWRnZTogbnVsbCxcclxuICAgICAgICBjb3VudDogbnVsbCxcclxuICAgICAgICBiYWRnZTogbnVsbCxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSB7UGFuZWx9ICBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhbmVsLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3BhbmVsICAgPSBwYW5lbDtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINGC0LDQsdCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0YLQuNC/0LAg0YLQsNCx0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMudHlwZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7Qv9GG0LjQuSDRgtCw0LHQsFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQvtCy0LXRgNC60LAg0LDQutGC0LjQstC10L0g0LvQuCDRgtCw0LFcclxuICAgICAqIEByZXR1cm4ge2ZhbHNlfVxyXG4gICAgICovXHJcbiAgICBpc0FjdGl2ZSgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdhY3RpdmUnKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5fb3B0aW9ucy5hY3RpdmUgPT0gJ2Jvb2xlYW4nICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYWN0aXZlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQvdCw0LfQstCw0L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcclxuICAgICAqL1xyXG4gICAgc2V0VGl0bGUodGl0bGUpIHtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHRpdGxlKSA8IDAgfHwgdGl0bGUudG9TdHJpbmcoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRhYlRpdGxlRWxlbWVudCA9IEVsZW1lbnRzLmdldFRhYlRpdGxlKHRoaXMuX3BhbmVsLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgdGFiVGl0bGVFbGVtZW50LnRleHQodGl0bGUpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQvNC10YLQutC4XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gYmFkZ2VcclxuICAgICAqL1xyXG4gICAgc2V0QmFkZ2UoYmFkZ2UpIHtcclxuXHJcbiAgICAgICAgbGV0IGJhZGdlUmVuZGVyICAgICA9IFByaXZhdGUucmVuZGVyQmFkZ2UoYmFkZ2UpO1xyXG4gICAgICAgIGxldCB0YWJCYWRnZUVsZW1lbnQgPSBFbGVtZW50cy5nZXRUYWJCYWRnZSh0aGlzLl9wYW5lbC5nZXRJZCgpLCB0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICBpZiAoYmFkZ2VSZW5kZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YWJCYWRnZUVsZW1lbnRbMF0pIHtcclxuICAgICAgICAgICAgICAgIHRhYkJhZGdlRWxlbWVudC5yZXBsYWNlV2l0aChiYWRnZVJlbmRlcik7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYlRpdGxlRWxlbWVudCA9IEVsZW1lbnRzLmdldFRhYlRpdGxlKHRoaXMuX3BhbmVsLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICB0YWJUaXRsZUVsZW1lbnQuYWZ0ZXIoYmFkZ2VSZW5kZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFiQmFkZ2VFbGVtZW50WzBdKSB7XHJcbiAgICAgICAgICAgIHRhYkJhZGdlRWxlbWVudC5yZXBsYWNlV2l0aChiYWRnZVJlbmRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUYWJBYnN0cmFjdDsiLCJpbXBvcnQgVXRpbHMgICAgICAgZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgUHJpdmF0ZSAgICAgZnJvbSAnLi4vcHJpdmF0ZSc7XHJcbmltcG9ydCBUcGwgICAgICAgICBmcm9tIFwiLi4vdHBsXCI7XHJcbmltcG9ydCBFbGVtZW50cyAgICBmcm9tIFwiLi4vZWxlbWVudHNcIjtcclxuaW1wb3J0IFRhYkFic3RyYWN0IGZyb20gXCIuLi9hYnN0cmFjdC90YWJcIjtcclxuXHJcblxyXG4vKipcclxuICpcclxuICovXHJcbmNsYXNzIFRhYiBleHRlbmRzIFRhYkFic3RyYWN0IHtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHtQYW5lbH0gIHBhbmVsXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocGFuZWwsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnNEZWZhdWx0ID0ge1xyXG4gICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogJ3RhYicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICAgICAgdXJsOiBudWxsLFxyXG4gICAgICAgICAgICB1cmxDb250ZW50OiBudWxsLFxyXG4gICAgICAgICAgICB1cmxDb3VudDogbnVsbCxcclxuICAgICAgICAgICAgdXJsQmFkZ2U6IG51bGwsXHJcbiAgICAgICAgICAgIHVybFdpbmRvdzogbnVsbCxcclxuICAgICAgICAgICAgY291bnQ6IG51bGwsXHJcbiAgICAgICAgICAgIGJhZGdlOiBudWxsLFxyXG4gICAgICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3VwZXIocGFuZWwsICQuZXh0ZW5kKHRydWUsIG9wdGlvbnNEZWZhdWx0LCBvcHRpb25zKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0L/RhtC40Lkg0YLQsNCx0LBcclxuICAgICAqIEByZXR1cm4ge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9ucygpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LDQutGC0LjQstC90L7Qs9C+INGC0LDQsdCwXHJcbiAgICAgKi9cclxuICAgIHNldEFjdGl2ZSgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYlRhYkVsZW1lbnQgPSBFbGVtZW50cy5nZXRUYWJDb250YWluZXIodGhpcy5fcGFuZWwuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgaWYgKHRhYlRhYkVsZW1lbnRbMF0pIHtcclxuICAgICAgICAgICAgbGV0IHRhYlRhYnNFbGVtZW50ID0gRWxlbWVudHMuZ2V0VGFic0NvbnRhaW5lcih0aGlzLl9wYW5lbC5nZXRJZCgpKTtcclxuICAgICAgICAgICAgdGFiVGFic0VsZW1lbnQuZmluZCgnLm5hdi1saW5rJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0YWJUYWJzRWxlbWVudC5maW5kKCcubmF2LWxpbmsuZHJvcGRvd24tdG9nZ2xlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0YWJUYWJzRWxlbWVudC5maW5kKCcubmF2LWxpbmsuZHJvcGRvd24tdG9nZ2xlIC5kcm9wZG93bi1pdGVtJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgdGFiVGFiRWxlbWVudC5maW5kKCc+IGEnKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICBQcml2YXRlLnRyaWdnZXIodGhpcy5fcGFuZWwsICd0YWJfY2xpY2snLCB0aGlzLl9wYW5lbCwgW3t0YWIgOiB0aGlzfV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LrQvtC70LjRh9C10YHRgtCy0LBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IGNvdW50XHJcbiAgICAgKi9cclxuICAgIHNldENvdW50KGNvdW50KSB7XHJcblxyXG4gICAgICAgIGxldCB0YWJDb3VudEVsZW1lbnQgPSBFbGVtZW50cy5nZXRUYWJDb3VudCh0aGlzLl9wYW5lbC5nZXRJZCgpLCB0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY291bnQpIDwgMCB8fCBjb3VudC50b1N0cmluZygpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0YWJDb3VudEVsZW1lbnQucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJDb3VudEVsZW1lbnRbMF0pIHtcclxuICAgICAgICAgICAgICAgIHRhYkNvdW50RWxlbWVudC50ZXh0KCcgKCcgKyBjb3VudCArICcpJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYlRpdGxlRWxlbWVudCA9IEVsZW1lbnRzLmdldFRhYlRpdGxlKHRoaXMuX3BhbmVsLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICB0YWJUaXRsZUVsZW1lbnQuYWZ0ZXIoJzxzcGFuIGNsYXNzPVwiY29yZXVpLXBhbmVsX190YWItY291bnRcIj4gKCcgKyBjb3VudCArICcpPicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHMoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICB0aGlzLl9wYW5lbC5vbigncGFuZWxfc2hvdycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCB0YWJzQ29udGFpbmVyRWxlbWVudCA9IEVsZW1lbnRzLmdldFRhYkNvbnRhaW5lcih0aGF0Ll9wYW5lbC5nZXRJZCgpLCB0aGF0LmdldElkKCkpXHJcblxyXG4gICAgICAgICAgICAkKCcubmF2LWxpbmsnLCB0YWJzQ29udGFpbmVyRWxlbWVudCkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBQcml2YXRlLnRyaWdnZXIodGhhdC5fcGFuZWwsICd0YWJfY2xpY2snLCB0aGF0LCBbeyB0YWIgOiB0aGF0LCBldmVudCA6IGV2ZW50ICB9XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudXJsICYmIG9wdGlvbnMudXJsICE9PSAnIycpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gb3B0aW9ucy51cmw7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBsZXQgY291bnQgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdjb3VudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuX2NvdW50KSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuX2NvdW50LnRvU3RyaW5nKCkubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLl9jb3VudFxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgbGV0IHVybENvdW50ID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndXJsQ291bnQnKSAmJiB0eXBlb2Ygb3B0aW9ucy51cmxDb3VudCA9PSAnc3RyaW5nJyAmJiBvcHRpb25zLnVybENvdW50XHJcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMudXJsQ291bnRcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gbnVsbCAmJiB1cmxDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5zZXRDb3VudCgnPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHNwaW5uZXItYm9yZGVyLXNtIHRleHQtc2Vjb25kYXJ5XCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZldGNoKHVybENvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KHJlc3BvbnNlKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ2NvdW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHJlc3BvbnNlLmNvdW50KSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5jb3VudC50b1N0cmluZygpLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNldENvdW50KHJlc3BvbnNlLmNvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNldENvdW50KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRDb3VudChudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgbGV0IGJhZGdlID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYmFkZ2UnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuYmFkZ2UpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJhZGdlLnRvU3RyaW5nKCkubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICA/IG9wdGlvbnMuYmFkZ2VcclxuICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICBsZXQgdXJsQmFkZ2UgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCd1cmxCYWRnZScpICYmIHR5cGVvZiBvcHRpb25zLnVybEJhZGdlID09ICdzdHJpbmcnICYmIG9wdGlvbnMudXJsQmFkZ2VcclxuICAgICAgICAgICAgPyBvcHRpb25zLnVybEJhZGdlXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGJhZGdlID09PSBudWxsICYmIHVybEJhZGdlKSB7XHJcblxyXG4gICAgICAgICAgICBmZXRjaCh1cmxCYWRnZSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKClcclxuXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdChyZXNwb25zZSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ2JhZGdlJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMuaXNPYmplY3QocmVzcG9uc2UuYmFkZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0QmFkZ2UocmVzcG9uc2UuYmFkZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRCYWRnZShudWxsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQoNC10L3QtNC10YAg0YHQvtC00LXRgNC20LjQvNC+0LPQvlxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGxldCB0aXRsZSA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3RpdGxlJykgJiYgdHlwZW9mIG9wdGlvbnMudGl0bGUgPT0gJ3N0cmluZycgJiYgb3B0aW9ucy50aXRsZVxyXG4gICAgICAgICAgICA/IG9wdGlvbnMudGl0bGVcclxuICAgICAgICAgICAgOiAnJztcclxuXHJcbiAgICAgICAgbGV0IGFjdGl2ZSAgID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnYWN0aXZlJykgJiYgdHlwZW9mIG9wdGlvbnMuYWN0aXZlID09ICdib29sZWFuJyAmJiBvcHRpb25zLmFjdGl2ZTtcclxuICAgICAgICBsZXQgZGlzYWJsZWQgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdkaXNhYmxlZCcpICYmIHR5cGVvZiBvcHRpb25zLmRpc2FibGVkID09ICdib29sZWFuJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMuZGlzYWJsZWRcclxuICAgICAgICAgICAgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgbGV0IHVybCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiYgdHlwZW9mIG9wdGlvbnMudXJsID09ICdzdHJpbmcnICYmIG9wdGlvbnMudXJsKSB7XHJcbiAgICAgICAgICAgIHVybCA9IG9wdGlvbnMudXJsO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3VybFdpbmRvdycpICYmIHR5cGVvZiBvcHRpb25zLnVybFdpbmRvdyA9PSAnc3RyaW5nJyAmJiBvcHRpb25zLnVybFdpbmRvdykge1xyXG4gICAgICAgICAgICB1cmwgPSBvcHRpb25zLnVybFdpbmRvdztcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdXJsID0gJyMnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvdW50ID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY291bnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuY291bnQpID49IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvdW50LnRvU3RyaW5nKCkubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICA/IG9wdGlvbnMuY291bnRcclxuICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICBsZXQgYmFkZ2UgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdiYWRnZScpXHJcbiAgICAgICAgICAgID8gUHJpdmF0ZS5yZW5kZXJCYWRnZShvcHRpb25zLmJhZGdlKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihUcGxbJ3RhYnMvdGFiLmh0bWwnXSwge1xyXG4gICAgICAgICAgICB0YWI6IHtcclxuICAgICAgICAgICAgICAgIGlkOiAgICAgICB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6ICAgYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgIGNvdW50OiAgICBjb3VudCxcclxuICAgICAgICAgICAgICAgIGJhZGdlOiAgICBiYWRnZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhYjsiLCJpbXBvcnQgVXRpbHMgICAgZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgUHJpdmF0ZSAgZnJvbSAnLi4vLi4vcHJpdmF0ZSc7XHJcbmltcG9ydCBUcGwgICAgICBmcm9tIFwiLi4vLi4vdHBsXCI7XHJcbmltcG9ydCBFbGVtZW50cyBmcm9tIFwiLi4vLi4vZWxlbWVudHNcIjtcclxuXHJcblxyXG5jbGFzcyBEcm9wZG93bkl0ZW0ge1xyXG5cclxuICAgIF9pZCA9IG51bGw7XHJcbiAgICBfcGFuZWwgPSBudWxsO1xyXG4gICAgX2Ryb3Bkb3duID0gbnVsbDtcclxuICAgIF9vcHRpb25zID0ge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdpdGVtJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgICAgICB1cmw6ICcnLFxyXG4gICAgICAgIHVybENvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgdXJsV2luZG93OiAnJyxcclxuICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgY291bnQ6IG51bGwsXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0ge1BhbmVsfSAgICAgICBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtUYWJEcm9wZG93bn0gZHJvcGRvd25cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIG9wdGlvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhbmVsLCBkcm9wZG93biwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zICA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9wYW5lbCAgICA9IHBhbmVsO1xyXG4gICAgICAgIHRoaXMuX2Ryb3Bkb3duID0gZHJvcGRvd247XHJcbiAgICAgICAgdGhpcy5faWQgICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHRoaXMuX29wdGlvbnMuaWQpID49IDAgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINGC0LDQsdCwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0L/RhtC40Lkg0YLQsNCx0LBcclxuICAgICAqIEByZXR1cm4ge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9ucygpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LDQutGC0LjQstC90L7Qs9C+INGC0LDQsdCwXHJcbiAgICAgKi9cclxuICAgIHNldEFjdGl2ZSgpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYkl0ZW1FbGVtZW50ID0gRWxlbWVudHMuZ2V0VGFiSXRlbUNvbnRhaW5lcih0aGlzLl9wYW5lbC5nZXRJZCgpLCB0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICBpZiAodGFiSXRlbUVsZW1lbnRbMF0pIHtcclxuICAgICAgICAgICAgbGV0IHRhYlRhYnNFbGVtZW50ID0gRWxlbWVudHMuZ2V0VGFic0NvbnRhaW5lcih0aGlzLl9wYW5lbC5nZXRJZCgpKTtcclxuICAgICAgICAgICAgdGFiVGFic0VsZW1lbnQuZmluZCgnLm5hdi1saW5rJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0YWJUYWJzRWxlbWVudC5maW5kKCcubmF2LWxpbmsuZHJvcGRvd24tdG9nZ2xlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0YWJUYWJzRWxlbWVudC5maW5kKCcubmF2LWxpbmsuZHJvcGRvd24tdG9nZ2xlIC5kcm9wZG93bi1pdGVtJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRhYkVsZW1lbnQgPSBFbGVtZW50cy5nZXRUYWJDb250YWluZXIodGhpcy5fcGFuZWwuZ2V0SWQoKSwgdGhpcy5fZHJvcGRvd24uZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgIHRhYkVsZW1lbnQuZmluZCgnPiBhJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgdGFiSXRlbUVsZW1lbnQuZmluZCgnPiBhJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgUHJpdmF0ZS50cmlnZ2VyKHRoaXMuX3BhbmVsLCAndGFiX2NsaWNrJywgdGhpcy5fcGFuZWwsIFt7IHRhYiA6IHRoaXMgfV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0L3QsNC30LLQsNC90LjRj1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXHJcbiAgICAgKi9cclxuICAgIHNldFRpdGxlKHRpdGxlKSB7XHJcblxyXG4gICAgICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmRleE9mKHR5cGVvZiB0aXRsZSkgPCAwIHx8IHRpdGxlLnRvU3RyaW5nKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0YWJUaXRsZUVsZW1lbnQgPSBFbGVtZW50cy5nZXRUYWJJdGVtVGl0bGUodGhpcy5fcGFuZWwuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuICAgICAgICB0YWJUaXRsZUVsZW1lbnQudGV4dCh0aXRsZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC60L7Qu9C40YfQtdGB0YLQstCwXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY291bnRcclxuICAgICAqL1xyXG4gICAgc2V0Q291bnQoY291bnQpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYkNvdW50RWxlbWVudCA9IEVsZW1lbnRzLmdldFRhYkl0ZW1Db3VudCh0aGlzLl9wYW5lbC5nZXRJZCgpLCB0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgY291bnQpIDwgMCB8fCBjb3VudC50b1N0cmluZygpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0YWJDb3VudEVsZW1lbnQucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJDb3VudEVsZW1lbnRbMF0pIHtcclxuICAgICAgICAgICAgICAgIHRhYkNvdW50RWxlbWVudC50ZXh0KCcoJyArIGNvdW50ICsgJyknKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFiVGl0bGVFbGVtZW50ID0gRWxlbWVudHMuZ2V0VGFiSXRlbVRpdGxlKHRoaXMuX3BhbmVsLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICB0YWJUaXRsZUVsZW1lbnQuYWZ0ZXIoJygnICsgY291bnQgKyAnKScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+XHJcbiAgICAgKiBAcmV0dXJuIHsqfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcblxyXG4gICAgICAgIG9wdGlvbnMudGl0bGUgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCd0aXRsZScpICYmIHR5cGVvZiBvcHRpb25zLnRpdGxlID09ICdzdHJpbmcnICYmIG9wdGlvbnMudGl0bGVcclxuICAgICAgICAgICAgPyBvcHRpb25zLnRpdGxlXHJcbiAgICAgICAgICAgIDogJyc7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuYWN0aXZlICAgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdhY3RpdmUnKSAmJiB0eXBlb2Ygb3B0aW9ucy5hY3RpdmUgPT0gJ2Jvb2xlYW4nICYmIG9wdGlvbnMuYWN0aXZlO1xyXG4gICAgICAgIG9wdGlvbnMuZGlzYWJsZWQgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdkaXNhYmxlZCcpICYmIHR5cGVvZiBvcHRpb25zLmRpc2FibGVkID09ICdib29sZWFuJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMuZGlzYWJsZWRcclxuICAgICAgICAgICAgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgbGV0IHVybCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndXJsJykgJiYgdHlwZW9mIG9wdGlvbnMuX3VybCA9PSAnc3RyaW5nJyAmJiBvcHRpb25zLl91cmwpIHtcclxuICAgICAgICAgICAgdXJsID0gb3B0aW9ucy5fdXJsO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3VybFdpbmRvdycpICYmIHR5cGVvZiBvcHRpb25zLl91cmxXaW5kb3cgPT0gJ3N0cmluZycgJiYgb3B0aW9ucy5fdXJsV2luZG93KSB7XHJcbiAgICAgICAgICAgIHVybCA9IG9wdGlvbnMuX3VybFdpbmRvdztcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdXJsID0gJyMnO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGl0bGUnKSAmJiB0eXBlb2Ygb3B0aW9ucy50aXRsZSA9PSAnc3RyaW5nJyAmJiBvcHRpb25zLnRpdGxlXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy50aXRsZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBjb25zdCBhY3RpdmUgICA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2FjdGl2ZScpICYmIHR5cGVvZiBvcHRpb25zLmFjdGl2ZSA9PSAnYm9vbGVhbicgJiYgb3B0aW9ucy5hY3RpdmU7XHJcbiAgICAgICAgY29uc3QgZGlzYWJsZWQgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdkaXNhYmxlZCcpICYmIHR5cGVvZiBvcHRpb25zLmRpc2FibGVkID09ICdib29sZWFuJ1xyXG4gICAgICAgICAgICA/IG9wdGlvbnMuZGlzYWJsZWRcclxuICAgICAgICAgICAgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgbGV0IGNvdW50ID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY291bnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIG9wdGlvbnMuX2NvdW50KSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5fY291bnQudG9TdHJpbmcoKS5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5fY291bnRcclxuICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gZWpzLnJlbmRlcihUcGxbJ3RhYnMvdGFiLWRyb3Bkb3duLWl0ZW0uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGl0ZW06IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnaXRlbScsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGFjdGl2ZSxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcclxuICAgICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgY291bnQ6IGNvdW50XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bkl0ZW07IiwiaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IFRwbCAgIGZyb20gXCIuLi8uLi90cGxcIjtcclxuXHJcbmNsYXNzIERyb3Bkb3duRGl2aWRlciB7XHJcblxyXG4gICAgX2lkID0gbnVsbDtcclxuICAgIF9wYW5lbCA9IG51bGw7XHJcbiAgICBfZHJvcGRvd24gPSBudWxsO1xyXG4gICAgX29wdGlvbnMgPSB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2RpdmlkZXInXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0ge1BhbmVsfSAgICAgICBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtUYWJEcm9wZG93bn0gZHJvcGRvd25cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIG9wdGlvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhbmVsLCBkcm9wZG93biwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zICA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9wYW5lbCAgICA9IHBhbmVsO1xyXG4gICAgICAgIHRoaXMuX2Ryb3Bkb3duID0gZHJvcGRvd247XHJcbiAgICAgICAgdGhpcy5faWQgICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogVXRpbHMuaGFzaENvZGUoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YDQsCDRgtCw0LHQsFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+XHJcbiAgICAgKiBAcmV0dXJuIHsqfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiBUcGxbJ3RhYnMvdGFiLWRyb3Bkb3duLWRpdmlkZXIuaHRtbCddO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25EaXZpZGVyOyIsImltcG9ydCBQcml2YXRlICAgICAgICAgZnJvbSAnLi4vcHJpdmF0ZSc7XHJcbmltcG9ydCBUcGwgICAgICAgICAgICAgZnJvbSBcIi4uL3RwbFwiO1xyXG5pbXBvcnQgRWxlbWVudHMgICAgICAgIGZyb20gXCIuLi9lbGVtZW50c1wiO1xyXG5pbXBvcnQgVGFiQWJzdHJhY3QgICAgIGZyb20gXCIuLi9hYnN0cmFjdC90YWJcIjtcclxuaW1wb3J0IERyb3Bkb3duSXRlbSAgICBmcm9tIFwiLi9kcm9wZG93bi9pdGVtXCI7XHJcbmltcG9ydCBEcm9wZG93bkRpdmlkZXIgZnJvbSBcIi4vZHJvcGRvd24vZGl2aWRlclwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgVGFiRHJvcGRvd24gZXh0ZW5kcyBUYWJBYnN0cmFjdCB7XHJcblxyXG4gICAgX2l0ZW1zID0gW107XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSB7UGFuZWx9ICBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhbmVsLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGxldCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3VwZXIocGFuZWwsICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucykpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSAmJlxyXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuaXRlbXMpICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuaXRlbXMubGVuZ3RoID4gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYlR5cGUgPSBpdGVtLmhhc093blByb3BlcnR5KCd0eXBlJykgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICA/IGl0ZW0udHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIDogJ2l0ZW0nO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbnN0YW5jZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0YWJUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaXRlbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogICAgICAgIGluc3RhbmNlID0gbmV3IERyb3Bkb3duSXRlbShwYW5lbCwgdGhhdCwgaXRlbSk7ICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpdmlkZXInOiBpbnN0YW5jZSA9IG5ldyBEcm9wZG93bkRpdmlkZXIocGFuZWwsIHRoYXQsIGl0ZW0pOyBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9pdGVtcy5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHMoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy5fcGFuZWwub24oJ3BhbmVsX3Nob3cnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFic0NvbnRhaW5lckVsZW1lbnQgPSBFbGVtZW50cy5nZXRUYWJDb250YWluZXIodGhhdC5fcGFuZWwuZ2V0SWQoKSwgdGhhdC5nZXRJZCgpKVxyXG5cclxuICAgICAgICAgICAgJCgnLmRyb3Bkb3duLWl0ZW0nLCB0YWJzQ29udGFpbmVyRWxlbWVudCkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFiSWQgPSAkKHRoaXMpLmRhdGEoJ3RhYi1pZCcpIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYiAgID0gdGhhdC5nZXRJdGVtKHRhYklkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGFiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUHJpdmF0ZS50cmlnZ2VyKHRoYXQuX3BhbmVsLCAndGFiX2NsaWNrJywgdGFiLCBbe3RhYiA6IHRhYiwgZXZlbnQgOiBldmVudH1dKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB0YWIuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5fdXJsICYmIG9wdGlvbnMuX3VybCAhPT0gJyMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBvcHRpb25zLl91cmw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvtC/0YbQuNC5INGC0LDQsdCwXHJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gaXRlbUlkXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldEl0ZW0oaXRlbUlkKSB7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5faXRlbXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChpdGVtLmdldElkICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5nZXRJZCA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgaXRlbS5nZXRJZCgpID09IGl0ZW1JZFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LrQvtC70LjRh9C10YHRgtCy0LBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxyXG4gICAgICovXHJcbiAgICBzZXRDb3VudChjb3VudCkge1xyXG5cclxuICAgICAgICBsZXQgdGFiQ291bnRFbGVtZW50ID0gRWxlbWVudHMuZ2V0VGFiQ291bnQodGhpcy5fcGFuZWwuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIGNvdW50KSA8IDAgfHwgY291bnQudG9TdHJpbmcoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGFiQ291bnRFbGVtZW50LnJlbW92ZSgpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGFiQ291bnRFbGVtZW50WzBdKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJDb3VudEVsZW1lbnQudGV4dCgnKCcgKyBjb3VudCArICcpJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYlRpdGxlRWxlbWVudCA9IEVsZW1lbnRzLmdldFRhYlRpdGxlKHRoaXMuX3BhbmVsLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICAgICB0YWJUaXRsZUVsZW1lbnQuYWZ0ZXIoJygnICsgY291bnQgKyAnKScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LXQvdC00LXRgCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgbGV0IHRpdGxlID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGl0bGUnKSAmJiB0eXBlb2Ygb3B0aW9ucy50aXRsZSA9PSAnc3RyaW5nJyAmJiBvcHRpb25zLnRpdGxlXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy50aXRsZVxyXG4gICAgICAgICAgICA6ICcnO1xyXG5cclxuICAgICAgICBsZXQgYWN0aXZlICAgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdhY3RpdmUnKSAmJiB0eXBlb2Ygb3B0aW9ucy5hY3RpdmUgPT0gJ2Jvb2xlYW4nICYmIG9wdGlvbnMuYWN0aXZlO1xyXG4gICAgICAgIGxldCBkaXNhYmxlZCA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Rpc2FibGVkJykgJiYgdHlwZW9mIG9wdGlvbnMuZGlzYWJsZWQgPT0gJ2Jvb2xlYW4nXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5kaXNhYmxlZFxyXG4gICAgICAgICAgICA6IGZhbHNlO1xyXG5cclxuICAgICAgICBsZXQgY291bnQgPSBvcHRpb25zLmhhc093blByb3BlcnR5KCdjb3VudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2Ygb3B0aW9ucy5jb3VudCkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuY291bnQudG9TdHJpbmcoKS5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgID8gb3B0aW9ucy5jb3VudFxyXG4gICAgICAgICAgICA6IG51bGw7XHJcblxyXG4gICAgICAgIGxldCBiYWRnZSA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2JhZGdlJylcclxuICAgICAgICAgICAgPyBQcml2YXRlLnJlbmRlckJhZGdlKG9wdGlvbnMuYmFkZ2UpXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuXHJcbiAgICAgICAgbGV0IGl0ZW1zQ29udGVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5faXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zQ29udGVudHMucHVzaChpdGVtLnJlbmRlcigpKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKFRwbFsndGFicy90YWItZHJvcGRvd24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIHRhYjoge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuZ2V0SWQoKSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxyXG4gICAgICAgICAgICAgICAgY291bnQ6IGNvdW50LFxyXG4gICAgICAgICAgICAgICAgYmFkZ2U6IGJhZGdlLFxyXG4gICAgICAgICAgICAgICAgaXRlbXNDb250ZW50czogaXRlbXNDb250ZW50cyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhYkRyb3Bkb3duOyIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuaW1wb3J0IFV0aWxzICAgICAgIGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgVHBsICAgICAgICAgZnJvbSBcIi4vdHBsXCI7XHJcbmltcG9ydCBUYWIgICAgICAgICBmcm9tIFwiLi90YWJzL3RhYlwiO1xyXG5pbXBvcnQgVGFiRHJvcGRvd24gZnJvbSBcIi4vdGFicy9kcm9wZG93blwiO1xyXG5cclxubGV0IFByaXZhdGUgPSB7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHBhbmVsXHJcbiAgICAgKiBAcGFyYW0gbmFtZVxyXG4gICAgICogQHBhcmFtIGNvbnRleHRcclxuICAgICAqIEBwYXJhbSBwYXJhbXNcclxuICAgICAqL1xyXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24ocGFuZWwsIG5hbWUsIGNvbnRleHQsIHBhcmFtcykge1xyXG5cclxuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgW107XHJcblxyXG4gICAgICAgIGlmIChwYW5lbC5fZXZlbnRzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHBhbmVsLl9ldmVudHNbbmFtZV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhbmVsLl9ldmVudHNbbmFtZV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjYWxsYmFjayA9IHBhbmVsLl9ldmVudHNbbmFtZV1baV0uY2FsbGJhY2s7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHBhbmVsLl9ldmVudHNbbmFtZV1baV0uY29udGV4dCB8fCBjb250ZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhbmVsLl9ldmVudHNbbmFtZV1baV0uc2luZ2xlRXhlYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLl9ldmVudHNbbmFtZV0uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvtC90YLRgNC+0LvQvtCyINC4INGE0LjQu9GM0YLRgNC+0LJcclxuICAgICAqIEBwYXJhbSB7UGFuZWx9IHBhbmVsXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb250cm9sc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdENvbnRyb2xzOiBmdW5jdGlvbiAocGFuZWwsIGNvbnRyb2xzKSB7XHJcblxyXG4gICAgICAgIGNvbnRyb2xzLm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KGNvbnRyb2wpICYmIHR5cGVvZiBjb250cm9sLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhbmVsLl9jb250cm9sbGVyLmNvbnRyb2xzLmhhc093blByb3BlcnR5KGNvbnRyb2wudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSAkLmV4dGVuZCh0cnVlLCB7fSwgcGFuZWwuX2NvbnRyb2xsZXIuY29udHJvbHNbY29udHJvbC50eXBlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuaW5pdChwYW5lbCwgY29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLl9jb250cm9scy5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQutC+0L3RgtGA0L7Qu9C+0LIg0Lgg0YTQuNC70YzRgtGA0L7QslxyXG4gICAgICogQHBhcmFtIHtQYW5lbH0gcGFuZWxcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRhYkl0ZW1zXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0VGFiczogZnVuY3Rpb24gKHBhbmVsLCB0YWJJdGVtcykge1xyXG5cclxuICAgICAgICB0YWJJdGVtcy5tYXAoZnVuY3Rpb24gKHRhYkl0ZW0pIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YWJJdGVtICYmIHRhYkl0ZW0uY29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YWJJdGVtLmNvbnN0cnVjdG9yLm5hbWUgJiYgdHlwZW9mIHRhYkl0ZW0udG9PYmplY3QgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJJdGVtID0gdGFiSXRlbS50b09iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QodGFiSXRlbSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYlR5cGUgID0gdGFiSXRlbS5oYXNPd25Qcm9wZXJ0eSgndHlwZScpICYmIHR5cGVvZiB0YWJJdGVtLnR5cGUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0YWJJdGVtLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICA6ICd0YWInO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YWJUeXBlID09PSAndGFiJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IFRhYihwYW5lbCwgdGFiSXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YWJUeXBlID09PSAnZHJvcGRvd24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgVGFiRHJvcGRvd24ocGFuZWwsIHRhYkl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYW5lbC5fdGFicy5wdXNoKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwub24oJ3BhbmVsX3Nob3cnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmluaXRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0YLQsNCx0L7QslxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhbmVsXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFic1xyXG4gICAgICovXHJcbiAgICByZW5kZXJUYWJzOiBmdW5jdGlvbiAocGFuZWwsIHRhYnMpIHtcclxuXHJcbiAgICAgICAgbGV0IGNsYXNzZXMgICAgICA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJzQ29udGVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRhYnMuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiYgdHlwZW9mIHRhYnMucG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGFicy5wb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndG9wLWNlbnRlcic6ICAgICBjbGFzc2VzLnB1c2goJ2p1c3RpZnktY29udGVudC1jZW50ZXInKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AtcmlnaHQnOiAgICAgIGNsYXNzZXMucHVzaCgnanVzdGlmeS1jb250ZW50LWVuZCcpOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOiAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdsZWZ0LXRhYnMnKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6ICAgICAgICAgIGNsYXNzZXMucHVzaCgncmlnaHQtdGFicycpOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhYnMuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdGFicy50eXBlID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICBbJ3RhYnMnLCAncGlsbHMnXS5pbmRleE9mKHRhYnMudHlwZSkgPj0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2dhcC0xJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcGFuZWwuX3RhYnMubWFwKGZ1bmN0aW9uICh0YWIpIHtcclxuICAgICAgICAgICAgdGFic0NvbnRlbnRzLnB1c2godGFiLnJlbmRlcigpKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKFRwbFsndGFicy5odG1sJ10sIHtcclxuICAgICAgICAgICAgY2xhc3NlczogY2xhc3Nlcy5qb2luKCcgJyksXHJcbiAgICAgICAgICAgIHR5cGU6IHRhYnMuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0eXBlb2YgdGFicy50eXBlID09PSAnc3RyaW5nJyA/IHRhYnMudHlwZSA6ICcnLFxyXG4gICAgICAgICAgICBmaWxsOiB0YWJzLmhhc093blByb3BlcnR5KCdmaWxsJykgJiYgdHlwZW9mIHRhYnMuZmlsbCA9PT0gJ3N0cmluZycgPyB0YWJzLmZpbGwgOiAnJyxcclxuICAgICAgICAgICAgdGFic0NvbnRlbnRzOiB0YWJzQ29udGVudHMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0LHQvtGA0LrQsCDRjdC70LXQvNC10L3RgtCwINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFuZWxcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fGpRdWVyeX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVyQ29udHJvbDogZnVuY3Rpb24gKHBhbmVsLCBjb250cm9sKSB7XHJcblxyXG4gICAgICAgIGlmIChVdGlscy5pc09iamVjdChjb250cm9sKSkge1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbEVsZW1lbnQgPSAkKFxyXG4gICAgICAgICAgICAgICAgZWpzLnJlbmRlcihUcGxbJ3BhbmVsLWNvbnRyb2wuaHRtbCddLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbnRyb2wuZ2V0SWQoKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xFbGVtZW50LmFwcGVuZChjb250cm9sLnJlbmRlcigpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sLmhhc093blByb3BlcnR5KCdpbml0RXZlbnRzJykgJiYgdHlwZW9mIGNvbnRyb2wuaW5pdEV2ZW50cyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgcGFuZWwub24oJ3BhbmVsX3Nob3cnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC5pbml0RXZlbnRzKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29udHJvbEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQodCx0L7RgNC60LAg0YHQvtC00LXRgNC20LjQvNC+0LPQvlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhbmVsXHJcbiAgICAgKiBAcGFyYW0geyp9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXHJcbiAgICByZW5kZXJDb250ZW50czogZnVuY3Rpb24ocGFuZWwsIGNvbnRlbnQpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbIGNvbnRlbnQgXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnRbaV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29udGVudFtpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZW50W2ldIGluc3RhbmNlb2YgT2JqZWN0ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnRbaV0ucmVuZGVyID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnRlbnRbaV0uaW5pdEV2ZW50cyA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29udGVudFtpXS5yZW5kZXIoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLm9uZSgnY29udGVudF9zaG93JywgY29udGVudFtpXS5pbml0RXZlbnRzLCBjb250ZW50W2ldLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29udGVudFtpXSkgJiZcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50W2ldLmhhc093blByb3BlcnR5KCdjb21wb25lbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb250ZW50W2ldLmNvbXBvbmVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50W2ldLmNvbXBvbmVudC5zdWJzdHJpbmcoMCwgNikgPT09ICdjb3JldWknXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGNvbnRlbnRbaV0uY29tcG9uZW50LnNwbGl0KCcuJylbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDb3JlVUkuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMuaXNPYmplY3QoQ29yZVVJW25hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBDb3JlVUlbbmFtZV0uY3JlYXRlKGNvbnRlbnRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpbnN0YW5jZS5yZW5kZXIoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYW5lbC5vbmUoJ2NvbnRlbnRfc2hvdycsIGluc3RhbmNlLmluaXRFdmVudHMsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChKU09OLnN0cmluZ2lmeShjb250ZW50W2ldKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7Qt9C00LDQvdC40LUg0LzQtdGC0LrQuFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGJhZGdlXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcmVuZGVyQmFkZ2U6IGZ1bmN0aW9uIChiYWRnZSkge1xyXG5cclxuICAgICAgICBpZiAoICEgVXRpbHMuaXNPYmplY3QoYmFkZ2UpIHx8XHJcbiAgICAgICAgICAgICAhIGJhZGdlLmhhc093blByb3BlcnR5KCd0ZXh0JykgfHxcclxuICAgICAgICAgICAgWydzdHJpbmcnLCAnbnVtYmVyJ10uaW5kZXhPZih0eXBlb2YgYmFkZ2UudGV4dCkgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgYXR0ciA9IFtdO1xyXG4gICAgICAgIGxldCB0eXBlID0gYmFkZ2UuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJiB0eXBlb2YgYmFkZ2UudHlwZSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBiYWRnZS50eXBlXHJcbiAgICAgICAgICAgIDogJ2Rhbmdlcic7XHJcblxyXG4gICAgICAgIGxldCBjbGFzc2VzID0gYmFkZ2UudGV4dC50b1N0cmluZygpLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgPyAncm91bmRlZC1waWxsIGJnLScgKyB0eXBlXHJcbiAgICAgICAgICAgIDogJ3JvdW5kZWQtY2lyY2xlIHAtMSBiZy0nICsgdHlwZTtcclxuXHJcbiAgICAgICAgaWYgKGJhZGdlLmhhc093blByb3BlcnR5KCdhdHRyJykgJiYgVXRpbHMuaXNPYmplY3QoYmFkZ2UuYXR0cikpIHtcclxuICAgICAgICAgICAgaWYgKGJhZGdlLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykgJiYgdHlwZW9mIGJhZGdlLmF0dHIuY2xhc3MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgJyArIGJhZGdlLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYmFkZ2UuYXR0ci5jbGFzcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGJhZGdlLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKFRwbFsnYmFkZ2UuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGJhZGdlOiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAgICBiYWRnZS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3NlcyA/ICcgJyArIGNsYXNzZXMgOiAnJyxcclxuICAgICAgICAgICAgICAgIGF0dHI6ICAgIGF0dHIubGVuZ3RoID4gMCA/ICcgJyArIGF0dHIuam9pbignICcpIDogJycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcml2YXRlOyIsIlxyXG5cclxuY2xhc3MgQWJzdHJhY3RUYWIge1xyXG5cclxuICAgIF9pZCAgICAgICA9ICcnO1xyXG4gICAgX3RpdGxlICAgID0gJyc7XHJcbiAgICBfZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIF9hY3RpdmUgICA9IGZhbHNlO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxyXG4gICAgICogQHJldHVybiB7QWJzdHJhY3RUYWJ9XHJcbiAgICAgKi9cclxuICAgIHNldFRpdGxlKHRpdGxlKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC90LDQt9Cy0LDQvdC40Y8g0YLQsNCx0LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0VGl0bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCBJRCDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKiBAcmV0dXJuIEFic3RyYWN0VGFiXHJcbiAgICAgKi9cclxuICAgIHNldElkKGlkKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGC0LDQsdCwXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNC/0YDQtdGC0LAg0L3QsCDQv9C10YDQtdGF0L7QtCDQsiDRgtCw0LFcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNEaXNhYmxlZFxyXG4gICAgICogQHJldHVybiB7QWJzdHJhY3RUYWJ9XHJcbiAgICAgKi9cclxuICAgIHNldERpc2FibGVkKGlzRGlzYWJsZWQgPSB0cnVlKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gaXNEaXNhYmxlZDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQsNC/0YDQtdGC0LAg0L3QsCDQv9C10YDQtdGF0L7QtCDQsiDRgtCw0LFcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzRGlzYWJsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQuNC90YTQvtGA0LzQsNGG0LjQuCDQsNC60YLQuNCy0LXQvSDQu9C4INGC0LDQsVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0FjdGl2ZVxyXG4gICAgICogQHJldHVybiB7QWJzdHJhY3RUYWJ9XHJcbiAgICAgKi9cclxuICAgIHNldEFjdGl2ZShpc0FjdGl2ZSA9IHRydWUpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gaXNBY3RpdmU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC40L3RhNC+0YDQvNCw0YbQuNC4INCw0LrRgtC40LLQtdC9INC70Lgg0YLQsNCxXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0FjdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQvtC10LHRgNCw0LfQvtCy0LDQvdC40LUg0LIg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRvT2JqZWN0KCkge1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBpZCA6IHRoaXMuZ2V0SWQoKSxcclxuICAgICAgICAgICAgdHlwZTogJ3RhYicsXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmdldFRpdGxlKCksXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0Rpc2FibGVkKCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0VGFiOyIsImltcG9ydCBBYnN0cmFjdFRhYiBmcm9tIFwiLi4vdGFiXCI7XHJcblxyXG5cclxuY2xhc3MgSGVscGVyVGFiIGV4dGVuZHMgQWJzdHJhY3RUYWIge1xyXG5cclxuICAgIEJBREdFX1RZUEVfREFOR0VSICAgID0gJ2Rhbmdlcic7XHJcbiAgICBCQURHRV9UWVBFX1BSSU1BUlkgICA9ICdwcmltYXJ5JztcclxuICAgIEJBREdFX1RZUEVfU0VDT05EQVJZID0gJ3NlY29uZGFyeSc7XHJcbiAgICBCQURHRV9UWVBFX1NVQ0NFU1MgICA9ICdzdWNjZXNzJztcclxuICAgIEJBREdFX1RZUEVfV0FSTklORyAgID0gJ3dhcm5pbmcnO1xyXG4gICAgQkFER0VfVFlQRV9JTkZPICAgICAgPSAnaW5mbyc7XHJcbiAgICBCQURHRV9UWVBFX0xJR0hUICAgICA9ICdsaWdodCc7XHJcbiAgICBCQURHRV9UWVBFX0RBUksgICAgICA9ICdkYXJrJztcclxuXHJcbiAgICBfdXJsICAgICAgICA9IG51bGw7XHJcbiAgICBfdXJsQ29udGVudCA9IG51bGw7XHJcbiAgICBfdXJsQ291bnQgICA9IG51bGw7XHJcbiAgICBfdXJsQmFkZ2UgICA9IG51bGw7XHJcbiAgICBfdXJsV2luZG93ICA9IG51bGw7XHJcbiAgICBfY291bnQgICAgICA9IG51bGw7XHJcbiAgICBfYmFkZ2UgICAgICA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnNldElkKGlkKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQutC+0LvQuNGH0LXRgdGC0LLQsCDQtNC70Y8g0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGNvdW50XHJcbiAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICovXHJcbiAgICBzZXRDb3VudChjb3VudCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0LvQuNGH0LXRgdGC0LLQsCDQtNC70Y8g0YLQsNCx0LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRDb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY291bnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC80LXRgtC60Lgg0LTQu9GPINGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB0ZXh0XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxyXG4gICAgICogQHBhcmFtIHthcnJheX0gYXR0clxyXG4gICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAqL1xyXG4gICAgc2V0QmFkZ2UodGV4dCA9IG51bGwsIHR5cGUgPSB0aGlzLkJBREdFX1RZUEVfREFOR0VSLCBhdHRyID0gW10pIHtcclxuXHJcbiAgICAgICAgaWYgKHRleHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFkZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9iYWRnZSA9IHtcclxuICAgICAgICAgICAgICAgIHRleHQsXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgYXR0clxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LzQtdGC0LrQuCDQtNC70Y8g0YLQsNCx0LAg0LIg0LLQuNC00LUg0YLQvtGH0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcclxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGF0dHJcclxuICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgKi9cclxuICAgIHNldEJhZGdlRG90KHR5cGUgPSB0aGlzLkJBREdFX1RZUEVfREFOR0VSLCBhdHRyID0gW10pIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYmFkZ2UgPSB7XHJcbiAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBhdHRyXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LzQtdGC0LrQuCDQtNC70Y8g0YLQsNCx0LBcclxuICAgICAqIEByZXR1cm4ge29iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRCYWRnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFkZ2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwIHVybCDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdXJsXHJcbiAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICovXHJcbiAgICBzZXRVcmwodXJsID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAgdXJsINGC0LDQsdCwXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91cmw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC80LXRgtC60Lgg0LTQu9GPINGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB1cmxcclxuICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgKi9cclxuICAgIHNldFVybENvbnRlbnQodXJsID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX3VybENvbnRlbnQgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IHVybCDRgtCw0LHQsCDQtNC70Y8g0LfQsNCz0YDRg9C30LrQuCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsQ29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXJsQ29udGVudDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAgdXJsINC60L7Qu9C40YfQtdGB0YLQstCwINGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB1cmxcclxuICAgICAqIEByZXR1cm4ge3RoaXN9XHJcbiAgICAgKi9cclxuICAgIHNldFVybENvdW50KHVybCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLl91cmxDb3VudCA9IHVybDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgdXJsINC60L7Qu9C40YfQtdGB0YLQstCwINGC0LDQsdCwXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsQ291bnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VybENvdW50O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCB1cmwg0LzQtdGC0LrQuCDRgtCw0LHQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdXJsXHJcbiAgICAgKiBAcmV0dXJuIHt0aGlzfVxyXG4gICAgICovXHJcbiAgICBzZXRVcmxCYWRnZSh1cmwgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5fdXJsQmFkZ2UgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IHVybCDQvNC10YLQutC4INGC0LDQsdCwXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsQmFkZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VybEJhZGdlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCB1cmwg0LTQu9GPINC+0LrQvdCwINCx0YDQsNGD0LfQtdGA0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHVybFxyXG4gICAgICogQHJldHVybiB7dGhpc31cclxuICAgICAqL1xyXG4gICAgc2V0VXJsV2luZG93KHVybCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLl91cmxXaW5kb3cgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IHVybCDQtNC70Y8g0L7QutC90LAg0LHRgNCw0YPQt9C10YDQsFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFVybFdpbmRvdygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXJsV2luZG93O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgdGFiIHRvIG9iamVjdFxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIudG9PYmplY3QoKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAgICAgICAgaWYgKHVybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQudXJsID0gdXJsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsQ29udGVudCA9IHRoaXMuZ2V0VXJsQ29udGVudCgpO1xyXG4gICAgICAgIGlmICh1cmxDb250ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC51cmxDb250ZW50ID0gdXJsQ29udGVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVybFdpbmRvdyA9IHRoaXMuZ2V0VXJsV2luZG93KCk7XHJcbiAgICAgICAgaWYgKHVybFdpbmRvdyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQudXJsV2luZG93ID0gdXJsV2luZG93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLmdldENvdW50KCk7XHJcbiAgICAgICAgaWYgKGNvdW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jb3VudCA9IGNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYmFkZ2UgPSB0aGlzLmdldEJhZGdlKCk7XHJcbiAgICAgICAgaWYgKGJhZGdlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5iYWRnZSA9IGJhZGdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsQ291bnQgPSB0aGlzLmdldFVybENvdW50KCk7XHJcbiAgICAgICAgaWYgKHVybENvdW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC51cmxDb3VudCA9IHVybENvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsQmFkZ2UgPSB0aGlzLmdldFVybEJhZGdlKCk7XHJcbiAgICAgICAgaWYgKHVybEJhZGdlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC51cmxCYWRnZSA9IHVybEJhZGdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlbHBlclRhYjsiLCJcclxuLyoqXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBEcm9wZG93bkl0ZW0ge1xyXG5cclxuICAgIF9pZCAgICAgICAgID0gJyc7XHJcbiAgICBfdGl0bGUgICAgICA9ICcnO1xyXG4gICAgX3VybCAgICAgICAgPSBudWxsO1xyXG4gICAgX3VybENvbnRlbnQgPSBudWxsO1xyXG4gICAgX3VybENvdW50ICAgPSBudWxsO1xyXG4gICAgX3VybFdpbmRvdyAgPSBudWxsO1xyXG4gICAgX2NvdW50ICAgICAgPSBudWxsO1xyXG4gICAgX2Rpc2FibGVkICAgPSBmYWxzZTtcclxuICAgIF9hY3RpdmUgICAgID0gZmFsc2U7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQsIHRpdGxlKSB7XHJcblxyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lkID0gU3RyaW5nKE1hdGguYWJzKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQyOTQ5NjcyOTUpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBpdGVtIElEXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqL1xyXG4gICAgc2V0SWQoaWQpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBpdGVtIElEXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgaXRlbSB0aXRsZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXHJcbiAgICAgKiBAcmV0dXJuIHtEcm9wZG93bkl0ZW19XHJcbiAgICAgKi9cclxuICAgIHNldFRpdGxlKHRpdGxlKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgaXRlbSB0aXRsZVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGl0ZW0gY291bnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGNvdW50XHJcbiAgICAgKiBAcmV0dXJuIHtEcm9wZG93bkl0ZW19XHJcbiAgICAgKi9cclxuICAgIHNldENvdW50KGNvdW50ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGl0ZW0gY291bnRcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRDb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY291bnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGl0ZW0gVVJMXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB1cmxcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duSXRlbX1cclxuICAgICAqL1xyXG4gICAgc2V0VXJsKHVybCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGl0ZW0gVVJMXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91cmw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGNvbnRlbnQgVVJMXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB1cmxcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duSXRlbX1cclxuICAgICAqL1xyXG4gICAgc2V0VXJsQ29udGVudCh1cmwgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5fdXJsQ29udGVudCA9IHVybDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgY29udGVudCBVUkxcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRVcmxDb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91cmxDb250ZW50O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBjb3VudCBVUkxcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHVybFxyXG4gICAgICogQHJldHVybiB7RHJvcGRvd25JdGVtfVxyXG4gICAgICovXHJcbiAgICBzZXRVcmxDb3VudCh1cmwgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5fdXJsQ291bnQgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGNvdW50IFVSTFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFVybENvdW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91cmxDb3VudDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgd2luZG93IFVSTFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdXJsXHJcbiAgICAgKiBAcmV0dXJuIHtEcm9wZG93bkl0ZW19XHJcbiAgICAgKi9cclxuICAgIHNldFVybFdpbmRvdyh1cmwgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5fdXJsV2luZG93ID0gdXJsO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB3aW5kb3cgVVJMXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsV2luZG93KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91cmxXaW5kb3c7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGRpc2FibGVkIHN0YXRlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRGlzYWJsZWRcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duSXRlbX1cclxuICAgICAqL1xyXG4gICAgc2V0RGlzYWJsZWQoaXNEaXNhYmxlZCA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGFjdGl2ZSBzdGF0ZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0FjdGl2ZVxyXG4gICAgICogQHJldHVybiB7RHJvcGRvd25JdGVtfVxyXG4gICAgICovXHJcbiAgICBzZXRBY3RpdmUoaXNBY3RpdmUgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gaXNBY3RpdmU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgaXRlbSBpcyBhY3RpdmVcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzQWN0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydCBpdGVtIHRvIHBsYWluIG9iamVjdFxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBpZDogdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICB0eXBlOiAndGFiJyxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuZ2V0VGl0bGUoKSxcclxuICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuX2Rpc2FibGVkLFxyXG4gICAgICAgICAgICBhY3RpdmU6IHRoaXMuX2FjdGl2ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAgICAgICAgaWYgKHVybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQudXJsID0gdXJsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLmdldENvdW50KCk7XHJcbiAgICAgICAgaWYgKGNvdW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jb3VudCA9IGNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsQ29udGVudCA9IHRoaXMuZ2V0VXJsQ29udGVudCgpO1xyXG4gICAgICAgIGlmICh1cmxDb250ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC51cmxDb250ZW50ID0gdXJsQ29udGVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVybENvdW50ID0gdGhpcy5nZXRVcmxDb3VudCgpO1xyXG4gICAgICAgIGlmICh1cmxDb3VudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQudXJsQ291bnQgPSB1cmxDb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVybFdpbmRvdyA9IHRoaXMuZ2V0VXJsV2luZG93KCk7XHJcbiAgICAgICAgaWYgKHVybFdpbmRvdyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQudXJsV2luZG93ID0gdXJsV2luZG93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25JdGVtOyIsImltcG9ydCBBYnN0cmFjdFRhYiAgZnJvbSBcIi4uL3RhYlwiO1xyXG5pbXBvcnQgRHJvcGRvd25JdGVtIGZyb20gXCIuL2Ryb3Bkb3duL2l0ZW1cIjtcclxuXHJcblxyXG5jbGFzcyBIZWxwZXJUYWJEcm9wZG93biBleHRlbmRzIEFic3RyYWN0VGFiIHtcclxuXHJcbiAgICBfaXRlbXMgPSBbXTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGl0bGUpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFRpdGxlKHRpdGxlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgaXRlbSB0byB0aGUgZHJvcGRvd24gbGlzdFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBpZFxyXG4gICAgICogQHJldHVybiB7RHJvcGRvd25JdGVtfVxyXG4gICAgICovXHJcbiAgICBhZGRJdGVtKHRpdGxlLCBpZCA9IG51bGwpIHtcclxuXHJcbiAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBEcm9wZG93bkl0ZW0oaWQsIHRpdGxlKTtcclxuICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBkaXZpZGVyIHRvIHRoZSBkcm9wZG93blxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgYWRkRGl2aWRlcigpIHtcclxuICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgdHlwZTogJ2RpdmlkZXInXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGRyb3Bkb3duIGl0ZW1zXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgZ2V0SXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQsNC60YLQuNCy0L3QvtGB0YLQuCDQtNC70Y8g0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJJZFxyXG4gICAgICovXHJcbiAgICBzZXRBY3RpdmVJdGVtKHRhYklkKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2l0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5nZXRJZCgpID09PSB0YWJJZCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5zZXRBY3RpdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0IGRyb3Bkb3duIHRvIG9iamVjdFxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIudG9PYmplY3QoKTtcclxuICAgICAgICByZXN1bHQudHlwZSAgPSAnZHJvcGRvd24nO1xyXG5cclxuXHJcbiAgICAgICAgcmVzdWx0Lml0ZW1zID0gdGhpcy5faXRlbXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGl0ZW0udG9PYmplY3QgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgICAgID8gaXRlbS50b09iamVjdCgpXHJcbiAgICAgICAgICAgICAgICA6IGl0ZW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWxwZXJUYWJEcm9wZG93bjsiLCJcclxuLyoqXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBIZWxwZXJDb250cm9sQnV0dG9uIHtcclxuXHJcbiAgICBfaWQgPSAnJztcclxuICAgIF9jb250ZW50ID0gJyc7XHJcbiAgICBfb25jbGljayA9ICcnO1xyXG4gICAgX2F0dHIgPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogXCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCJcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgY29udGVudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29udGVudCwgaWQgPSBudWxsKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Q29udGVudChjb250ZW50KTtcclxuICAgICAgICB0aGlzLnNldElkKGlkIHx8IFN0cmluZyhNYXRoLmFicyhNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk1KSkpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0YHQvtC00LXRgNC20LjQvNC+0LPQviDQutC90L7Qv9C60LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcmV0dXJuIHtIZWxwZXJDb250cm9sQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBzZXRDb250ZW50KGNvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0YHQvtC00LXRgNC20LjQvNC+0LPQviDQutC90L7Qv9C60LhcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0Q29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAganMg0YTRg9C90LrRhtC40Lgg0LLRi9C/0L7Qu9C90Y/RjtGJ0LXQudGB0Y8g0L/RgNC4INC60LvQuNC60LVcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb258c3RyaW5nfSBvbmNsaWNrXHJcbiAgICAgKiBAcmV0dXJuIHtIZWxwZXJDb250cm9sQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBzZXRPbkNsaWNrKG9uY2xpY2spIHtcclxuICAgICAgICB0aGlzLl9vbmNsaWNrID0gb25jbGljaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUganMg0YTRg9C90LrRhtC40Lgg0LLRi9C/0L7Qu9C90Y/RjtGJ0LXQudGB0Y8g0L/RgNC4INC60LvQuNC60LVcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0T25DbGljaygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb25jbGljaztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAgSUQg0LrQvtC90YLRgNC+0LvQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKiBAcmV0dXJuIHtIZWxwZXJDb250cm9sQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBzZXRJZChpZCkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINC60L7QvdGC0YDQvtC70LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBtdWx0aXBsZSBhdHRyaWJ1dGVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXR0clxyXG4gICAgICovXHJcbiAgICBzZXRBdHRyKGF0dHIpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cltuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQsNGC0YDQuNCx0YPRgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEF0dHIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRyW25hbWVdIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDQsiDQvtCx0YrQtdC60YJcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdG9PYmplY3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuZ2V0SWQoKSxcclxuICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuZ2V0Q29udGVudCgpLFxyXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmdldE9uQ2xpY2soKSxcclxuICAgICAgICAgICAgYXR0cjogdGhpcy5fYXR0clxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWxwZXJDb250cm9sQnV0dG9uOyIsIlxyXG4vKipcclxuICpcclxuICovXHJcbmNsYXNzIEJ1dHRvbkdyb3VwQnV0dG9uIHtcclxuXHJcbiAgICBfaWQgPSAnJztcclxuICAgIF9jb250ZW50ID0gJyc7XHJcbiAgICBfb25jbGljayA9ICcnO1xyXG4gICAgX2F0dHIgPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvdGB0YLRgNGD0LrRgtC+0YAg0LrQu9Cw0YHRgdCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC60L3QvtC/0LrQuCAo0LXRgdC70Lgg0L3QtSDRg9C60LDQt9Cw0L0sINCx0YPQtNC10YIg0YHQs9C10L3QtdGA0LjRgNC+0LLQsNC9INCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC4KVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpZCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLnNldElkKGlkIHx8IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INC60L3QvtC/0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSDQotC10LrRgdGCINC60L3QvtC/0LrQuFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBCdXR0b259INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0LXQutGD0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC70Y8g0YbQtdC/0L7Rh9C60Lgg0LLRi9C30L7QstC+0LJcclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L7QtNC10YDQttC40LzQvtCz0L4g0LrQvdC+0L/QutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9INCi0LXQutGD0YnQuNC5INGC0LXQutGB0YIg0LrQvdC+0L/QutC4XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC+0LHRgNCw0LHQvtGC0YfQuNC60LAg0LrQu9C40LrQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9uY2xpY2sgLSBKYXZhU2NyaXB0INC60L7QtCDQtNC70Y8g0LLRi9C/0L7Qu9C90LXQvdC40Y8g0L/RgNC4INC60LvQuNC60LVcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwQnV0dG9ufSDQktC+0LfQstGA0LDRidCw0LXRgiDRgtC10LrRg9GJ0LjQuSDRjdC60LfQtdC80L/Qu9GP0YAg0LTQu9GPINGG0LXQv9C+0YfQutC4INCy0YvQt9C+0LLQvtCyXHJcbiAgICAgKi9cclxuICAgIHNldE9uQ2xpY2sob25jbGljaykge1xyXG4gICAgICAgIHRoaXMuX29uY2xpY2sgPSBvbmNsaWNrO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQvtCx0YDQsNCx0L7RgtGH0LjQutCwINC60LvQuNC60LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30g0KLQtdC60YPRidC40Lkg0L7QsdGA0LDQsdC+0YLRh9C40Log0LrQu9C40LrQsFxyXG4gICAgICovXHJcbiAgICBnZXRPbkNsaWNrKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vbmNsaWNrO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINC60L3QvtC/0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0g0J3QvtCy0YvQuSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBCdXR0b259INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0LXQutGD0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC70Y8g0YbQtdC/0L7Rh9C60Lgg0LLRi9C30L7QstC+0LJcclxuICAgICAqL1xyXG4gICAgc2V0SWQoaWQpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINC60L3QvtC/0LrQuFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSDQotC10LrRg9GJ0LjQuSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IG11bHRpcGxlIGF0dHJpYnV0ZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyXHJcbiAgICAgKi9cclxuICAgIHNldEF0dHIoYXR0cikge1xyXG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRyW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPINCw0YLRgNC40LHRg9GC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0QXR0cihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJbbmFtZV0gfHwgbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0LXQvtCx0YDQsNC30L7QstCw0L3QuNC1INC60L3QvtC/0LrQuCDQsiDQvtCx0YrQtdC60YJcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0g0J7QsdGK0LXQutGCINGBINC00LDQvdC90YvQvNC4INC60L3QvtC/0LrQuFxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogdGhpcy5faWQsXHJcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9jb250ZW50LFxyXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLl9vbmNsaWNrLFxyXG4gICAgICAgICAgICBhdHRyOiB0aGlzLl9hdHRyXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXBCdXR0b247XHJcbiIsIlxyXG4vKipcclxuICpcclxuICovXHJcbmNsYXNzIEJ1dHRvbkdyb3VwRHJvcGRvd25MaW5rIHtcclxuXHJcbiAgICBfaWQgPSAnJztcclxuICAgIF9jb250ZW50ID0gJyc7XHJcbiAgICBfbGluayA9ICcnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC90YHRgtGA0YPQutGC0L7RgCDQutC70LDRgdGB0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0YHRgdGL0LvQutC4ICjQtdGB0LvQuCDQvdC1INGD0LrQsNC30LDQvSwg0LHRg9C00LXRgiDRgdCz0LXQvdC10YDQuNGA0L7QstCw0L0g0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60LgpXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlkID0gbnVsbCkge1xyXG5cclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9pZCA9ICdsaW5rLScgKyBEYXRlLm5vdygpLnRvU3RyaW5nKDM2KSArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGA0LAg0YHRgdGL0LvQutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSDQndC+0LLRi9C5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAXHJcbiAgICAgKi9cclxuICAgIHNldElkKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YDQsCDRgdGB0YvQu9C60LhcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30g0KLQtdC60YPRidC40Lkg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YBcclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INGB0YHRi9C70LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSDQotC10LrRgdGCINGB0YHRi9C70LrQuFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBEcm9wZG93bkxpbmt9INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0LXQutGD0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC70Y8g0YbQtdC/0L7Rh9C60Lgg0LLRi9C30L7QstC+0LJcclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L7QtNC10YDQttC40LzQvtCz0L4g0YHRgdGL0LvQutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9INCi0LXQutGD0YnQuNC5INGC0LXQutGB0YIg0YHRgdGL0LvQutC4XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwIFVSTCDRgdGB0YvQu9C60LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gVVJMINCw0LTRgNC10YFcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwRHJvcGRvd25MaW5rfSDQktC+0LfQstGA0LDRidCw0LXRgiDRgtC10LrRg9GJ0LjQuSDRjdC60LfQtdC80L/Qu9GP0YAg0LTQu9GPINGG0LXQv9C+0YfQutC4INCy0YvQt9C+0LLQvtCyXHJcbiAgICAgKi9cclxuICAgIHNldExpbmsobGluaykge1xyXG4gICAgICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBVUkwg0YHRgdGL0LvQutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9INCi0LXQutGD0YnQuNC5IFVSTFxyXG4gICAgICovXHJcbiAgICBnZXRMaW5rKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0YHRgdGL0LvQutC4INCyINC+0LHRitC10LrRglxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSDQntCx0YrQtdC60YIg0YEg0LTQsNC90L3Ri9C80Lgg0YHRgdGL0LvQutC4XHJcbiAgICAgKi9cclxuICAgIHRvT2JqZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLl9pZCxcclxuICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9jb250ZW50LFxyXG4gICAgICAgICAgICBsaW5rOiB0aGlzLl9saW5rXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkdyb3VwRHJvcGRvd25MaW5rOyIsIlxyXG5cclxuLyoqXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBCdXR0b25Hcm91cERyb3Bkb3duQnV0dG9uIHtcclxuXHJcbiAgICBfaWQgICAgICA9ICcnO1xyXG4gICAgX2NvbnRlbnQgPSAnJztcclxuICAgIF9vbmNsaWNrID0gJyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0L3RgdGC0YDRg9C60YLQvtGAINC60LvQsNGB0YHQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutC90L7Qv9C60LggKNC10YHQu9C4INC90LUg0YPQutCw0LfQsNC9LCDQsdGD0LTQtdGCINGB0LPQtdC90LXRgNC40YDQvtCy0LDQvSDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQuClcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQgPSBudWxsKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0SWQoaWQgfHwgJ2J0bi0nICsgRGF0ZS5ub3coKS50b1N0cmluZygzNikgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgNSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINC60L3QvtC/0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0g0J3QvtCy0YvQuSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBEcm9wZG93bkJ1dHRvbn0g0JLQvtC30LLRgNCw0YnQsNC10YIg0YLQtdC60YPRidC40Lkg0Y3QutC30LXQvNC/0LvRj9GAINC00LvRjyDRhtC10L/QvtGH0LrQuCDQstGL0LfQvtCy0L7QslxyXG4gICAgICovXHJcbiAgICBzZXRJZChpZCkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGA0LAg0LrQvdC+0L/QutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9INCi0LXQutGD0YnQuNC5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAXHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0YHQvtC00LXRgNC20LjQvNC+0LPQviDQutC90L7Qv9C60LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IC0g0KLQtdC60YHRgiDQutC90L7Qv9C60LhcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwRHJvcGRvd25CdXR0b259INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0LXQutGD0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC70Y8g0YbQtdC/0L7Rh9C60Lgg0LLRi9C30L7QstC+0LJcclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L7QtNC10YDQttC40LzQvtCz0L4g0LrQvdC+0L/QutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9INCi0LXQutGD0YnQuNC5INGC0LXQutGB0YIg0LrQvdC+0L/QutC4XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC+0LHRgNCw0LHQvtGC0YfQuNC60LAg0LrQu9C40LrQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9uY2xpY2sgLSBKYXZhU2NyaXB0INC60L7QtCDQtNC70Y8g0LLRi9C/0L7Qu9C90LXQvdC40Y8g0L/RgNC4INC60LvQuNC60LVcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwRHJvcGRvd25CdXR0b259INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0LXQutGD0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC70Y8g0YbQtdC/0L7Rh9C60Lgg0LLRi9C30L7QstC+0LJcclxuICAgICAqL1xyXG4gICAgc2V0T25DbGljayhvbmNsaWNrKSB7XHJcbiAgICAgICAgdGhpcy5fb25jbGljayA9IG9uY2xpY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHRgNCw0LHQvtGC0YfQuNC60LAg0LrQu9C40LrQsFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSDQotC10LrRg9GJ0LjQuSDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQutC70LjQutCwXHJcbiAgICAgKi9cclxuICAgIGdldE9uQ2xpY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uY2xpY2s7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDQutC90L7Qv9C60Lgg0LIg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9INCe0LHRitC10LrRgiDRgSDQtNCw0L3QvdGL0LzQuCDQutC90L7Qv9C60LhcclxuICAgICAqL1xyXG4gICAgdG9PYmplY3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxyXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5fY29udGVudCxcclxuICAgICAgICAgICAgb25DbGljazogdGhpcy5fb25jbGlja1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkdyb3VwRHJvcGRvd25CdXR0b247IiwiXHJcbi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgQnV0dG9uR3JvdXBEcm9wZG93bkRpdmlkZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDRgNCw0LfQtNC10LvQuNGC0LXQu9GPINCyINC+0LHRitC10LrRglxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSDQntCx0YrQtdC60YIg0YEg0YLQuNC/0L7QvCDRgNCw0LfQtNC10LvQuNGC0LXQu9GPXHJcbiAgICAgKi9cclxuICAgIHRvT2JqZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkaXZpZGVyJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkdyb3VwRHJvcGRvd25EaXZpZGVyOyIsIlxyXG5pbXBvcnQgQnV0dG9uR3JvdXBEcm9wZG93bkxpbmsgICAgZnJvbSBcIi4vZHJvcGRvd24vbGlua1wiO1xyXG5pbXBvcnQgQnV0dG9uR3JvdXBEcm9wZG93bkJ1dHRvbiAgZnJvbSBcIi4vZHJvcGRvd24vYnV0dG9uXCI7XHJcbmltcG9ydCBCdXR0b25Hcm91cERyb3Bkb3duRGl2aWRlciBmcm9tIFwiLi9kcm9wZG93bi9kaXZpZGVyXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBCdXR0b25Hcm91cERyb3Bkb3duIHtcclxuICAgIHN0YXRpYyBQT1NJVElPTl9TVEFSVCA9ICdzdGFydCc7XHJcbiAgICBzdGF0aWMgUE9TSVRJT05fRU5EICAgPSAnZW5kJztcclxuXHJcblxyXG4gICAgX2lkID0gJyc7XHJcbiAgICBfY29udGVudCA9ICcnO1xyXG4gICAgX3Bvc2l0aW9uID0gQnV0dG9uR3JvdXBEcm9wZG93bi5QT1NJVElPTl9FTkQ7XHJcbiAgICBfaXRlbXMgPSBbXTtcclxuICAgIF9pdGVtSW5kZXggPSAxO1xyXG4gICAgX2F0dHIgPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGlkXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlkID0gbnVsbCkge1xyXG5cclxuICAgICAgICB0aGlzLnNldElkKGlkIHx8IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INC60L3QvtC/0LrQuCDQstGL0L/QsNC00LDRjtGJ0LXQs9C+INC80LXQvdGOXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBEcm9wZG93bn1cclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L7QtNC10YDQttC40LzQvtCz0L4g0LrQvdC+0L/QutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC/0L7Qt9C40YbQuNC4INGA0LDRgdC60YDRi9GC0LjRjyDQvNC10L3RjlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHtCdXR0b25Hcm91cERyb3Bkb3dufVxyXG4gICAgICovXHJcbiAgICBzZXRQb3NpdGlvbihwb3NpdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7Qt9C40YbQuNC4INGA0LDRgdC60YDRi9GC0LjRjyDQvNC10L3RjlxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRQb3NpdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGA0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBEcm9wZG93bn1cclxuICAgICAqL1xyXG4gICAgc2V0SWQoaWQpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGB0YvQu9C60Lgg0LIg0LLRi9C/0LDQtNCw0Y7RidC10LUg0LzQtdC90Y5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGlua1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWRcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwRHJvcGRvd25MaW5rfVxyXG4gICAgICovXHJcbiAgICBhZGRJdGVtTGluayhjb250ZW50LCBsaW5rLCBpZCA9IG51bGwpIHtcclxuXHJcbiAgICAgICAgaWYgKCFpZCkge1xyXG4gICAgICAgICAgICBpZCA9IGBpdGVtJHt0aGlzLl9pdGVtSW5kZXh9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgQnV0dG9uR3JvdXBEcm9wZG93bkxpbmsoaWQpO1xyXG4gICAgICAgIGl0ZW0uc2V0Q29udGVudChjb250ZW50KTtcclxuICAgICAgICBpdGVtLnNldExpbmsobGluayk7XHJcblxyXG4gICAgICAgIHRoaXMuX2l0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgdGhpcy5faXRlbUluZGV4Kys7XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INC60L3QvtC/0LrQuCDQsiDQstGL0L/QsNC00LDRjtGJ0LXQtSDQvNC10L3RjlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGlkXHJcbiAgICAgKiBAcmV0dXJuIHtCdXR0b25Hcm91cERyb3Bkb3duQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBhZGRJdGVtQnV0dG9uKGNvbnRlbnQsIGlkID0gbnVsbCkge1xyXG4gICAgICAgIGlmICghaWQpIHtcclxuICAgICAgICAgICAgaWQgPSBgaXRlbSR7dGhpcy5faXRlbUluZGV4fWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpdGVtID0gbmV3IEJ1dHRvbkdyb3VwRHJvcGRvd25CdXR0b24oaWQpO1xyXG4gICAgICAgIGl0ZW0uc2V0Q29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB0aGlzLl9pdGVtSW5kZXgrKztcclxuXHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YDQsNC30LTQtdC70LjRgtC10LvRjyDQsiDQvNC10L3RjlxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBEcm9wZG93bkRpdmlkZXJ9XHJcbiAgICAgKi9cclxuICAgIGFkZEl0ZW1EaXZpZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgQnV0dG9uR3JvdXBEcm9wZG93bkRpdmlkZXIoKTtcclxuICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1JbmRleCsrO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBtdWx0aXBsZSBhdHRyaWJ1dGVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXR0clxyXG4gICAgICovXHJcbiAgICBzZXRBdHRyKGF0dHIpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cltuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LfQvdCw0YfQtdC90LjRjyDQsNGC0YDQuNCx0YPRgtCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEF0dHIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRyW25hbWVdIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDQsiDQvtCx0YrQtdC60YJcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdG9PYmplY3QoKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9pdGVtcy5tYXAoaXRlbSA9PiBpdGVtLnRvT2JqZWN0KCkpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogdGhpcy5faWQsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuX2NvbnRlbnQsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLl9wb3NpdGlvbixcclxuICAgICAgICAgICAgYXR0cjogdGhpcy5fYXR0cixcclxuICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cERyb3Bkb3duOyIsIi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgQnV0dG9uR3JvdXBMaW5rIHtcclxuXHJcbiAgICBfaWQgPSAnJztcclxuICAgIF9jb250ZW50ID0gJyc7XHJcbiAgICBfbGluayA9ICcnO1xyXG4gICAgX2F0dHIgPSB7fTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0L3RgdGC0YDRg9C60YLQvtGAINC60LvQsNGB0YHQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDRgdGB0YvQu9C60LggKNC10YHQu9C4INC90LUg0YPQutCw0LfQsNC9LCDQsdGD0LTQtdGCINGB0LPQtdC90LXRgNC40YDQvtCy0LDQvSDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQuClcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5zZXRJZChpZCB8fCBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNCwINGB0YHRi9C70LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0g0J3QvtCy0YvQuSDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBMaW5rfSDQktC+0LfQstGA0LDRidCw0LXRgiDRgtC10LrRg9GJ0LjQuSDRjdC60LfQtdC80L/Qu9GP0YAg0LTQu9GPINGG0LXQv9C+0YfQutC4INCy0YvQt9C+0LLQvtCyXHJcbiAgICAgKi9cclxuICAgIHNldElkKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YDQsCDRgdGB0YvQu9C60LhcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30g0KLQtdC60YPRidC40Lkg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YBcclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INGB0YHRi9C70LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSDQotC10LrRgdGCINGB0YHRi9C70LrQuFxyXG4gICAgICogQHJldHVybiB7QnV0dG9uR3JvdXBMaW5rfSDQktC+0LfQstGA0LDRidCw0LXRgiDRgtC10LrRg9GJ0LjQuSDRjdC60LfQtdC80L/Qu9GP0YAg0LTQu9GPINGG0LXQv9C+0YfQutC4INCy0YvQt9C+0LLQvtCyXHJcbiAgICAgKi9cclxuICAgIHNldENvbnRlbnQoY29udGVudCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INGB0YHRi9C70LrQuFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSDQotC10LrRg9GJ0LjQuSDRgtC10LrRgdGCINGB0YHRi9C70LrQuFxyXG4gICAgICovXHJcbiAgICBnZXRDb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCBVUkwg0YHRgdGL0LvQutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGluayAtIFVSTCDQsNC00YDQtdGBXHJcbiAgICAgKiBAcmV0dXJuIHtCdXR0b25Hcm91cExpbmt9INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0LXQutGD0YnQuNC5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC70Y8g0YbQtdC/0L7Rh9C60Lgg0LLRi9C30L7QstC+0LJcclxuICAgICAqL1xyXG4gICAgc2V0TGluayhsaW5rKSB7XHJcbiAgICAgICAgdGhpcy5fbGluayA9IGxpbms7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IFVSTCDRgdGB0YvQu9C60LhcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30g0KLQtdC60YPRidC40LkgVVJMXHJcbiAgICAgKi9cclxuICAgIGdldExpbmsoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbms7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IG11bHRpcGxlIGF0dHJpYnV0ZXNcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyXHJcbiAgICAgKi9cclxuICAgIHNldEF0dHIoYXR0cikge1xyXG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRyW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQt9C90LDRh9C10L3QuNGPINCw0YLRgNC40LHRg9GC0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0QXR0cihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJbbmFtZV0gfHwgbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0LXQvtCx0YDQsNC30L7QstCw0L3QuNC1INGB0YHRi9C70LrQuCDQsiDQvtCx0YrQtdC60YJcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0g0J7QsdGK0LXQutGCINGBINC00LDQvdC90YvQvNC4INGB0YHRi9C70LrQuFxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuX2lkLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGluaycsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuX2NvbnRlbnQsXHJcbiAgICAgICAgICAgIGxpbms6IHRoaXMuX2xpbmssXHJcbiAgICAgICAgICAgIGF0dHI6IHRoaXMuX2F0dHJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cExpbms7IiwiaW1wb3J0IEJ1dHRvbkdyb3VwQnV0dG9uICAgZnJvbSBcIi4vYnV0dG9uR3JvdXAvYnV0dG9uXCI7XHJcbmltcG9ydCBCdXR0b25Hcm91cERyb3Bkb3duIGZyb20gXCIuL2J1dHRvbkdyb3VwL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCBCdXR0b25Hcm91cExpbmsgICAgIGZyb20gXCIuL2J1dHRvbkdyb3VwL2xpbmtcIjtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgSGVscGVyQ29udHJvbEJ1dHRvbkdyb3VwIHtcclxuXHJcbiAgICBfaWQgPSAnJztcclxuICAgIF9idXR0b25zID0gW107XHJcbiAgICBfYnRuSW5kZXggPSAxO1xyXG4gICAgX2F0dHIgPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogXCJidG4tZ3JvdXBcIlxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBpZFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpZCA9IG51bGwpIHtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRJZChpZCB8fCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk2KS50b1N0cmluZygpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAgSUQg0LrQvtC90YLRgNC+0LvQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKi9cclxuICAgIHNldElkKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0LrQvtC90YLRgNC+0LvQsFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YHRgdGL0LvQutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxpbmtcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGlkXHJcbiAgICAgKiBAcmV0dXJuIHtCdXR0b25Hcm91cExpbmt9XHJcbiAgICAgKi9cclxuICAgIGFkZEJ0bkxpbmsoY29udGVudCwgbGluaywgaWQgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKCAhIGlkKSB7XHJcbiAgICAgICAgICAgIGlkID0gYGJ0biR7dGhpcy5fYnRuSW5kZXh9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgQnV0dG9uR3JvdXBMaW5rKGlkKTtcclxuICAgICAgICBpdGVtLnNldENvbnRlbnQoY29udGVudCk7XHJcbiAgICAgICAgaXRlbS5zZXRMaW5rKGxpbmspO1xyXG5cclxuICAgICAgICB0aGlzLl9idXR0b25zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgdGhpcy5fYnRuSW5kZXgrKztcclxuXHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0LrQvdC+0L/QutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWRcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBhZGRCdG5CdXR0b24oY29udGVudCwgaWQgPSBudWxsKSB7XHJcblxyXG4gICAgICAgIGlmICggISBpZCkge1xyXG4gICAgICAgICAgICBpZCA9IGBidG4ke3RoaXMuX2J0bkluZGV4fWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpdGVtID0gbmV3IEJ1dHRvbkdyb3VwQnV0dG9uKGlkKTtcclxuICAgICAgICBpdGVtLnNldENvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2J1dHRvbnMucHVzaChpdGVtKTtcclxuICAgICAgICB0aGlzLl9idG5JbmRleCsrO1xyXG5cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDQstGL0L/QsNC00LDRjtGJ0LXQs9C+INC80LXQvdGOXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWRcclxuICAgICAqIEByZXR1cm4ge0J1dHRvbkdyb3VwRHJvcGRvd259XHJcbiAgICAgKi9cclxuICAgIGFkZEJ0bkRyb3Bkb3duKGNvbnRlbnQsIGlkID0gbnVsbCkge1xyXG5cclxuICAgICAgICBpZiAoICEgaWQpIHtcclxuICAgICAgICAgICAgaWQgPSBgYnRuJHt0aGlzLl9idG5JbmRleH1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBCdXR0b25Hcm91cERyb3Bkb3duKGlkKTtcclxuICAgICAgICBpdGVtLnNldENvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2J1dHRvbnMucHVzaChpdGVtKTtcclxuICAgICAgICB0aGlzLl9idG5JbmRleCsrO1xyXG5cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgbXVsdGlwbGUgYXR0cmlidXRlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJcclxuICAgICAqL1xyXG4gICAgc2V0QXR0cihhdHRyKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LDRgtGA0LjQsdGD0YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRBdHRyKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXR0cltuYW1lXSB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0LIg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRvT2JqZWN0KCkge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLl9idXR0b25zLm1hcChidXR0b24gPT4gYnV0dG9uLnRvT2JqZWN0KCkpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogdGhpcy5nZXRJZCgpLFxyXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uR3JvdXAnLFxyXG4gICAgICAgICAgICBidXR0b25zOiBidXR0b25zLFxyXG4gICAgICAgICAgICBhdHRyOiB0aGlzLl9hdHRyXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVscGVyQ29udHJvbEJ1dHRvbkdyb3VwOyIsIlxyXG5cclxuY2xhc3MgSGVscGVyQ29udHJvbEN1c3RvbSB7XHJcblxyXG4gICAgX2lkID0gJyc7XHJcbiAgICBfY29udGVudCA9ICcnO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IGlkXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnQsIGlkID0gbnVsbCkge1xyXG5cclxuICAgICAgICB0aGlzLnNldENvbnRlbnQoY29udGVudCk7XHJcbiAgICAgICAgdGhpcy5zZXRJZChpZCB8fCBTdHJpbmcoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDI5NDk2NzI5NikpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgY29udHJvbCBJRFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKi9cclxuICAgIHNldElkKGlkKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgY29udHJvbCBJRFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGNvbnRyb2wgY29udGVudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge0hlbHBlckNvbnRyb2xDdXN0b219IFJldHVybnMgc2VsZiBmb3IgbWV0aG9kIGNoYWluaW5nXHJcbiAgICAgKi9cclxuICAgIHNldENvbnRlbnQoY29udGVudCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBjb250cm9sIGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0Q29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0IHRvIHBsYWluIG9iamVjdFxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuZ2V0SWQoKSxcclxuICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuZ2V0Q29udGVudCgpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVscGVyQ29udHJvbEN1c3RvbTsiLCIvKipcclxuICpcclxuICovXHJcbmNsYXNzIERyb3Bkb3duTGluayB7XHJcblxyXG4gICAgX2lkID0gJyc7XHJcbiAgICBfY29udGVudCA9ICcnO1xyXG4gICAgX2xpbmsgPSAnJztcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQgPSBudWxsKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0SWQoaWQgfHwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDI5NDk2NzI5NikudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwIElEINC60L7QvdGC0YDQvtC70LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybiB7RHJvcGRvd25MaW5rfVxyXG4gICAgICovXHJcbiAgICBzZXRJZChpZCkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINC60L7QvdGC0YDQvtC70LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INGB0YHRi9C70LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duTGlua31cclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L7QtNC10YDQttC40LzQvtCz0L4g0YHRgdGL0LvQutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINGB0YHRi9C70LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxpbmtcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duTGlua31cclxuICAgICAqL1xyXG4gICAgc2V0TGluayhsaW5rKSB7XHJcbiAgICAgICAgdGhpcy5fbGluayA9IGxpbms7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0YHRi9C70LrQuFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRMaW5rKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0LIg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRvT2JqZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5nZXRDb250ZW50KCksXHJcbiAgICAgICAgICAgIGxpbms6IHRoaXMuZ2V0TGluaygpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25MaW5rOyIsIi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgRHJvcGRvd25CdXR0b24ge1xyXG5cclxuICAgIF9pZCA9ICcnO1xyXG4gICAgX2NvbnRlbnQgPSAnJztcclxuICAgIF9vbmNsaWNrID0gJyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgICogQHBhcmFtIGlkXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlkID0gbnVsbCkge1xyXG5cclxuICAgICAgICB0aGlzLnNldElkKGlkIHx8IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQyOTQ5NjcyOTYpLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCBJRCDQutC+0L3RgtGA0L7Qu9CwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBzZXRJZChpZCkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINC60L7QvdGC0YDQvtC70LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INC60L3QvtC/0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duQnV0dG9ufVxyXG4gICAgICovXHJcbiAgICBzZXRDb250ZW50KGNvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0YHQvtC00LXRgNC20LjQvNC+0LPQviDQutC90L7Qv9C60LhcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0Q29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAgSmF2YVNjcmlwdC3RhNGD0L3QutGG0LjQuCwg0LLRi9C/0L7Qu9C90Y/RjtGJ0LXQudGB0Y8g0L/RgNC4INC60LvQuNC60LVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvbmNsaWNrXHJcbiAgICAgKiBAcmV0dXJuIHtEcm9wZG93bkJ1dHRvbn1cclxuICAgICAqL1xyXG4gICAgc2V0T25DbGljayhvbmNsaWNrKSB7XHJcbiAgICAgICAgdGhpcy5fb25jbGljayA9IG9uY2xpY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IEphdmFTY3JpcHQt0YTRg9C90LrRhtC40LgsINCy0YvQv9C+0LvQvdGP0Y7RidC10LnRgdGPINC/0YDQuCDQutC70LjQutC1XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldE9uQ2xpY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uY2xpY2s7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDQsiDQvtCx0YrQtdC60YJcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdG9PYmplY3QoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLmdldENvbnRlbnQoKSxcclxuICAgICAgICAgICAgb25DbGljazogdGhpcy5nZXRPbkNsaWNrKClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bkJ1dHRvbjsiLCIvKipcclxuICpcclxuICovXHJcbmNsYXNzIERyb3Bkb3duRGl2aWRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0LXQvtCx0YDQsNC30L7QstCw0L3QuNC1INCyINC+0LHRitC10LrRglxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB0b09iamVjdCgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiAnZGl2aWRlcidcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bkRpdmlkZXI7IiwiXHJcbmltcG9ydCBEcm9wZG93bkxpbmsgICAgZnJvbSAnLi9kcm9wZG93bi9saW5rJztcclxuaW1wb3J0IERyb3Bkb3duQnV0dG9uICBmcm9tICcuL2Ryb3Bkb3duL2J1dHRvbic7XHJcbmltcG9ydCBEcm9wZG93bkRpdmlkZXIgZnJvbSAnLi9kcm9wZG93bi9kaXZpZGVyJztcclxuXHJcblxyXG4vKipcclxuICpcclxuICovXHJcbmNsYXNzIEhlbHBlckNvbnRyb2xEcm9wZG93biB7XHJcblxyXG4gICAgc3RhdGljIFBPU0lUSU9OX1NUQVJUID0gJ3N0YXJ0JztcclxuICAgIHN0YXRpYyBQT1NJVElPTl9FTkQgICA9ICdlbmQnO1xyXG5cclxuICAgIF9pZCAgICAgICA9ICcnO1xyXG4gICAgX2NvbnRlbnQgID0gJyc7XHJcbiAgICBfcG9zaXRpb24gPSAnZW5kJztcclxuICAgIF9pdGVtcyAgICA9IFtdO1xyXG4gICAgX2l0ZW1JbmRleCA9IDE7XHJcbiAgICBfYXR0ciAgICAgPSB7XHJcbiAgICAgICAgJ2NsYXNzJzogXCJidG4gYnRuLXNlY29uZGFyeVwiXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICBAcGFyYW0ge3N0cmluZ30gICAgICBjb250ZW50XHJcbiAgICAgQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29udGVudCwgaWQgPSBudWxsKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Q29udGVudChjb250ZW50KTtcclxuICAgICAgICB0aGlzLnNldElkKGlkIHx8IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQyOTQ5NjcyOTYpLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INC60L3QvtC/0LrQuFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcclxuICAgICAqIEByZXR1cm4ge0hlbHBlckNvbnRyb2xEcm9wZG93bn1cclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INGB0L7QtNC10YDQttC40LzQvtCz0L4g0LrQvdC+0L/QutC4XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC/0L7Qt9C40YbQuNC4INGA0LDRgdC60YDRi9Cy0LDRjtGJ0LXQs9C+0YHRjyDRgdC/0LjRgdC60LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvblxyXG4gICAgICogQHJldHVybiB7SGVscGVyQ29udHJvbERyb3Bkb3dufVxyXG4gICAgICovXHJcbiAgICBzZXRQb3NpdGlvbihwb3NpdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0L7Qt9C40YbQuNC4INGA0LDRgdC60YDRi9Cy0LDRjtGJ0LXQs9C+0YHRjyDRgdC/0LjRgdC60LBcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCBJRCDQutC+0L3RgtGA0L7Qu9CwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqIEByZXR1cm4ge0hlbHBlckNvbnRyb2xEcm9wZG93bn1cclxuICAgICAqL1xyXG4gICAgc2V0SWQoaWQpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBJRCDQutC+0L3RgtGA0L7Qu9CwXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDRgdGB0YvQu9C60LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGlua1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWRcclxuICAgICAqIEByZXR1cm4ge0Ryb3Bkb3duTGlua31cclxuICAgICAqL1xyXG4gICAgYWRkSXRlbUxpbmsoY29udGVudCwgbGluaywgaWQgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKCFpZCkge1xyXG4gICAgICAgICAgICBpZCA9IGBpdGVtJHt0aGlzLl9pdGVtSW5kZXh9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgRHJvcGRvd25MaW5rKGlkKTtcclxuICAgICAgICBpdGVtLnNldENvbnRlbnQoY29udGVudCk7XHJcbiAgICAgICAgaXRlbS5zZXRMaW5rKGxpbmspO1xyXG5cclxuICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1JbmRleCsrO1xyXG5cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQlNC+0LHQsNCy0LvQtdC90LjQtSDQutC90L7Qv9C60LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBpZFxyXG4gICAgICogQHJldHVybiB7RHJvcGRvd25CdXR0b259XHJcbiAgICAgKi9cclxuICAgIGFkZEl0ZW1CdXR0b24oY29udGVudCwgaWQgPSBudWxsKSB7XHJcblxyXG4gICAgICAgIGlmICggISBpZCkge1xyXG4gICAgICAgICAgICBpZCA9IGBpdGVtJHt0aGlzLl9pdGVtSW5kZXh9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgRHJvcGRvd25CdXR0b24oaWQpO1xyXG4gICAgICAgIGl0ZW0uc2V0Q29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB0aGlzLl9pdGVtSW5kZXgrKztcclxuXHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YDQsNC30LTQtdC70LjRgtC10LvRj1xyXG4gICAgICogQHJldHVybiB7RHJvcGRvd25EaXZpZGVyfVxyXG4gICAgICovXHJcbiAgICBhZGRJdGVtRGl2aWRlcigpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gbmV3IERyb3Bkb3duRGl2aWRlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHRoaXMuX2l0ZW1JbmRleCsrO1xyXG5cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgbXVsdGlwbGUgYXR0cmlidXRlc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJcclxuICAgICAqL1xyXG4gICAgc2V0QXR0cihhdHRyKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0LDRgtGA0LjQsdGD0YLQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICBnZXRBdHRyKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXR0cltuYW1lXSB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0LIg0L7QsdGK0LXQutGCXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRvT2JqZWN0KCkge1xyXG5cclxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2l0ZW1zLm1hcChpdGVtID0+IGl0ZW0udG9PYmplY3QoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuZ2V0Q29udGVudCgpLFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICBhdHRyOiB0aGlzLl9hdHRyLFxyXG4gICAgICAgICAgICBpdGVtczogaXRlbXNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWxwZXJDb250cm9sRHJvcGRvd247IiwiXHJcbmNsYXNzIEhlbHBlckNvbnRyb2xMaW5rIHtcclxuXHJcbiAgICBfaWQgICAgICA9ICcnO1xyXG4gICAgX2hyZWYgICAgPSAnJztcclxuICAgIF9jb250ZW50ID0gJyc7XHJcbiAgICBfb25jbGljayA9ICcnO1xyXG4gICAgX2F0dHIgICAgPSB7fTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICBocmVmXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBpZFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50LCBocmVmLCBpZCA9IG51bGwpIHtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRDb250ZW50KGNvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMuc2V0SHJlZihocmVmKTtcclxuICAgICAgICB0aGlzLnNldElkKGlkIHx8IFN0cmluZyhNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk2KSkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBsaW5rIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XHJcbiAgICAgKiBAcmV0dXJuIHtIZWxwZXJDb250cm9sTGlua31cclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGxpbmsgY29udGVudFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRDb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBocmVmIFVSTFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcclxuICAgICAqIEByZXR1cm4ge0hlbHBlckNvbnRyb2xMaW5rfVxyXG4gICAgICovXHJcbiAgICBzZXRIcmVmKGhyZWYpIHtcclxuICAgICAgICB0aGlzLl9ocmVmID0gaHJlZjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgaHJlZiBVUkxcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SHJlZigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHJlZjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgb25DbGljayBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmNsaWNrXHJcbiAgICAgKiBAcmV0dXJuIHtIZWxwZXJDb250cm9sTGlua31cclxuICAgICAqL1xyXG4gICAgc2V0T25DbGljayhvbmNsaWNrKSB7XHJcbiAgICAgICAgdGhpcy5fb25jbGljayA9IG9uY2xpY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IG9uQ2xpY2sgaGFuZGxlclxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259XHJcbiAgICAgKi9cclxuICAgIGdldE9uQ2xpY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uY2xpY2s7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGNvbnRyb2wgSURcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICovXHJcbiAgICBzZXRJZChpZCkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGNvbnRyb2wgSURcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBtdWx0aXBsZSBhdHRyaWJ1dGVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXR0clxyXG4gICAgICovXHJcbiAgICBzZXRBdHRyKGF0dHIpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cikpIHtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cltuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXR0cmlidXRlIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldEF0dHIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRyW25hbWVdIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydCB0byBwbGFpbiBvYmplY3RcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdG9PYmplY3QoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmdldElkKCksXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5nZXRDb250ZW50KCksXHJcbiAgICAgICAgICAgIGhyZWY6IHRoaXMuZ2V0SHJlZigpLFxyXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmdldE9uQ2xpY2soKSxcclxuICAgICAgICAgICAgYXR0cjogdGhpcy5fYXR0clxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlbHBlckNvbnRyb2xMaW5rOyIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuaW1wb3J0IFBhbmVsVXRpbHMgICAgZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCBQYW5lbFByaXZhdGUgIGZyb20gJy4vcHJpdmF0ZSc7XHJcbmltcG9ydCBUcGwgICAgICAgICAgIGZyb20gJy4vdHBsJztcclxuaW1wb3J0IFBhbmVsRWxlbWVudHMgZnJvbSAnLi9lbGVtZW50cyc7XHJcbmltcG9ydCBDb250cm9sbGVyICAgIGZyb20gXCIuL2NvbnRyb2xsZXJcIjtcclxuaW1wb3J0IFV0aWxzICAgICAgICAgZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmltcG9ydCBIZWxwZXJUYWIgICAgICAgICBmcm9tIFwiLi9oZWxwZXJzL3RhYnMvdGFiXCI7XHJcbmltcG9ydCBIZWxwZXJUYWJEcm9wZG93biBmcm9tIFwiLi9oZWxwZXJzL3RhYnMvZHJvcGRvd25cIjtcclxuXHJcbmltcG9ydCBIZWxwZXJDb250cm9sQnV0dG9uICAgICAgZnJvbSBcIi4vaGVscGVycy9jb250cm9scy9idXR0b25cIjtcclxuaW1wb3J0IEhlbHBlckNvbnRyb2xCdXR0b25Hcm91cCBmcm9tIFwiLi9oZWxwZXJzL2NvbnRyb2xzL2J1dHRvbkdyb3VwXCI7XHJcbmltcG9ydCBIZWxwZXJDb250cm9sQ3VzdG9tICAgICAgZnJvbSBcIi4vaGVscGVycy9jb250cm9scy9jdXN0b21cIjtcclxuaW1wb3J0IEhlbHBlckNvbnRyb2xEcm9wZG93biAgICBmcm9tIFwiLi9oZWxwZXJzL2NvbnRyb2xzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCBIZWxwZXJDb250cm9sTGluayAgICAgICAgZnJvbSBcIi4vaGVscGVycy9jb250cm9scy9saW5rXCI7XHJcblxyXG5cclxuY2xhc3MgUGFuZWwge1xyXG5cclxuICAgIF9vcHRpb25zID0ge1xyXG4gICAgICAgIGlkOiAnJyxcclxuICAgICAgICBsYW5nOiAnZW4nLFxyXG4gICAgICAgIGxhbmdMaXN0OiB7fSxcclxuICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICBzdWJ0aXRsZTogbnVsbCxcclxuICAgICAgICBjb250cm9sczogW10sXHJcbiAgICAgICAgY29udGVudEZpdDogbnVsbCxcclxuICAgICAgICBjb250ZW50OiBudWxsLFxyXG4gICAgICAgIGNvbnRlbnRVcmw6IG51bGwsXHJcbiAgICAgICAgd3JhcHBlclR5cGU6ICdjYXJkJyxcclxuICAgICAgICB0YWJzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICd0YWJzJywgICAgICAgICAvLyBwaWxscywgdW5kZXJsaW5lXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWxlZnQnLCAvLyB0b3AtY2VudGVyLCB0b3AtcmlnaHQsIGxlZnQsIHJpZ2h0XHJcbiAgICAgICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgICAgIGZpbGw6ICcnLCAvLyBmaWxsLCBqdXN0aWZ5XHJcbiAgICAgICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfaWQgPSAnJztcclxuICAgIF90YWJzID0gW107XHJcbiAgICBfY29udHJvbHMgPSBbXTtcclxuICAgIF9ldmVudHMgPSB7fTtcclxuICAgIF9jb250cm9sbGVyID0gbnVsbDtcclxuXHJcblxyXG4gICAgY29udHJvbHMgPSB7XHJcbiAgICAgICAgYnV0dG9uIDogICAgICBmdW5jdGlvbiAoY29udGVudCwgaWQgPSBudWxsKSAgICAgICB7IHJldHVybiBuZXcgSGVscGVyQ29udHJvbEJ1dHRvbihjb250ZW50LCBpZCk7IH0sXHJcbiAgICAgICAgYnV0dG9uR3JvdXAgOiBmdW5jdGlvbiAoaWQgPSBudWxsKSAgICAgICAgICAgICAgICB7IHJldHVybiBuZXcgSGVscGVyQ29udHJvbEJ1dHRvbkdyb3VwKGlkKTsgfSxcclxuICAgICAgICBjdXN0b20gOiAgICAgIGZ1bmN0aW9uIChjb250ZW50LCBpZCA9IG51bGwpICAgICAgIHsgcmV0dXJuIG5ldyBIZWxwZXJDb250cm9sQ3VzdG9tKGNvbnRlbnQsIGlkKTsgfSxcclxuICAgICAgICBkcm9wZG93biA6ICAgIGZ1bmN0aW9uIChjb250ZW50LCBpZCA9IG51bGwpICAgICAgIHsgcmV0dXJuIG5ldyBIZWxwZXJDb250cm9sRHJvcGRvd24oY29udGVudCwgaWQpOyB9LFxyXG4gICAgICAgIGxpbmsgOiAgICAgICAgZnVuY3Rpb24gKGNvbnRlbnQsIGxpbmssIGlkID0gbnVsbCkgeyByZXR1cm4gbmV3IEhlbHBlckNvbnRyb2xMaW5rKGNvbnRlbnQsIGxpbmssIGlkKTsgfSxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbGxlciA9IENvbnRyb2xsZXI7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBVdGlscy5pc09iamVjdChvcHRpb25zKSA/IG9wdGlvbnMgOiB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogUGFuZWxVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5XHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHMoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy5vbigndGFiX2NsaWNrJywgZnVuY3Rpb24gKHByb3ApIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBvcHRpb25zICAgID0gcHJvcC50YWIuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICBsZXQgdXJsQ29udGVudCA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3VybENvbnRlbnQnKSAmJiB0eXBlb2Ygb3B0aW9ucy51cmxDb250ZW50ID09ICdzdHJpbmcnICYmIG9wdGlvbnMudXJsQ29udGVudFxyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnVybENvbnRlbnRcclxuICAgICAgICAgICAgICAgIDogJyMnO1xyXG5cclxuICAgICAgICAgICAgaWYgKHVybENvbnRlbnQgJiYgdXJsQ29udGVudCAhPT0gJyMnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmxvYWRDb250ZW50KHVybENvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IHVybFdpbmRvdyA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3VybFdpbmRvdycpICYmIHR5cGVvZiBvcHRpb25zLnVybFdpbmRvdyA9PSAnc3RyaW5nJyAmJiBvcHRpb25zLnVybFdpbmRvd1xyXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnVybFdpbmRvd1xyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHVybFdpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgcGF0aDp1cmxXaW5kb3cgfSwgJycsIHVybFdpbmRvdyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGF0Ll90YWJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIFBhbmVsUHJpdmF0ZS50cmlnZ2VyKHRoaXMsICd0YWJfYWN0aXZlJywgdGhhdCwgW3Byb3BdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBQYW5lbFByaXZhdGUudHJpZ2dlcih0aGlzLCAncGFuZWxfc2hvdycpO1xyXG5cclxuICAgICAgICBpZiAodGhhdC5fdGFicy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIFBhbmVsUHJpdmF0ZS50cmlnZ2VyKHRoaXMsICd0YWJfYWN0aXZlJywgdGhhdCwgW3tcclxuICAgICAgICAgICAgICAgIHRhYjogdGhhdC5nZXRUYWJBY3RpdmUoKVxyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jb250ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIFBhbmVsUHJpdmF0ZS50cmlnZ2VyKHRoaXMsICdjb250ZW50X3Nob3cnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGA0LBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7Qv9GG0LjQuVxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9ucygpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQkdC70L7QutC40YDQvtCy0LrQsCDQv9Cw0L3QtdC70LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XHJcbiAgICAgKi9cclxuICAgIGxvY2sodGV4dCkge1xyXG5cclxuICAgICAgICBsZXQgY29udGFpbmVyID0gUGFuZWxFbGVtZW50cy5nZXRQYW5lbCh0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICBpZiAoY29udGFpbmVyWzBdICYmICEgY29udGFpbmVyLmZpbmQoJy5jb3JldWktcGFuZWwtbG9jaycpWzBdKSB7XHJcbiAgICAgICAgICAgIGxldCBodG1sID0gZWpzLnJlbmRlcihUcGxbJ2xvYWRlci5odG1sJ10sIHtcclxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJyA/IHRleHQgOiB0aGlzLmdldExhbmcoKS5sb2FkaW5nXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29udGFpbmVyLnByZXBlbmQoaHRtbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCg0LDQt9Cx0LvQvtC60LjRgNC+0LLQutCwINC/0LDQvdC10LvQuFxyXG4gICAgICovXHJcbiAgICB1bmxvY2soKSB7XHJcblxyXG4gICAgICAgIFBhbmVsRWxlbWVudHMuZ2V0TG9jayh0aGlzLmdldElkKCkpLmhpZGUoNTAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCX0LDQs9GA0YPQt9C60LAg0LTQsNC90L3Ri9GFINC4INGD0YHRgtCw0L3QvtCy0LrQsCDQuNGFINCyINC/0LDQvdC10LvRjFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgdXJsXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSB1cmxXaW5kb3dcclxuICAgICAqL1xyXG4gICAgbG9hZENvbnRlbnQodXJsLCB1cmxXaW5kb3cpIHtcclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICB0aGlzLmxvY2soKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB1cmxXaW5kb3cgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7IHBhdGg6dXJsV2luZG93IH0sICcnLCB1cmxXaW5kb3cpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikge1xyXG4gICAgICAgICAgICAgICAgUGFuZWxQcml2YXRlLnRyaWdnZXIodGhhdCwgJ2xvYWRfc3RhcnQnLCB0aGF0LCBbIHt4aHI6IHhocn0gXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIFBhbmVsUHJpdmF0ZS50cmlnZ2VyKHRoYXQsICdsb2FkX3N1Y2Nlc3MnLCB0aGF0LCBbIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfSBdKTtcclxuICAgICAgICAgICAgICAgIHRoYXQuc2V0Q29udGVudChyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xyXG4gICAgICAgICAgICAgICAgUGFuZWxQcml2YXRlLnRyaWdnZXIodGhhdCwgJ2xvYWRfZXJyb3InLCB0aGF0LCBbe1xyXG4gICAgICAgICAgICAgICAgICAgIHhociA6IHhocixcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0U3RhdHVzOiB0ZXh0U3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGhyb3duOiBlcnJvclRocm93blxyXG4gICAgICAgICAgICAgICAgfSBdKTtcclxuICAgICAgICAgICAgICAgIHRoYXQuc2V0Q29udGVudCgnJyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbih4aHIsIHRleHRTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQudW5sb2NrKCk7XHJcbiAgICAgICAgICAgICAgICBQYW5lbFByaXZhdGUudHJpZ2dlcih0aGF0LCAnbG9hZF9lbmQnLCB0aGF0LCBbe1xyXG4gICAgICAgICAgICAgICAgICAgIHhocjogeGhyLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRTdGF0dXM6IHRleHRTdGF0dXNcclxuICAgICAgICAgICAgICAgIH0gXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LXRgNC10LLQvtC00L7QsiDRgtC10LrRg9GJ0LXQs9C+INGP0LfRi9C60LBcclxuICAgICAqIEByZXR1cm4ge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0TGFuZygpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zLmxhbmdMaXN0KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0LfQsNCz0L7Qu9C+0LLQutCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJ0aXRsZVxyXG4gICAgICovXHJcbiAgICBzZXRUaXRsZSh0aXRsZSwgc3VidGl0bGUpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy50aXRsZSAgICA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc3VidGl0bGUgPSBzdWJ0aXRsZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0L/RgNCw0LLQuNC70LAg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L7QsdC10YDRgtC60Lgg0LIg0L/QsNC90LXQu9C4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gd3JhcHBlclR5cGVcclxuICAgICAqL1xyXG4gICAgc2V0V3JhcHBlclR5cGUod3JhcHBlclR5cGUpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy53cmFwcGVyVHlwZSA9IHdyYXBwZXJUeXBlXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNCw0LLQuNC70L4g0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L/QsNC90LXQu9C4INC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQtdC1INGB0L7QtNC10YDQttC40LzQvtCz0L5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50Rml0XHJcbiAgICAgKi9cclxuICAgIHNldENvbnRlbnRGaXQoY29udGVudEZpdCkge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmNvbnRlbnRGaXQgPSBjb250ZW50Rml0XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINCy0LjQtNCwINGC0LDQsdC+0LJcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXHJcbiAgICAgKi9cclxuICAgIHNldFRhYlR5cGUodHlwZSkge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMudHlwZSA9IHR5cGVcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0YHQvtGB0YLQvtGP0L3QuNGPINGC0LDQsdC+0LJcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxsXHJcbiAgICAgKi9cclxuICAgIHNldFRhYkZpbGwoZmlsbCkge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMuZmlsbCA9IGZpbGxcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQo9GB0YLQsNC90L7QstC60LAg0L/QvtC70L7QttC10L3QuNGPINGC0LDQsdC+0LJcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBzZXRUYWJQb3NpdGlvbihwb3NpdGlvbikge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMucG9zaXRpb24gPSBwb3NpdGlvblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRiNC40YDQuNC90Ysg0YLQsNCx0L7QslxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHdpZHRoXHJcbiAgICAgKi9cclxuICAgIHNldFRhYnNXaWR0aCh3aWR0aCkge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMud2lkdGggPSB3aWR0aFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRiNC40YDQuNC90Ysg0YLQsNCx0L7QslxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYklkXHJcbiAgICAgKi9cclxuICAgIHNldFRhYkFjdGl2ZSh0YWJJZCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy50YWJzICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGFicy5pdGVtcyAmJlxyXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMudGFicy5pdGVtcylcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IGlzQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMuaXRlbXMubWFwKGZ1bmN0aW9uICh0YWIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWIuY29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YWIuc2V0QWN0aXZlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiLmdldElkKCkgPT09IHRhYklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiLnNldEFjdGl2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YWIuZ2V0SXRlbXMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYi5nZXRJdGVtcygpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmdldElkKCkgPT09IHRhYklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0QWN0aXZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChQYW5lbFV0aWxzLmlzT2JqZWN0KHRhYikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYi5faWQgPT09IHRhYklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWIuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCU0L7QsdCw0LLQu9C10L3QuNC1INGC0LDQsdCwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG4gICAgICogQHJldHVybiB7SGVscGVyVGFifVxyXG4gICAgICovXHJcbiAgICBhZGRUYWIoaWQsIHRpdGxlLCB1cmwpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYiA9IG5ldyBIZWxwZXJUYWIoaWQpO1xyXG5cclxuICAgICAgICBpZiAodGl0bGUpIHtcclxuICAgICAgICAgICAgdGFiLnNldFRpdGxlKHRpdGxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgdGFiLnNldFVybCh1cmwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMudGFicykge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMudGFicy5pdGVtcykge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMuaXRlbXMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMudGFicy5pdGVtcy5wdXNoKHRhYik7XHJcblxyXG4gICAgICAgIHJldHVybiB0YWI7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JTQvtCx0LDQstC70LXQvdC40LUg0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZVxyXG4gICAgICogQHJldHVybiBIZWxwZXJUYWJEcm9wZG93blxyXG4gICAgICovXHJcbiAgICBhZGRUYWJEcm9wZG93bih0aXRsZSkge1xyXG5cclxuICAgICAgICBsZXQgZHJvcGRvd24gPSBuZXcgSGVscGVyVGFiRHJvcGRvd24odGl0bGUpO1xyXG5cclxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy50YWJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGFicyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoICEgdGhpcy5fb3B0aW9ucy50YWJzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGFicy5pdGVtcyA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy50YWJzLml0ZW1zLnB1c2goZHJvcGRvd24pO1xyXG5cclxuICAgICAgICByZXR1cm4gZHJvcGRvd247XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINGN0LvQtdC80LXQvdGC0L7QsiDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29udHJvbHNcclxuICAgICAqL1xyXG4gICAgYWRkQ29udHJvbHMoY29udHJvbHMpIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIEFycmF5LmlzQXJyYXkoY29udHJvbHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KHRoaXMuX29wdGlvbnMuY29udHJvbHMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuY29udHJvbHMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGNvbnRyb2xzLm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2wgJiYgY29udHJvbC5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wuY29uc3RydWN0b3IubmFtZSAmJiB0eXBlb2YgY29udHJvbC50b09iamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX29wdGlvbnMuY29udHJvbHMucHVzaChjb250cm9sLnRvT2JqZWN0KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChQYW5lbFV0aWxzLmlzT2JqZWN0KGNvbnRyb2wpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Ll9vcHRpb25zLmNvbnRyb2xzLnB1c2goY29udHJvbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7QsdGK0LXQutGC0LAg0YLQsNCx0LAg0L/QviBpZFxyXG4gICAgICogQHBhcmFtIHRhYklkXHJcbiAgICAgKi9cclxuICAgIGdldFRhYkJ5SWQodGFiSWQpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYnMubWFwKGZ1bmN0aW9uICh0YWIpIHtcclxuICAgICAgICAgICAgaWYgKHRhYi5oYXNPd25Qcm9wZXJ0eSgnZ2V0SWQnKSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRhYi5nZXRJZCA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgdGFiLmdldElkKCkgPT09IHRhYklkXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGFiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC+0LHRitC10LrRgtCwINCw0LrRgtC40LLQvdC+0LPQviDRgtCw0LHQsFxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldFRhYkFjdGl2ZSgpIHtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYnMubWFwKGZ1bmN0aW9uICh0YWIpIHtcclxuICAgICAgICAgICAgaWYgKHRhYi5pc0FjdGl2ZSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRhYi5pc0FjdGl2ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgdGFiLmlzQWN0aXZlKClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0YWI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUg0L7QsdGK0LXQutGC0LAg0LrQvtC90YLRgNC+0LvQsCDQv9C+INC10LPQviBpZFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXHJcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRyb2xCeUlkKGlkKSB7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250cm9scy5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2wuZ2V0SWQgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb250cm9sLmdldElkID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICBjb250cm9sLmdldElkKCkgPT09IGlkXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udHJvbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INC00LvRjyDQutC+0L3RgtC10LnQvdC10YDQsFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG4gICAgICovXHJcbiAgICBzZXRDb250ZW50VXJsKHVybCkge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zLmNvbnRlbnRVcmwgPSB1cmxcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQoNCw0LfQvNC10YnQtdC90LjQtSDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+INCy0L3Rg9GC0YDQuCDQv9Cw0L3QtdC70LhcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdHxBcnJheX0gY29udGVudFxyXG4gICAgICovXHJcbiAgICBzZXRDb250ZW50KGNvbnRlbnQpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IFBhbmVsRWxlbWVudHMuZ2V0Q29udGVudCh0aGlzLmdldElkKCkpO1xyXG5cclxuICAgICAgICBpZiAoY29udGFpbmVyWzBdKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250ZW50cyAgPSBQYW5lbFByaXZhdGUucmVuZGVyQ29udGVudHModGhpcywgY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICBjb250YWluZXIuaHRtbCgnJyk7XHJcblxyXG4gICAgICAgICAgICBjb250ZW50cy5tYXAoZnVuY3Rpb24gKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoY29udGVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgUGFuZWxQcml2YXRlLnRyaWdnZXIodGhpcywgJ2NvbnRlbnRfc2hvdycpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICovXHJcbiAgICByZW5kZXIoZWxlbWVudCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICAgICAgID0gdGhpcztcclxuICAgICAgICBsZXQgdGFic0NvbnRlbnQgID0gbnVsbDtcclxuICAgICAgICBsZXQgdGFic1Bvc2l0aW9uID0gJ3RvcC1sZWZ0JztcclxuICAgICAgICBsZXQgdGFic1dpZHRoICAgID0gJzIwMHB4JztcclxuICAgICAgICBsZXQgZml0Q29udGVudCAgID0gJyc7XHJcbiAgICAgICAgbGV0IHdyYXBwZXJUeXBlICA9ICcnO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhbmcnKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmxhbmcgPSB0aGlzLl9jb250cm9sbGVyLmdldFNldHRpbmcoJ2xhbmcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsYW5nTGlzdCA9IHRoaXMuX2NvbnRyb2xsZXIubGFuZy5oYXNPd25Qcm9wZXJ0eSh0aGlzLl9vcHRpb25zLmxhbmcpXHJcbiAgICAgICAgICAgID8gdGhpcy5fY29udHJvbGxlci5sYW5nW3RoaXMuX29wdGlvbnMubGFuZ11cclxuICAgICAgICAgICAgOiB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5sYW5nTGlzdCA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2xhbmdMaXN0JykgJiYgUGFuZWxVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmxhbmdMaXN0KVxyXG4gICAgICAgICAgICA/ICQuZXh0ZW5kKHRydWUsIHt9LCBsYW5nTGlzdCwgdGhpcy5fb3B0aW9ucy5sYW5nTGlzdClcclxuICAgICAgICAgICAgOiBsYW5nTGlzdDtcclxuXHJcblxyXG4gICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60L7QvdGC0YDQvtC70L7QslxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdjb250cm9scycpICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5jb250cm9scykgJiZcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5jb250cm9scy5sZW5ndGggPiAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIFBhbmVsUHJpdmF0ZS5pbml0Q29udHJvbHModGhpcywgdGhpcy5fb3B0aW9ucy5jb250cm9scyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgtCw0LHQvtCyXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3RhYnMnKSAmJlxyXG4gICAgICAgICAgICBQYW5lbFV0aWxzLmlzT2JqZWN0KHRoaXMuX29wdGlvbnMudGFicykgJiZcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy50YWJzLmhhc093blByb3BlcnR5KCdpdGVtcycpICYmXHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy50YWJzLml0ZW1zKSAmJlxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMuaXRlbXMubGVuZ3RoID4gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBQYW5lbFByaXZhdGUuaW5pdFRhYnModGhpcywgdGhpcy5fb3B0aW9ucy50YWJzLml0ZW1zKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGFicycpICYmXHJcbiAgICAgICAgICAgIFBhbmVsVXRpbHMuaXNPYmplY3QodGhpcy5fb3B0aW9ucy50YWJzKSAmJlxyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRhYnMuaGFzT3duUHJvcGVydHkoJ2l0ZW1zJykgJiZcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLnRhYnMuaXRlbXMpICYmXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGFicy5pdGVtcy5sZW5ndGggPiAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRhYnNDb250ZW50ID0gUGFuZWxQcml2YXRlLnJlbmRlclRhYnModGhpcywgdGhpcy5fb3B0aW9ucy50YWJzKTtcclxuXHJcbiAgICAgICAgICAgIHRhYnNQb3NpdGlvbiA9IHRoaXMuX29wdGlvbnMudGFicy5oYXNPd25Qcm9wZXJ0eSgncG9zaXRpb24nKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy50YWJzLnBvc2l0aW9uID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLnRhYnMucG9zaXRpb25cclxuICAgICAgICAgICAgICAgIDogJ3RvcC1sZWZ0JztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLnRhYnMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykgJiZcclxuICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHRoaXMuX29wdGlvbnMudGFicy53aWR0aCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGFicy53aWR0aFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGxldCB1bml0ICA9IHR5cGVvZiB0aGlzLl9vcHRpb25zLnRhYnMud2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnO1xyXG4gICAgICAgICAgICAgICAgdGFic1dpZHRoID0gdGhpcy5fb3B0aW9ucy50YWJzLndpZHRoICsgdW5pdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdjb250ZW50Rml0JykgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMuY29udGVudEZpdCA9PT0gJ3N0cmluZydcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9vcHRpb25zLmNvbnRlbnRGaXQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpdCc6IGZpdENvbnRlbnQgPSAnIGNvcmV1aS1wYW5lbF9fY29udGVudC1maXQnOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbic6IGZpdENvbnRlbnQgPSAnIGNvcmV1aS1wYW5lbF9fY29udGVudC1taW4nOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21heCc6IGZpdENvbnRlbnQgPSAnIGNvcmV1aS1wYW5lbF9fY29udGVudC1tYXgnOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3dyYXBwZXJUeXBlJykgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuX29wdGlvbnMud3JhcHBlclR5cGUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLndyYXBwZXJUeXBlID09PSAnY2FyZCcpIHtcclxuICAgICAgICAgICAgICAgIHdyYXBwZXJUeXBlID0gJyBjYXJkIHNoYWRvdy1zbSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwYW5lbEVsZW1lbnQgPSAkKFxyXG4gICAgICAgICAgICBlanMucmVuZGVyKFRwbFsnY29udGFpbmVyLmh0bWwnXSwge1xyXG4gICAgICAgICAgICAgICAgaXNzZXRDb250cm9sczogISEgdGhpcy5fY29udHJvbHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuZ2V0SWQoKSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLl9vcHRpb25zLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgc3VidGl0bGU6IHRoaXMuX29wdGlvbnMuc3VidGl0bGUsXHJcbiAgICAgICAgICAgICAgICBmaXQ6IGZpdENvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyVHlwZTogd3JhcHBlclR5cGUsXHJcbiAgICAgICAgICAgICAgICB0YWJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGFic0NvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRhYnNQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGFic1dpZHRoLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRyb2xzLm1hcChmdW5jdGlvbiAoY29udHJvbCkge1xyXG4gICAgICAgICAgICBwYW5lbEVsZW1lbnQuZmluZCgnLmNvcmV1aS1wYW5lbC1jb250cm9scycpLmFwcGVuZChcclxuICAgICAgICAgICAgICAgIFBhbmVsUHJpdmF0ZS5yZW5kZXJDb250cm9sKHRoYXQsIGNvbnRyb2wpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5jb250ZW50VXJsKSB7XHJcbiAgICAgICAgICAgIHRoaXMub24oJ3BhbmVsX3Nob3cnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQubG9hZENvbnRlbnQodGhpcy5fb3B0aW9ucy5jb250ZW50VXJsKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCByZW5kZXJDb250ZW50cyA9IFBhbmVsUHJpdmF0ZS5yZW5kZXJDb250ZW50cyh0aGlzLCB0aGlzLl9vcHRpb25zLmNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyQ29udGVudHMubWFwKGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBwYW5lbEVsZW1lbnQuZmluZCgnLmNvcmV1aS1wYW5lbC1jb250ZW50JykuYXBwZW5kKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhbmVsRWxlbWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERvbSBlbGVtZW50XHJcbiAgICAgICAgbGV0IGRvbUVsZW1lbnQgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgZG9tRWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZG9tRWxlbWVudCkge1xyXG4gICAgICAgICAgICAkKGRvbUVsZW1lbnQpLmh0bWwocGFuZWxFbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5pbml0RXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC+0LHRi9GC0LjRjyDQutC+0YLQvtGA0L7QtSDQsdGD0LTQtdGCINCy0YvQv9C+0LvQvdGP0YLRjNGB0Y8g0L/RgNC4INGB0LzQtdC90LUg0YLQsNCx0LBcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIG9uVGFiQWN0aXZlKGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5vbigndGFiX2FjdGl2ZScsIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KDQtdCz0LjRgdGC0YDQsNGG0LjRjyDRhNGD0L3QutGG0LjQuCDQvdCwINGB0L7QsdGL0YLQuNC1XHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSBjb250ZXh0XHJcbiAgICAgKi9cclxuICAgIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0ucHVzaCh7XHJcbiAgICAgICAgICAgIGNvbnRleHQgOiBjb250ZXh0IHx8IHRoaXMsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcclxuICAgICAgICAgICAgc2luZ2xlRXhlYzogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KDQtdCz0LjRgdGC0YDQsNGG0LjRjyDRhNGD0L3QutGG0LjQuCDQvdCwINGB0L7QsdGL0YLQuNC1XHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSBjb250ZXh0XHJcbiAgICAgKi9cclxuICAgIG9uZShldmVudE5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0ucHVzaCh7XHJcbiAgICAgICAgICAgIGNvbnRleHQgOiBjb250ZXh0IHx8IHRoaXMsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcclxuICAgICAgICAgICAgc2luZ2xlRXhlYzogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFuZWw7IiwiXHJcbmltcG9ydCBQYW5lbCBmcm9tICcuL3BhbmVsJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMnO1xyXG5cclxuXHJcbmxldCBDb250cm9sbGVyID0ge1xyXG5cclxuICAgIGxhbmc6IHt9LFxyXG4gICAgY29udHJvbHM6IHt9LFxyXG5cclxuICAgIF9pbnN0YW5jZXM6IHt9LFxyXG4gICAgX3NldHRpbmdzOiB7XHJcbiAgICAgICAgbGFuZzogJ2VuJyxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtQYW5lbH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gVXRpbHMuaXNPYmplY3Qob3B0aW9ucykgPyBvcHRpb25zIDoge307XHJcblxyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBQYW5lbChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgbGV0IHBhbmVsSWQgPSBpbnN0YW5jZS5nZXRJZCgpO1xyXG4gICAgICAgIHRoaXMuX2luc3RhbmNlc1twYW5lbElkXSA9IGluc3RhbmNlO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAgICogQHJldHVybnMge1BhbmVsfG51bGx9XHJcbiAgICAgKi9cclxuICAgIGdldDogZnVuY3Rpb24gKGlkKSB7XHJcblxyXG4gICAgICAgIGlmICggISB0aGlzLl9pbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCAhICQoJyNjb3JldWktcGFuZWwtJyArIGlkKVswXSkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faW5zdGFuY2VzW2lkXTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VzW2lkXTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KPRgdGC0LDQvdC+0LLQutCwINC90LDRgdGC0YDQvtC10LpcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBzZXRTZXR0aW5nczogZnVuY3Rpb24oc2V0dGluZ3MpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fc2V0dGluZ3MsIHNldHRpbmdzKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC30L3QsNGH0LXQvdC40Y8g0L3QsNGB0YLRgNC+0LnQutC4XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICovXHJcbiAgICBnZXRTZXR0aW5nOiBmdW5jdGlvbihuYW1lKSB7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3NldHRpbmdzW25hbWVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyOyIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuaW1wb3J0IFRwbCAgICAgIGZyb20gJy4uL3RwbCc7XHJcbmltcG9ydCBVdGlscyAgICBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCBFbGVtZW50cyBmcm9tIFwiLi4vZWxlbWVudHNcIjtcclxuXHJcbmxldCBQYW5lbENvbnRyb2xMaW5rID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF9wYW5lbDogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgIGhyZWY6IG51bGwsXHJcbiAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgIGF0dHI6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHBhbmVsLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fcGFuZWwgICA9IHBhbmVsO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IFV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGB0LLRj9C30LDQvdC90YvRhSDRgSDRjdC70LXQvNC10L3RgtC+0Lwg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGlzLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IEVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fcGFuZWwuZ2V0SWQoKSwgdGhpcy5nZXRJZCgpKTtcclxuICAgICAgICAgICAgJCgnYScsIGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHRoYXQuX3BhbmVsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2socHJvcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24odGhhdC5fb3B0aW9ucy5vbkNsaWNrKSkocHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5hdHRyID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5fb3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKFRwbFsnY29udHJvbHMvbGluay5odG1sJ10sIHtcclxuICAgICAgICAgICAgaHJlZjogdGhpcy5fb3B0aW9ucy5ocmVmLFxyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9vcHRpb25zLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFuZWxDb250cm9sTGluazsiLCJcclxuaW1wb3J0ICdlanMvZWpzLm1pbic7XHJcbmltcG9ydCBUcGwgICAgICBmcm9tICcuLi90cGwnO1xyXG5pbXBvcnQgVXRpbHMgICAgZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgRWxlbWVudHMgZnJvbSBcIi4uL2VsZW1lbnRzXCI7XHJcblxyXG5sZXQgUGFuZWxDb250cm9sQnV0dG9uID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF9wYW5lbDogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXHJcbiAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgIGF0dHI6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7UGFuZWx9ICBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHBhbmVsLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fcGFuZWwgICA9IHBhbmVsO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IFV0aWxzLmhhc2hDb2RlKCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGB0LLRj9C30LDQvdC90YvRhSDRgSDRjdC70LXQvNC10L3RgtC+0Lwg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGlzLl9vcHRpb25zLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBFbGVtZW50cy5nZXRDb250cm9sKHRoaXMuX3BhbmVsLmdldElkKCksIHRoaXMuZ2V0SWQoKSk7XHJcbiAgICAgICAgICAgICQoJ2J1dHRvbicsIGNvbnRyb2wpXHJcbiAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHRoYXQuX3BhbmVsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5fb3B0aW9ucy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0Ll9vcHRpb25zLm9uQ2xpY2socHJvcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQuX29wdGlvbnMub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24odGhhdC5fb3B0aW9ucy5vbkNsaWNrKSkocHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LXQvdC40LUgSUQg0Y3Qu9C10LzQtdC90YLQsCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0SWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQutC+0L3RgtC10L3RgtCwINC00LvRjyDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzID0gW107XHJcblxyXG4gICAgICAgIGlmIChVdGlscy5pc09iamVjdCh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLl9vcHRpb25zLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKFRwbFsnY29udHJvbHMvYnV0dG9uLmh0bWwnXSwge1xyXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLl9vcHRpb25zLmNvbnRlbnQsXHJcbiAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMubGVuZ3RoID4gMCA/ICgnICcgKyBhdHRyaWJ1dGVzLmpvaW4oJyAnKSkgOiAnJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFuZWxDb250cm9sQnV0dG9uOyIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuaW1wb3J0IFRwbCAgICAgIGZyb20gJy4uL3RwbCc7XHJcbmltcG9ydCBVdGlscyAgICBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCBFbGVtZW50cyBmcm9tIFwiLi4vZWxlbWVudHNcIjtcclxuXHJcbmxldCBQYW5lbENvbnRyb2xEcm9wZG93biA9IHtcclxuXHJcbiAgICBfaWQ6IG51bGwsXHJcbiAgICBfcGFuZWw6IG51bGwsXHJcbiAgICBfb3B0aW9uczoge1xyXG4gICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgY29udGVudDogbnVsbCxcclxuICAgICAgICBpdGVtczogbnVsbCxcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAnYnRuIGJ0bi1wcmltYXJ5IGRyb3Bkb3duLXRvZ2dsZScsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG4gICAgICogQHBhcmFtIHtQYW5lbH0gIHBhbmVsXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAocGFuZWwsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9wYW5lbCAgID0gcGFuZWw7XHJcbiAgICAgICAgdGhpcy5faWQgICAgICA9IHRoaXMuX29wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuaWQgPT09ICdzdHJpbmcnICYmIHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgPyB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgIDogVXRpbHMuaGFzaENvZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fb3B0aW9ucy5pdGVtcykpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmlkID0gaXRlbS5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgaXRlbS5pZCA9PT0gJ3N0cmluZycgJiYgaXRlbS5pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW0uaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5fb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L7QsdGL0YLQuNC5INGB0LLRj9C30LDQvdC90YvRhSDRgSDRjdC70LXQvNC10L3RgtC+0Lwg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqL1xyXG4gICAgaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5pdGVtcykpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgaXRlbS5vbkNsaWNrKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udHJvbCA9IEVsZW1lbnRzLmdldENvbnRyb2wodGhhdC5fcGFuZWwuZ2V0SWQoKSwgdGhhdC5nZXRJZCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdidXR0b24jYnRuLWRyb3Bkb3duLScgKyBpdGVtLmlkLCBjb250cm9sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb3AgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lbDogdGhhdC5fcGFuZWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ub25DbGljayhwcm9wKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0ub25DbGljayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobmV3IEZ1bmN0aW9uKGl0ZW0ub25DbGljaykpKHByb3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1IElEINGN0LvQtdC80LXQvdGC0LAg0YPQv9GA0LDQstC70LXQvdC40Y9cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQvtC90YLQtdC90YLQsCDQtNC70Y8g0YDQsNC30LzQtdGJ0LXQvdC40Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyAgICA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgIGxldCBpdGVtcyAgICAgID0gW107XHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5pdGVtcykpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbGluaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5saW5rID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbGluaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogaXRlbS5saW5rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udGVudCcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGl0ZW0ub25DbGljaykgPj0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2RpdmlkZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdmlkZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KG9wdGlvbnMuYXR0cikpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXR0ci5pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyLmhhc093blByb3BlcnR5KCdkYXRhLWJzLXRvZ2dsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5hdHRyWydkYXRhLWJzLXRvZ2dsZSddO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5hdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlanMucmVuZGVyKFRwbFsnY29udHJvbHMvZHJvcGRvd24uaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG9wdGlvbnMuY29udGVudCxcclxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiYgdHlwZW9mIG9wdGlvbnMucG9zaXRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9ucy5wb3NpdGlvbiA6ICdlbmQnLFxyXG4gICAgICAgICAgICBhdHRyOiBhdHRyaWJ1dGVzLmxlbmd0aCA+IDAgPyAoJyAnICsgYXR0cmlidXRlcy5qb2luKCcgJykpIDogJycsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFuZWxDb250cm9sRHJvcGRvd247IiwiXHJcbmltcG9ydCAnZWpzL2Vqcy5taW4nO1xyXG5pbXBvcnQgVHBsICAgICAgZnJvbSAnLi4vdHBsJztcclxuaW1wb3J0IFV0aWxzICAgIGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IEVsZW1lbnRzIGZyb20gXCIuLi9lbGVtZW50c1wiO1xyXG5cclxubGV0IFBhbmVsQ29udHJvbEJ1dHRvbkdyb3VwID0ge1xyXG5cclxuICAgIF9pZDogbnVsbCxcclxuICAgIF9wYW5lbDogbnVsbCxcclxuICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdHlwZTogJ2J1dHRvbkdyb3VwJyxcclxuICAgICAgICBjb250ZW50OiBudWxsLFxyXG4gICAgICAgIG9uQ2xpY2s6IG51bGwsXHJcbiAgICAgICAgYXR0cjogbnVsbFxyXG4gICAgfSxcclxuICAgIF9saW5rOiB7XHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnV0dG9uOiB7XHJcbiAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICBjbGFzczogJ2J0biBidG4tc2Vjb25kYXJ5J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfZHJvcGRvd246IHtcclxuICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiAnYnRuIGJ0bi1zZWNvbmRhcnkgZHJvcGRvd24tdG9nZ2xlJ1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y9cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYW5lbFxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKHBhbmVsLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX3BhbmVsICAgPSBwYW5lbDtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX2lkICAgICAgPSB0aGlzLl9vcHRpb25zLmhhc093blByb3BlcnR5KCdpZCcpICYmIHR5cGVvZiB0aGlzLl9vcHRpb25zLmlkID09PSAnc3RyaW5nJyAmJiB0aGlzLl9vcHRpb25zLmlkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA6IFV0aWxzLmhhc2hDb2RlKCk7XHJcblxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9vcHRpb25zLmJ1dHRvbnMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYnV0dG9ucy5tYXAoZnVuY3Rpb24gKGJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KGJ1dHRvbikgJiYgdHlwZW9mIGJ1dHRvbi50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uaWQgPSBVdGlscy5oYXNoQ29kZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLnR5cGUgPT09ICdkcm9wZG93bicgJiYgQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChidXR0b24uaXRlbXMsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdChpdGVtKSAmJiB0eXBlb2YgaXRlbS50eXBlID09PSAnc3RyaW5nJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmlkID0gaXRlbS5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgaXRlbS5pZCA9PT0gJ3N0cmluZycgJiYgaXRlbS5pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW0uaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/QvtC70YPRh9C10L3QuNC1INC/0LDRgNCw0LzQtdGC0YDQvtCyXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9vcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0YHQvtCx0YvRgtC40Lkg0YHQstGP0LfQsNC90L3Ri9GFINGBINGN0LvQtdC80LXQvdGC0L7QvCDRg9C/0YDQsNCy0LvQtdC90LjRj1xyXG4gICAgICovXHJcbiAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLmJ1dHRvbnMpKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29udHJvbCA9IEVsZW1lbnRzLmdldENvbnRyb2wodGhpcy5fcGFuZWwuZ2V0SWQoKSwgdGhpcy5faWQpO1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5idXR0b25zLm1hcChmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QoYnV0dG9uKSAmJiB0eXBlb2YgYnV0dG9uLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24udHlwZSA9PT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgnb25DbGljaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGJ1dHRvbi5vbkNsaWNrKSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2J1dHRvbiNidG4tJyArIGJ1dHRvbi5pZCwgY29udHJvbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9wID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWw6IHRoYXQuX3BhbmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnV0dG9uLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKHByb3ApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYnV0dG9uLm9uQ2xpY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IEZ1bmN0aW9uKGJ1dHRvbi5vbkNsaWNrKSkocHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbi50eXBlID09PSAnZHJvcGRvd24nICYmIEFycmF5LmlzQXJyYXkoYnV0dG9uLml0ZW1zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QoaXRlbSkgJiYgdHlwZW9mIGl0ZW0udHlwZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0cmluZycsICdmdW5jdGlvbiddLmluZGV4T2YodHlwZW9mIGl0ZW0ub25DbGljaykgPj0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnYnV0dG9uI2J0bi1kcm9wZG93bi0nICsgaXRlbS5pZCwgY29udHJvbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lbDogdGhhdC5fcGFuZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub25DbGljayhwcm9wKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbS5vbkNsaWNrID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IEZ1bmN0aW9uKGl0ZW0ub25DbGljaykpKHByb3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBJRCDRjdC70LXQvNC10L3RgtCwINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICBsZXQgYnV0dG9ucyA9IFtdO1xyXG4gICAgICAgIGxldCB0aGF0ICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5idXR0b25zKSkge1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5idXR0b25zLm1hcChmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QoYnV0dG9uKSAmJiB0eXBlb2YgYnV0dG9uLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24udHlwZSA9PT0gJ2xpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2xpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24ubGluayA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBVdGlscy5pc09iamVjdChidXR0b24uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaHJlZicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLmhyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdjbGFzcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIuY2xhc3MgPSB0aGF0Ll9saW5rLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGJ1dHRvbi5hdHRyLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6IGJ1dHRvbi5saW5rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJ1dHRvbi5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uLnR5cGUgPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmhhc093blByb3BlcnR5KCdvbkNsaWNrJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBidXR0b24uY29udGVudCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZih0eXBlb2YgYnV0dG9uLm9uQ2xpY2spID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBVdGlscy5pc09iamVjdChidXR0b24uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5hdHRyLmhhc093blByb3BlcnR5KCdpZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ1dHRvbi5hdHRyLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgnY2xhc3MnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hdHRyLmNsYXNzID0gdGhhdC5fYnV0dG9uLmF0dHIuY2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYnV0dG9uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBidXR0b24ubGluayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogYnV0dG9uLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJ1dHRvbi5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbi50eXBlID09PSAnZHJvcGRvd24nKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidXR0b24uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1zICAgICAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWxzLmlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLnR5cGUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbGluaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdsaW5rJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KCdjb250ZW50JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlbS5saW5rID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBpdGVtLmxpbmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYnV0dG9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbnRlbnQnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaGFzT3duUHJvcGVydHkoJ29uQ2xpY2snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmNvbnRlbnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWydzdHJpbmcnLCAnZnVuY3Rpb24nXS5pbmRleE9mKHR5cGVvZiBpdGVtLm9uQ2xpY2spID49IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2RpdmlkZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2aWRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgVXRpbHMuaXNPYmplY3QoYnV0dG9uLmF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmF0dHIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uYXR0ci5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBidXR0b24uYXR0ci5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgYnV0dG9uLmF0dHIuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYXR0ci5jbGFzcyA9IHRoYXQuZHJvcGRvd24uYXR0ci5jbGFzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhidXR0b24uYXR0cikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2gobmFtZSArICc9XCInICsgdmFsdWUgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkcm9wZG93bicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogYnV0dG9uLmNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGJ1dHRvbi5oYXNPd25Qcm9wZXJ0eSgncG9zaXRpb24nKSAmJiB0eXBlb2YgYnV0dG9uLnBvc2l0aW9uID09PSAnc3RyaW5nJyA/IGJ1dHRvbi5wb3NpdGlvbiA6ICdlbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IGF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGVqcy5yZW5kZXIoVHBsWydjb250cm9scy9idXR0b25fZ3JvdXAuaHRtbCddLCB7XHJcbiAgICAgICAgICAgIGJ1dHRvbnM6IGJ1dHRvbnMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBhbmVsQ29udHJvbEJ1dHRvbkdyb3VwOyIsIlxyXG5pbXBvcnQgJ2Vqcy9lanMubWluJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmxldCBQYW5lbENvbnRyb2xDdXN0b20gPSB7XHJcblxyXG4gICAgX2lkOiBudWxsLFxyXG4gICAgX3BhbmVsOiBudWxsLFxyXG4gICAgX29wdGlvbnM6IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICB0eXBlOiAnY3VzdG9tJyxcclxuICAgICAgICBjb250ZW50OiBudWxsXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFuZWxcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGluaXQ6IGZ1bmN0aW9uIChwYW5lbCwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3BhbmVsICAgPSBwYW5lbDtcclxuICAgICAgICB0aGlzLl9pZCAgICAgID0gdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiB0eXBlb2YgdGhpcy5fb3B0aW9ucy5pZCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fb3B0aW9ucy5pZFxyXG4gICAgICAgICAgICA/IHRoaXMuX29wdGlvbnMuaWRcclxuICAgICAgICAgICAgOiBVdGlscy5oYXNoQ29kZSgpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgdC+0LHRi9GC0LjQuSDRgdCy0Y/Qt9Cw0L3QvdGL0YUg0YEg0Y3Qu9C10LzQtdC90YLQvtC8INGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKi9cclxuICAgIGluaXRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSBJRCDRjdC70LXQvNC10L3RgtCwINGD0L/RgNCw0LLQu9C10L3QuNGPXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXRJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC60L7QvdGC0LXQvdGC0LAg0LTQu9GPINGA0LDQt9C80LXRidC10L3QuNGPINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vcHRpb25zLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmNvbnRlbnQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5jb250ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYW5lbENvbnRyb2xDdXN0b207IiwiXHJcbmxldCBsYW5nRW4gPSB7XHJcbiAgICBcImxvYWRpbmdcIjogXCJMb2FkaW5nLi4uXCIsXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxhbmdFbjsiLCJcclxubGV0IGxhbmdSdSA9IHtcclxuICAgIFwibG9hZGluZ1wiOiBcItCX0LDQs9GA0YPQt9C60LAuLi5cIlxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBsYW5nUnU7IiwiXHJcbmltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuL2pzL2NvbnRyb2xsZXJcIjtcclxuXHJcbmltcG9ydCBQYW5lbENvbnRyb2xMaW5rICAgICAgICBmcm9tIFwiLi9qcy9jb250cm9scy9saW5rXCI7XHJcbmltcG9ydCBQYW5lbENvbnRyb2xCdXR0b24gICAgICBmcm9tIFwiLi9qcy9jb250cm9scy9idXR0b25cIjtcclxuaW1wb3J0IFBhbmVsQ29udHJvbERyb3Bkb3duICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL2Ryb3Bkb3duXCI7XHJcbmltcG9ydCBQYW5lbENvbnRyb2xCdXR0b25Hcm91cCBmcm9tIFwiLi9qcy9jb250cm9scy9idXR0b25fZ3JvdXBcIjtcclxuaW1wb3J0IFBhbmVsQ29udHJvbEN1c3RvbSAgICAgIGZyb20gXCIuL2pzL2NvbnRyb2xzL2N1c3RvbVwiO1xyXG5cclxuaW1wb3J0IGxhbmdFbiBmcm9tIFwiLi9qcy9sYW5nL2VuXCI7XHJcbmltcG9ydCBsYW5nUnUgZnJvbSBcIi4vanMvbGFuZy9ydVwiO1xyXG5cclxuQ29udHJvbGxlci5jb250cm9scy5saW5rICAgICAgICA9IFBhbmVsQ29udHJvbExpbms7XHJcbkNvbnRyb2xsZXIuY29udHJvbHMuYnV0dG9uICAgICAgPSBQYW5lbENvbnRyb2xCdXR0b247XHJcbkNvbnRyb2xsZXIuY29udHJvbHMuZHJvcGRvd24gICAgPSBQYW5lbENvbnRyb2xEcm9wZG93bjtcclxuQ29udHJvbGxlci5jb250cm9scy5idXR0b25Hcm91cCA9IFBhbmVsQ29udHJvbEJ1dHRvbkdyb3VwO1xyXG5Db250cm9sbGVyLmNvbnRyb2xzLmN1c3RvbSAgICAgID0gUGFuZWxDb250cm9sQ3VzdG9tO1xyXG5cclxuQ29udHJvbGxlci5sYW5nLmVuID0gbGFuZ0VuO1xyXG5Db250cm9sbGVyLmxhbmcucnUgPSBsYW5nUnU7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjsiXSwibmFtZXMiOlsiZiIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImVqcyIsInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiY2FsbCIsImxlbmd0aCIsImZzIiwicGF0aCIsInV0aWxzIiwic2NvcGVPcHRpb25XYXJuZWQiLCJfVkVSU0lPTl9TVFJJTkciLCJ2ZXJzaW9uIiwiX0RFRkFVTFRfT1BFTl9ERUxJTUlURVIiLCJfREVGQVVMVF9DTE9TRV9ERUxJTUlURVIiLCJfREVGQVVMVF9ERUxJTUlURVIiLCJfREVGQVVMVF9MT0NBTFNfTkFNRSIsIl9OQU1FIiwiX1JFR0VYX1NUUklORyIsIl9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQSIsIl9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTIiwiY29uY2F0IiwiX0JPTSIsIl9KU19JREVOVElGSUVSIiwiY2FjaGUiLCJmaWxlTG9hZGVyIiwicmVhZEZpbGVTeW5jIiwibG9jYWxzTmFtZSIsInByb21pc2VJbXBsIiwiRnVuY3Rpb24iLCJQcm9taXNlIiwicmVzb2x2ZUluY2x1ZGUiLCJuYW1lIiwiZmlsZW5hbWUiLCJpc0RpciIsImRpcm5hbWUiLCJleHRuYW1lIiwicmVzb2x2ZSIsImluY2x1ZGVQYXRoIiwiZXh0IiwicmVzb2x2ZVBhdGhzIiwicGF0aHMiLCJmaWxlUGF0aCIsInNvbWUiLCJ2IiwiZXhpc3RzU3luYyIsImdldEluY2x1ZGVQYXRoIiwib3B0aW9ucyIsInZpZXdzIiwibWF0Y2giLCJleGVjIiwicmVwbGFjZSIsIkFycmF5IiwiaXNBcnJheSIsInJvb3QiLCJpbmNsdWRlciIsImVzY2FwZUZ1bmN0aW9uIiwiaGFuZGxlQ2FjaGUiLCJ0ZW1wbGF0ZSIsImZ1bmMiLCJoYXNUZW1wbGF0ZSIsImFyZ3VtZW50cyIsImdldCIsInRvU3RyaW5nIiwiY29tcGlsZSIsInNldCIsInRyeUhhbmRsZUNhY2hlIiwiZGF0YSIsImNiIiwicmVzdWx0IiwicmVqZWN0IiwiZXJyIiwiaW5jbHVkZUZpbGUiLCJvcHRzIiwic2hhbGxvd0NvcHkiLCJjcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlIiwiaW5jbHVkZXJSZXN1bHQiLCJyZXRocm93Iiwic3RyIiwiZmxubSIsImxpbmVubyIsImVzYyIsImxpbmVzIiwic3BsaXQiLCJzdGFydCIsIk1hdGgiLCJtYXgiLCJlbmQiLCJtaW4iLCJjb250ZXh0Iiwic2xpY2UiLCJtYXAiLCJsaW5lIiwiY3VyciIsImpvaW4iLCJtZXNzYWdlIiwic3RyaXBTZW1pIiwidGVtcGwiLCJzY29wZSIsImNvbnNvbGUiLCJ3YXJuIiwiVGVtcGxhdGUiLCJyZW5kZXIiLCJkIiwic2hhbGxvd0NvcHlGcm9tTGlzdCIsInJlbmRlckZpbGUiLCJhcmdzIiwicHJvdG90eXBlIiwic2hpZnQiLCJ2aWV3T3B0cyIsInBvcCIsInNldHRpbmdzIiwiY2xlYXJDYWNoZSIsInJlc2V0IiwidGV4dCIsIm9wdHNQYXJhbSIsImhhc093bk9ubHlPYmplY3QiLCJ0ZW1wbGF0ZVRleHQiLCJtb2RlIiwidHJ1bmNhdGUiLCJjdXJyZW50TGluZSIsInNvdXJjZSIsImNsaWVudCIsImVzY2FwZSIsImVzY2FwZVhNTCIsImNvbXBpbGVEZWJ1ZyIsImRlYnVnIiwib3BlbkRlbGltaXRlciIsImNsb3NlRGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwic3RyaWN0Iiwicm1XaGl0ZXNwYWNlIiwib3V0cHV0RnVuY3Rpb25OYW1lIiwiYXN5bmMiLCJkZXN0cnVjdHVyZWRMb2NhbHMiLCJsZWdhY3lJbmNsdWRlIiwiX3dpdGgiLCJyZWdleCIsImNyZWF0ZVJlZ2V4IiwibW9kZXMiLCJFVkFMIiwiRVNDQVBFRCIsIlJBVyIsIkNPTU1FTlQiLCJMSVRFUkFMIiwiZGVsaW0iLCJlc2NhcGVSZWdFeHBDaGFycyIsIm9wZW4iLCJjbG9zZSIsIlJlZ0V4cCIsInNyYyIsImZuIiwicHJlcGVuZGVkIiwiYXBwZW5kZWQiLCJlc2NhcGVGbiIsImN0b3IiLCJzYW5pdGl6ZWRGaWxlbmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZW5lcmF0ZVNvdXJjZSIsInRlc3QiLCJkZXN0cnVjdHVyaW5nIiwibG9nIiwiU3ludGF4RXJyb3IiLCJyZXR1cm5lZEZuIiwiYW5vbnltb3VzIiwiaW5jbHVkZSIsImluY2x1ZGVEYXRhIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImJhc2VuYW1lIiwidmFsdWUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJtYXRjaGVzIiwicGFyc2VUZW1wbGF0ZVRleHQiLCJmb3JFYWNoIiwiaW5kZXgiLCJjbG9zaW5nIiwiaW5kZXhPZiIsInNjYW5MaW5lIiwicGF0IiwiYXJyIiwiZmlyc3RQb3MiLCJwdXNoIiwic3Vic3RyaW5nIiwiX2FkZE91dHB1dCIsIm5ld0xpbmVDb3VudCIsImxhc3RJbmRleE9mIiwiX19leHByZXNzIiwiVkVSU0lPTiIsInJlZ0V4cENoYXJzIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJvYmoiLCJrZXkiLCJzdHJpbmciLCJTdHJpbmciLCJfRU5DT0RFX0hUTUxfUlVMRVMiLCJfTUFUQ0hfSFRNTCIsImVuY29kZV9jaGFyIiwiZXNjYXBlRnVuY1N0ciIsIm1hcmt1cCIsInVuZGVmaW5lZCIsImVzY2FwZVhNTFRvU3RyaW5nIiwidG8iLCJmcm9tIiwibGlzdCIsIl9kYXRhIiwidmFsIiwicmVtb3ZlIiwiaHlwaGVuVG9DYW1lbCIsInRvVXBwZXJDYXNlIiwiY3JlYXRlIiwiX19wcm90b19fIiwicHJvY2VzcyIsIm5vcm1hbGl6ZUFycmF5IiwicGFydHMiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwibGFzdCIsInNwbGljZSIsInVuc2hpZnQiLCJyZXNvbHZlZFBhdGgiLCJyZXNvbHZlZEFic29sdXRlIiwiY3dkIiwiVHlwZUVycm9yIiwiY2hhckF0IiwiZmlsdGVyIiwibm9ybWFsaXplIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJzdWJzdHIiLCJyZWxhdGl2ZSIsInRyaW0iLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJjaGFyQ29kZUF0IiwiaGFzUm9vdCIsIm1hdGNoZWRTbGFzaCIsInN0YXJ0RG90Iiwic3RhcnRQYXJ0IiwicHJlRG90U3RhdGUiLCJ4cyIsInJlcyIsImxlbiIsIl9wcm9jZXNzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibmV4dFRpY2siLCJJdGVtIiwiYXJyYXkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJkZXNjcmlwdGlvbiIsImtleXdvcmRzIiwiYXV0aG9yIiwibGljZW5zZSIsImJpbiIsIm1haW4iLCJqc2RlbGl2ciIsInVucGtnIiwicmVwb3NpdG9yeSIsInR5cGUiLCJ1cmwiLCJidWdzIiwiaG9tZXBhZ2UiLCJkZXBlbmRlbmNpZXMiLCJqYWtlIiwiZGV2RGVwZW5kZW5jaWVzIiwiYnJvd3NlcmlmeSIsImVzbGludCIsImpzZG9jIiwibW9jaGEiLCJlbmdpbmVzIiwibm9kZSIsInNjcmlwdHMiLCJVdGlscyIsImlzT2JqZWN0IiwiX3R5cGVvZiIsImhhc2hDb2RlIiwiY3JjMzIiLCJEYXRlIiwiZ2V0VGltZSIsInJhbmRvbSIsInRwbCIsIkVsZW1lbnRzIiwiZ2V0UGFuZWwiLCJwYW5lbElkIiwiJCIsImdldFRhYnNDb250YWluZXIiLCJnZXRUYWJDb250YWluZXIiLCJ0YWJJZCIsImdldFRhYkNvdW50IiwiZ2V0VGFiVGl0bGUiLCJnZXRUYWJCYWRnZSIsImdldFRhYkl0ZW1Db250YWluZXIiLCJnZXRUYWJJdGVtVGl0bGUiLCJnZXRUYWJJdGVtQ291bnQiLCJnZXRDb250ZW50IiwiZ2V0Q29udHJvbCIsImNvbnRyb2xJZCIsImdldExvY2siLCJUYWJBYnN0cmFjdCIsInBhbmVsIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnR5IiwiaWQiLCJ1cmxDb3VudCIsInVybEJhZGdlIiwiY291bnQiLCJiYWRnZSIsImFjdGl2ZSIsImRpc2FibGVkIiwiX3BhbmVsIiwiX29wdGlvbnMiLCJleHRlbmQiLCJfaWQiLCJfY3JlYXRlQ2xhc3MiLCJnZXRJZCIsImdldFR5cGUiLCJnZXRPcHRpb25zIiwiaXNBY3RpdmUiLCJzZXRUaXRsZSIsInRhYlRpdGxlRWxlbWVudCIsInNldEJhZGdlIiwiYmFkZ2VSZW5kZXIiLCJQcml2YXRlIiwicmVuZGVyQmFkZ2UiLCJ0YWJCYWRnZUVsZW1lbnQiLCJyZXBsYWNlV2l0aCIsImFmdGVyIiwiVGFiIiwiX1RhYkFic3RyYWN0Iiwib3B0aW9uc0RlZmF1bHQiLCJ1cmxDb250ZW50IiwidXJsV2luZG93IiwiX2NhbGxTdXBlciIsIl9pbmhlcml0cyIsInNldEFjdGl2ZSIsInRhYlRhYkVsZW1lbnQiLCJ0YWJUYWJzRWxlbWVudCIsImZpbmQiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwidHJpZ2dlciIsInRhYiIsInNldENvdW50IiwidGFiQ291bnRFbGVtZW50IiwiaW5pdEV2ZW50cyIsInRoYXQiLCJ0YWJzQ29udGFpbmVyRWxlbWVudCIsImNsaWNrIiwiZXZlbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJfY291bnQiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJUcGwiLCJEcm9wZG93bkl0ZW0iLCJkcm9wZG93biIsIl9kcm9wZG93biIsInRhYkl0ZW1FbGVtZW50IiwidGFiRWxlbWVudCIsIl91cmwiLCJfdXJsV2luZG93IiwiaXRlbSIsIkRyb3Bkb3duRGl2aWRlciIsIlRhYkRyb3Bkb3duIiwiX3RoaXMyIiwiZGVmYXVsdE9wdGlvbnMiLCJpdGVtcyIsInRhYlR5cGUiLCJpbnN0YW5jZSIsIl9pdGVtcyIsImdldEl0ZW0iLCJpdGVtSWQiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwIiwicyIsImRvbmUiLCJpdGVtc0NvbnRlbnRzIiwicGFyYW1zIiwiX2V2ZW50cyIsImNhbGxiYWNrIiwic2luZ2xlRXhlYyIsImluaXRDb250cm9scyIsImNvbnRyb2xzIiwiY29udHJvbCIsIl9jb250cm9sbGVyIiwiaW5pdCIsIl9jb250cm9scyIsImluaXRUYWJzIiwidGFiSXRlbXMiLCJ0YWJJdGVtIiwiY29uc3RydWN0b3IiLCJ0b09iamVjdCIsIl90YWJzIiwicmVuZGVyVGFicyIsInRhYnMiLCJjbGFzc2VzIiwidGFic0NvbnRlbnRzIiwicG9zaXRpb24iLCJmaWxsIiwicmVuZGVyQ29udHJvbCIsImNvbnRyb2xFbGVtZW50IiwiYXBwZW5kIiwicmVuZGVyQ29udGVudHMiLCJjb250ZW50Iiwib25lIiwiY29tcG9uZW50IiwiQ29yZVVJIiwiYXR0ciIsIl9pIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsIl9zbGljZWRUb0FycmF5IiwiQWJzdHJhY3RUYWIiLCJfdGl0bGUiLCJnZXRUaXRsZSIsInNldElkIiwic2V0RGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiX2Rpc2FibGVkIiwiX2FjdGl2ZSIsIkhlbHBlclRhYiIsIl9BYnN0cmFjdFRhYiIsImdldENvdW50IiwiQkFER0VfVFlQRV9EQU5HRVIiLCJfYmFkZ2UiLCJzZXRCYWRnZURvdCIsImdldEJhZGdlIiwic2V0VXJsIiwiZ2V0VXJsIiwic2V0VXJsQ29udGVudCIsIl91cmxDb250ZW50IiwiZ2V0VXJsQ29udGVudCIsInNldFVybENvdW50IiwiX3VybENvdW50IiwiZ2V0VXJsQ291bnQiLCJzZXRVcmxCYWRnZSIsIl91cmxCYWRnZSIsImdldFVybEJhZGdlIiwic2V0VXJsV2luZG93IiwiZ2V0VXJsV2luZG93IiwiX2dldCIsIl9nZXRQcm90b3R5cGVPZiIsImFicyIsImZsb29yIiwiSGVscGVyVGFiRHJvcGRvd24iLCJhZGRJdGVtIiwiYWRkRGl2aWRlciIsImdldEl0ZW1zIiwic2V0QWN0aXZlSXRlbSIsIkhlbHBlckNvbnRyb2xCdXR0b24iLCJzZXRDb250ZW50IiwiX2NvbnRlbnQiLCJzZXRPbkNsaWNrIiwib25jbGljayIsIl9vbmNsaWNrIiwiZ2V0T25DbGljayIsInNldEF0dHIiLCJfYXR0ciIsImdldEF0dHIiLCJvbkNsaWNrIiwiQnV0dG9uR3JvdXBCdXR0b24iLCJCdXR0b25Hcm91cERyb3Bkb3duTGluayIsIm5vdyIsInNldExpbmsiLCJsaW5rIiwiX2xpbmsiLCJnZXRMaW5rIiwiQnV0dG9uR3JvdXBEcm9wZG93bkJ1dHRvbiIsIkJ1dHRvbkdyb3VwRHJvcGRvd25EaXZpZGVyIiwiQnV0dG9uR3JvdXBEcm9wZG93biIsIlBPU0lUSU9OX0VORCIsInNldFBvc2l0aW9uIiwiX3Bvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJhZGRJdGVtTGluayIsIl9pdGVtSW5kZXgiLCJhZGRJdGVtQnV0dG9uIiwiYWRkSXRlbURpdmlkZXIiLCJCdXR0b25Hcm91cExpbmsiLCJIZWxwZXJDb250cm9sQnV0dG9uR3JvdXAiLCJhZGRCdG5MaW5rIiwiX2J0bkluZGV4IiwiX2J1dHRvbnMiLCJhZGRCdG5CdXR0b24iLCJhZGRCdG5Ecm9wZG93biIsImJ1dHRvbnMiLCJidXR0b24iLCJIZWxwZXJDb250cm9sQ3VzdG9tIiwiRHJvcGRvd25MaW5rIiwiRHJvcGRvd25CdXR0b24iLCJIZWxwZXJDb250cm9sRHJvcGRvd24iLCJIZWxwZXJDb250cm9sTGluayIsInNldEhyZWYiLCJfaHJlZiIsImdldEhyZWYiLCJQYW5lbCIsImxhbmciLCJsYW5nTGlzdCIsInN1YnRpdGxlIiwiY29udGVudEZpdCIsImNvbnRlbnRVcmwiLCJ3cmFwcGVyVHlwZSIsIndpZHRoIiwiYnV0dG9uR3JvdXAiLCJjdXN0b20iLCJDb250cm9sbGVyIiwiUGFuZWxVdGlscyIsInByb3AiLCJsb2FkQ29udGVudCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJQYW5lbFByaXZhdGUiLCJnZXRUYWJBY3RpdmUiLCJsb2NrIiwiY29udGFpbmVyIiwiUGFuZWxFbGVtZW50cyIsImh0bWwiLCJsb2FkaW5nIiwiZ2V0TGFuZyIsInByZXBlbmQiLCJ1bmxvY2siLCJoaWRlIiwiYWpheCIsIm1ldGhvZCIsImJlZm9yZVNlbmQiLCJ4aHIiLCJzdWNjZXNzIiwiZXJyb3IiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJjb21wbGV0ZSIsInNldFdyYXBwZXJUeXBlIiwic2V0Q29udGVudEZpdCIsInNldFRhYlR5cGUiLCJzZXRUYWJGaWxsIiwic2V0VGFiUG9zaXRpb24iLCJzZXRUYWJzV2lkdGgiLCJzZXRUYWJBY3RpdmUiLCJhZGRUYWIiLCJhZGRUYWJEcm9wZG93biIsImFkZENvbnRyb2xzIiwiZ2V0VGFiQnlJZCIsImdldENvbnRyb2xCeUlkIiwic2V0Q29udGVudFVybCIsImNvbnRlbnRzIiwiZWxlbWVudCIsInRhYnNDb250ZW50IiwidGFic1Bvc2l0aW9uIiwidGFic1dpZHRoIiwiZml0Q29udGVudCIsImdldFNldHRpbmciLCJ1bml0IiwicGFuZWxFbGVtZW50IiwiaXNzZXRDb250cm9scyIsImZpdCIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiSFRNTEVsZW1lbnQiLCJvblRhYkFjdGl2ZSIsImV2ZW50TmFtZSIsIl9pbnN0YW5jZXMiLCJfc2V0dGluZ3MiLCJzZXRTZXR0aW5ncyIsIlBhbmVsQ29udHJvbExpbmsiLCJhdHRyaWJ1dGVzIiwiUGFuZWxDb250cm9sQnV0dG9uIiwiUGFuZWxDb250cm9sRHJvcGRvd24iLCJQYW5lbENvbnRyb2xCdXR0b25Hcm91cCIsIl9idXR0b24iLCJlYWNoIiwiX2kyIiwiX09iamVjdCRlbnRyaWVzMiIsIl9PYmplY3QkZW50cmllczIkX2kiLCJQYW5lbENvbnRyb2xDdXN0b20iLCJsYW5nRW4iLCJsYW5nUnUiLCJlbiIsInJ1Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBQUEsQ0FBQyxVQUFTQSxDQUFDLEVBQUM7SUFBQyxJQUFHLE9BQU9DLE9BQU8sS0FBRyxRQUFRLElBQUUsT0FBT0MsTUFBTSxLQUFHLFdBQVcsRUFBQztFQUFDQSxJQUFBQSxNQUFNLENBQUNELE9BQU8sR0FBQ0QsQ0FBQyxFQUFFLENBQUE7S0FBQyxNQUFLLElBQUcsT0FBT0csTUFBTSxLQUFHLFVBQVUsSUFBRUEsTUFBTSxDQUFDQyxHQUFHLEVBQUM7RUFBQ0QsSUFBQUEsTUFBTSxDQUFDLEVBQUUsRUFBQ0gsQ0FBQyxDQUFDLENBQUE7RUFBQSxHQUFDLE1BQUk7RUFBQyxJQUFBLElBQUlLLENBQUMsQ0FBQTtFQUFDLElBQUEsSUFBRyxPQUFPQyxNQUFNLEtBQUcsV0FBVyxFQUFDO0VBQUNELE1BQUFBLENBQUMsR0FBQ0MsTUFBTSxDQUFBO0VBQUEsS0FBQyxNQUFLLElBQUcsT0FBT0MsTUFBTSxLQUFHLFdBQVcsRUFBQztFQUFDRixNQUFBQSxDQUFDLEdBQUNFLE1BQU0sQ0FBQTtFQUFBLEtBQUMsTUFBSyxJQUFHLE9BQU9DLElBQUksS0FBRyxXQUFXLEVBQUM7RUFBQ0gsTUFBQUEsQ0FBQyxHQUFDRyxJQUFJLENBQUE7RUFBQSxLQUFDLE1BQUk7RUFBQ0gsTUFBQUEsQ0FBQyxHQUFDLElBQUksQ0FBQTtFQUFBLEtBQUE7RUFBQ0EsSUFBQUEsQ0FBQyxDQUFDSSxHQUFHLEdBQUNULENBQUMsRUFBRSxDQUFBO0VBQUEsR0FBQTtFQUFDLENBQUMsRUFBRSxZQUFVO0VBQTJCLEVBQUEsT0FBTyxZQUFVO0VBQUMsSUFBQSxTQUFTVSxDQUFDQSxDQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO0VBQUMsTUFBQSxTQUFTQyxDQUFDQSxDQUFDQyxDQUFD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"],"names":["global","factory","exports","module","define","amd","globalThis","self","CoreUI","panel","this","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","value","_inherits","subClass","superClass","create","_setPrototypeOf","_getPrototypeOf","setPrototypeOf","getPrototypeOf","bind","__proto__","p","_possibleConstructorReturn","call","ReferenceError","_get","Reflect","get","property","receiver","base","object","hasOwnProperty","desc","getOwnPropertyDescriptor","arguments","apply","_slicedToArray","arr","Array","isArray","r","l","t","e","n","u","a","f","next","done","push","return","_unsupportedIterableToArray","minLen","_arrayLikeToArray","toString","slice","name","from","test","len","arr2","arg","input","hint","prim","toPrimitive","undefined","String","Number","res","window","ejs","c","require","Error","code","1","fs","path","utils","scopeOptionWarned","_VERSION_STRING","version","_OPTS_PASSABLE_WITH_DATA","_OPTS_PASSABLE_WITH_DATA_EXPRESS","concat","_BOM","_JS_IDENTIFIER","resolvePaths","paths","filePath","some","v","resolveInclude","existsSync","handleCache","options","template","func","filename","hasTemplate","cache","fileLoader","replace","compile","set","includeFile","opts","shallowCopy","createNullProtoObjWherePossible","includePath","views","match","exec","root","includer","escapeFunction","includerResult","rethrow","err","str","flnm","lineno","esc","lines","split","start","Math","max","end","min","context","map","line","curr","join","message","stripSemi","Template","text","optsParam","hasOwnOnlyObject","templateText","mode","truncate","currentLine","source","client","escape","escapeXML","compileDebug","debug","openDelimiter","closeDelimiter","delimiter","strict","rmWhitespace","outputFunctionName","localsName","async","destructuredLocals","legacyInclude","_with","regex","createRegex","readFileSync","promiseImpl","Function","Promise","isDir","dirname","extname","resolve","scope","console","warn","render","d","data","shallowCopyFromList","renderFile","cb","result","args","shift","pop","settings","viewOpts","reject","clearCache","reset","modes","EVAL","ESCAPED","RAW","COMMENT","LITERAL","delim","escapeRegExpChars","open","close","RegExp","fn","prepended","appended","escapeFn","sanitizedFilename","JSON","stringify","generateSource","destructuring","src","log","ctor","SyntaxError","returnedFn","includeData","basename","matches","parseTemplateText","forEach","index","indexOf","closing","scanLine","firstPos","pat","substring","_addOutput","newLineCount","lastIndexOf","__express","VERSION","../package.json","./utils","2","hasOwn","regExpChars","_ENCODE_HTML_RULES","string","&","<",">","\"","'","_MATCH_HTML","encode_char","escapeXMLToString","markup","to","list","_data","val","remove","hyphenToCamel","toUpperCase","3","4","process","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","filter","xs","resolvedPath","resolvedAbsolute","cwd","charAt","normalize","isAbsolute","trailingSlash","substr","relative","trim","fromParts","toParts","samePartsLength","outputParts","sep","hasRoot","charCodeAt","matchedSlash","ext","startDot","startPart","preDotState","_process","5","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","6","description","keywords","author","license","bin","main","jsdelivr","unpkg","repository","type","url","bugs","homepage","dependencies","jake","devDependencies","browserify","eslint","git-directory-deploy","jsdoc","lru-cache","mocha","uglify-js","engines","node","scripts","Utils","isObject","hashCode","crc32","Date","getTime","random","tpl","Elements","panelId","$","tabId","controlId","TabAbstract","id","urlCount","urlBadge","count","badge","active","disabled","_panel","_options","extend","_id","getId","badgeRender","Private","renderBadge","tabBadgeElement","replaceWith","after","Tab","_this","derived","urlContent","urlWindow","construct","sham","Proxy","Boolean","valueOf","tabTabsElement","tabTabElement","find","removeClass","addClass","trigger","tab","tabCountElement","that","getOptions","tabsContainerElement","click","event","location","href","_count","setCount","fetch","then","response","json","setBadge","DropdownItem$1","DropdownItem","dropdown","_dropdown","tabItemElement","_url","_urlWindow","item","DropdownDivider$1","DropdownDivider","TabDropdown","items","_this2","_items","getItem","itemId","_step","_iterator","allowArrayLike","normalCompletion","didErr","it","s","step","F","itemsContents","params","_events","callback","singleExec","initControls","controls","control","_controller","init","_controls","initTabs","tabItems","tabItem","tabType","toObject","_tabs","initEvents","renderTabs","tabs","classes","tabsContents","position","fill","renderControl","controlElement","append","renderContents","content","one","component","attr","_i","_Object$entries","entries","_Object$entries$_i","AbstractTab","_title","_disabled","_active","getTitle","isActive","isDisabled","HelperTab","setId","BADGE_TYPE_DANGER","_badge","_urlContent","_urlCount","_urlBadge","getUrl","getUrlContent","getUrlWindow","getCount","getBadge","getUrlCount","getUrlBadge","abs","floor","HelperTabDropdown","setTitle","setActive","HelperControlButton","class","setContent","_content","onclick","_onclick","_attr","getContent","onClick","getOnClick","ButtonGroupButton","ButtonGroupDropdownLink","now","link","_link","ButtonGroupDropdownButton","ButtonGroupDropdownDivider","ButtonGroupDropdown","POSITION_END","_position","_itemIndex","setLink","ButtonGroupLink","HelperControlButtonGroup","_btnIndex","_buttons","buttons","button","HelperControlCustom","DropdownLink","getLink","DropdownButton","HelperControlDropdown","getPosition","HelperControlLink","setHref","_href","getHref","Panel","lang","langList","subtitle","contentFit","contentUrl","wrapperType","width","buttonGroup","custom","Controller","prop","loadContent","history","pushState","getTabActive","container","html","loading","getLang","prepend","hide","lock","ajax","method","beforeSend","xhr","success","error","textStatus","errorThrown","complete","unlock","getItems","setUrl","contents","element","tabsContent","tabsPosition","tabsWidth","fitContent","getSetting","unit","panelElement","issetControls","fit","domElement","document","getElementById","HTMLElement","eventName","_instances","_settings","setSettings","PanelControlButton","attributes","PanelControlDropdown","PanelControlButtonGroup","_button","each","_attributes","_attributes2","_i2","_Object$entries2","_Object$entries2$_i","_name","_value","PanelControlCustom","en","ru"],"mappings":"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"}