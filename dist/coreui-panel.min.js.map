{"version":3,"file":"coreui-panel.min.js","sources":["coreui-panel.min.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.CoreUI = global.CoreUI || {}, global.CoreUI.panel = factory()));\n})(this, (function () { 'use strict';\n\n  function _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n      var e,\n        n,\n        i,\n        u,\n        a = [],\n        f = !0,\n        o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) return;\n          f = !1;\n        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return a;\n    }\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n      writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n    return _setPrototypeOf(o, p);\n  }\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n  }\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    } else if (call !== void 0) {\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n  }\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n    return object;\n  }\n  function _get() {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get.bind();\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.get) {\n          return desc.get.call(arguments.length < 3 ? target : receiver);\n        }\n        return desc.value;\n      };\n    }\n    return _get.apply(this, arguments);\n  }\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        var F = function () {};\n        return {\n          s: F,\n          n: function () {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function (e) {\n            throw e;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true,\n      didErr = false,\n      err;\n    return {\n      s: function () {\n        it = it.call(o);\n      },\n      n: function () {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function (e) {\n        didErr = true;\n        err = e;\n      },\n      f: function () {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n  }\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  (function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n      module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n      define([], f);\n    } else {\n      var g;\n      if (typeof window !== \"undefined\") {\n        g = window;\n      } else if (typeof global !== \"undefined\") {\n        g = global;\n      } else if (typeof self !== \"undefined\") {\n        g = self;\n      } else {\n        g = this;\n      }\n      g.ejs = f();\n    }\n  })(function () {\n    return function () {\n      function r(e, n, t) {\n        function o(i, f) {\n          if (!n[i]) {\n            if (!e[i]) {\n              var c = \"function\" == typeof require && require;\n              if (!f && c) return c(i, !0);\n              if (u) return u(i, !0);\n              var a = new Error(\"Cannot find module '\" + i + \"'\");\n              throw a.code = \"MODULE_NOT_FOUND\", a;\n            }\n            var p = n[i] = {\n              exports: {}\n            };\n            e[i][0].call(p.exports, function (r) {\n              var n = e[i][1][r];\n              return o(n || r);\n            }, p, p.exports, r, e, n, t);\n          }\n          return n[i].exports;\n        }\n        for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n        return o;\n      }\n      return r;\n    }()({\n      1: [function (require, module, exports) {\n\n        var fs = require(\"fs\");\n        var path = require(\"path\");\n        var utils = require(\"./utils\");\n        var scopeOptionWarned = false;\n        var _VERSION_STRING = require(\"../package.json\").version;\n        var _DEFAULT_OPEN_DELIMITER = \"<\";\n        var _DEFAULT_CLOSE_DELIMITER = \">\";\n        var _DEFAULT_DELIMITER = \"%\";\n        var _DEFAULT_LOCALS_NAME = \"locals\";\n        var _NAME = \"ejs\";\n        var _REGEX_STRING = \"(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)\";\n        var _OPTS_PASSABLE_WITH_DATA = [\"delimiter\", \"scope\", \"context\", \"debug\", \"compileDebug\", \"client\", \"_with\", \"rmWhitespace\", \"strict\", \"filename\", \"async\"];\n        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(\"cache\");\n        var _BOM = /^\\uFEFF/;\n        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n        exports.cache = utils.cache;\n        exports.fileLoader = fs.readFileSync;\n        exports.localsName = _DEFAULT_LOCALS_NAME;\n        exports.promiseImpl = new Function(\"return this;\")().Promise;\n        exports.resolveInclude = function (name, filename, isDir) {\n          var dirname = path.dirname;\n          var extname = path.extname;\n          var resolve = path.resolve;\n          var includePath = resolve(isDir ? filename : dirname(filename), name);\n          var ext = extname(name);\n          if (!ext) {\n            includePath += \".ejs\";\n          }\n          return includePath;\n        };\n        function resolvePaths(name, paths) {\n          var filePath;\n          if (paths.some(function (v) {\n            filePath = exports.resolveInclude(name, v, true);\n            return fs.existsSync(filePath);\n          })) {\n            return filePath;\n          }\n        }\n        function getIncludePath(path, options) {\n          var includePath;\n          var filePath;\n          var views = options.views;\n          var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n          if (match && match.length) {\n            path = path.replace(/^\\/*/, \"\");\n            if (Array.isArray(options.root)) {\n              includePath = resolvePaths(path, options.root);\n            } else {\n              includePath = exports.resolveInclude(path, options.root || \"/\", true);\n            }\n          } else {\n            if (options.filename) {\n              filePath = exports.resolveInclude(path, options.filename);\n              if (fs.existsSync(filePath)) {\n                includePath = filePath;\n              }\n            }\n            if (!includePath && Array.isArray(views)) {\n              includePath = resolvePaths(path, views);\n            }\n            if (!includePath && typeof options.includer !== \"function\") {\n              throw new Error('Could not find the include file \"' + options.escapeFunction(path) + '\"');\n            }\n          }\n          return includePath;\n        }\n        function handleCache(options, template) {\n          var func;\n          var filename = options.filename;\n          var hasTemplate = arguments.length > 1;\n          if (options.cache) {\n            if (!filename) {\n              throw new Error(\"cache option requires a filename\");\n            }\n            func = exports.cache.get(filename);\n            if (func) {\n              return func;\n            }\n            if (!hasTemplate) {\n              template = fileLoader(filename).toString().replace(_BOM, \"\");\n            }\n          } else if (!hasTemplate) {\n            if (!filename) {\n              throw new Error(\"Internal EJS error: no file name or template \" + \"provided\");\n            }\n            template = fileLoader(filename).toString().replace(_BOM, \"\");\n          }\n          func = exports.compile(template, options);\n          if (options.cache) {\n            exports.cache.set(filename, func);\n          }\n          return func;\n        }\n        function tryHandleCache(options, data, cb) {\n          var result;\n          if (!cb) {\n            if (typeof exports.promiseImpl == \"function\") {\n              return new exports.promiseImpl(function (resolve, reject) {\n                try {\n                  result = handleCache(options)(data);\n                  resolve(result);\n                } catch (err) {\n                  reject(err);\n                }\n              });\n            } else {\n              throw new Error(\"Please provide a callback function\");\n            }\n          } else {\n            try {\n              result = handleCache(options)(data);\n            } catch (err) {\n              return cb(err);\n            }\n            cb(null, result);\n          }\n        }\n        function fileLoader(filePath) {\n          return exports.fileLoader(filePath);\n        }\n        function includeFile(path, options) {\n          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n          opts.filename = getIncludePath(path, opts);\n          if (typeof options.includer === \"function\") {\n            var includerResult = options.includer(path, opts.filename);\n            if (includerResult) {\n              if (includerResult.filename) {\n                opts.filename = includerResult.filename;\n              }\n              if (includerResult.template) {\n                return handleCache(opts, includerResult.template);\n              }\n            }\n          }\n          return handleCache(opts);\n        }\n        function rethrow(err, str, flnm, lineno, esc) {\n          var lines = str.split(\"\\n\");\n          var start = Math.max(lineno - 3, 0);\n          var end = Math.min(lines.length, lineno + 3);\n          var filename = esc(flnm);\n          var context = lines.slice(start, end).map(function (line, i) {\n            var curr = i + start + 1;\n            return (curr == lineno ? \" >> \" : \"    \") + curr + \"| \" + line;\n          }).join(\"\\n\");\n          err.path = filename;\n          err.message = (filename || \"ejs\") + \":\" + lineno + \"\\n\" + context + \"\\n\\n\" + err.message;\n          throw err;\n        }\n        function stripSemi(str) {\n          return str.replace(/;(\\s*$)/, \"$1\");\n        }\n        exports.compile = function compile(template, opts) {\n          var templ;\n          if (opts && opts.scope) {\n            if (!scopeOptionWarned) {\n              console.warn(\"`scope` option is deprecated and will be removed in EJS 3\");\n              scopeOptionWarned = true;\n            }\n            if (!opts.context) {\n              opts.context = opts.scope;\n            }\n            delete opts.scope;\n          }\n          templ = new Template(template, opts);\n          return templ.compile();\n        };\n        exports.render = function (template, d, o) {\n          var data = d || utils.createNullProtoObjWherePossible();\n          var opts = o || utils.createNullProtoObjWherePossible();\n          if (arguments.length == 2) {\n            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n          }\n          return handleCache(opts, template)(data);\n        };\n        exports.renderFile = function () {\n          var args = Array.prototype.slice.call(arguments);\n          var filename = args.shift();\n          var cb;\n          var opts = {\n            filename: filename\n          };\n          var data;\n          var viewOpts;\n          if (typeof arguments[arguments.length - 1] == \"function\") {\n            cb = args.pop();\n          }\n          if (args.length) {\n            data = args.shift();\n            if (args.length) {\n              utils.shallowCopy(opts, args.pop());\n            } else {\n              if (data.settings) {\n                if (data.settings.views) {\n                  opts.views = data.settings.views;\n                }\n                if (data.settings[\"view cache\"]) {\n                  opts.cache = true;\n                }\n                viewOpts = data.settings[\"view options\"];\n                if (viewOpts) {\n                  utils.shallowCopy(opts, viewOpts);\n                }\n              }\n              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n            }\n            opts.filename = filename;\n          } else {\n            data = utils.createNullProtoObjWherePossible();\n          }\n          return tryHandleCache(opts, data, cb);\n        };\n        exports.Template = Template;\n        exports.clearCache = function () {\n          exports.cache.reset();\n        };\n        function Template(text, optsParam) {\n          var opts = utils.hasOwnOnlyObject(optsParam);\n          var options = utils.createNullProtoObjWherePossible();\n          this.templateText = text;\n          this.mode = null;\n          this.truncate = false;\n          this.currentLine = 1;\n          this.source = \"\";\n          options.client = opts.client || false;\n          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n          options.compileDebug = opts.compileDebug !== false;\n          options.debug = !!opts.debug;\n          options.filename = opts.filename;\n          options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n          options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n          options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n          options.strict = opts.strict || false;\n          options.context = opts.context;\n          options.cache = opts.cache || false;\n          options.rmWhitespace = opts.rmWhitespace;\n          options.root = opts.root;\n          options.includer = opts.includer;\n          options.outputFunctionName = opts.outputFunctionName;\n          options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n          options.views = opts.views;\n          options.async = opts.async;\n          options.destructuredLocals = opts.destructuredLocals;\n          options.legacyInclude = typeof opts.legacyInclude != \"undefined\" ? !!opts.legacyInclude : true;\n          if (options.strict) {\n            options._with = false;\n          } else {\n            options._with = typeof opts._with != \"undefined\" ? opts._with : true;\n          }\n          this.opts = options;\n          this.regex = this.createRegex();\n        }\n        Template.modes = {\n          EVAL: \"eval\",\n          ESCAPED: \"escaped\",\n          RAW: \"raw\",\n          COMMENT: \"comment\",\n          LITERAL: \"literal\"\n        };\n        Template.prototype = {\n          createRegex: function () {\n            var str = _REGEX_STRING;\n            var delim = utils.escapeRegExpChars(this.opts.delimiter);\n            var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n            var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n            str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);\n            return new RegExp(str);\n          },\n          compile: function () {\n            var src;\n            var fn;\n            var opts = this.opts;\n            var prepended = \"\";\n            var appended = \"\";\n            var escapeFn = opts.escapeFunction;\n            var ctor;\n            var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : \"undefined\";\n            if (!this.source) {\n              this.generateSource();\n              prepended += '  var __output = \"\";\\n' + \"  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n\";\n              if (opts.outputFunctionName) {\n                if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n                  throw new Error(\"outputFunctionName is not a valid JS identifier.\");\n                }\n                prepended += \"  var \" + opts.outputFunctionName + \" = __append;\" + \"\\n\";\n              }\n              if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n                throw new Error(\"localsName is not a valid JS identifier.\");\n              }\n              if (opts.destructuredLocals && opts.destructuredLocals.length) {\n                var destructuring = \"  var __locals = (\" + opts.localsName + \" || {}),\\n\";\n                for (var i = 0; i < opts.destructuredLocals.length; i++) {\n                  var name = opts.destructuredLocals[i];\n                  if (!_JS_IDENTIFIER.test(name)) {\n                    throw new Error(\"destructuredLocals[\" + i + \"] is not a valid JS identifier.\");\n                  }\n                  if (i > 0) {\n                    destructuring += \",\\n  \";\n                  }\n                  destructuring += name + \" = __locals.\" + name;\n                }\n                prepended += destructuring + \";\\n\";\n              }\n              if (opts._with !== false) {\n                prepended += \"  with (\" + opts.localsName + \" || {}) {\" + \"\\n\";\n                appended += \"  }\" + \"\\n\";\n              }\n              appended += \"  return __output;\" + \"\\n\";\n              this.source = prepended + this.source + appended;\n            }\n            if (opts.compileDebug) {\n              src = \"var __line = 1\" + \"\\n\" + \"  , __lines = \" + JSON.stringify(this.templateText) + \"\\n\" + \"  , __filename = \" + sanitizedFilename + \";\" + \"\\n\" + \"try {\" + \"\\n\" + this.source + \"} catch (e) {\" + \"\\n\" + \"  rethrow(e, __lines, __filename, __line, escapeFn);\" + \"\\n\" + \"}\" + \"\\n\";\n            } else {\n              src = this.source;\n            }\n            if (opts.client) {\n              src = \"escapeFn = escapeFn || \" + escapeFn.toString() + \";\" + \"\\n\" + src;\n              if (opts.compileDebug) {\n                src = \"rethrow = rethrow || \" + rethrow.toString() + \";\" + \"\\n\" + src;\n              }\n            }\n            if (opts.strict) {\n              src = '\"use strict\";\\n' + src;\n            }\n            if (opts.debug) {\n              console.log(src);\n            }\n            if (opts.compileDebug && opts.filename) {\n              src = src + \"\\n\" + \"//# sourceURL=\" + sanitizedFilename + \"\\n\";\n            }\n            try {\n              if (opts.async) {\n                try {\n                  ctor = new Function(\"return (async function(){}).constructor;\")();\n                } catch (e) {\n                  if (e instanceof SyntaxError) {\n                    throw new Error(\"This environment does not support async/await\");\n                  } else {\n                    throw e;\n                  }\n                }\n              } else {\n                ctor = Function;\n              }\n              fn = new ctor(opts.localsName + \", escapeFn, include, rethrow\", src);\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                if (opts.filename) {\n                  e.message += \" in \" + opts.filename;\n                }\n                e.message += \" while compiling ejs\\n\\n\";\n                e.message += \"If the above error is not helpful, you may want to try EJS-Lint:\\n\";\n                e.message += \"https://github.com/RyanZim/EJS-Lint\";\n                if (!opts.async) {\n                  e.message += \"\\n\";\n                  e.message += \"Or, if you meant to create an async function, pass `async: true` as an option.\";\n                }\n              }\n              throw e;\n            }\n            var returnedFn = opts.client ? fn : function anonymous(data) {\n              var include = function (path, includeData) {\n                var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n                if (includeData) {\n                  d = utils.shallowCopy(d, includeData);\n                }\n                return includeFile(path, opts)(d);\n              };\n              return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n            };\n            if (opts.filename && typeof Object.defineProperty === \"function\") {\n              var filename = opts.filename;\n              var basename = path.basename(filename, path.extname(filename));\n              try {\n                Object.defineProperty(returnedFn, \"name\", {\n                  value: basename,\n                  writable: false,\n                  enumerable: false,\n                  configurable: true\n                });\n              } catch (e) {}\n            }\n            return returnedFn;\n          },\n          generateSource: function () {\n            var opts = this.opts;\n            if (opts.rmWhitespace) {\n              this.templateText = this.templateText.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n            }\n            this.templateText = this.templateText.replace(/[ \\t]*<%_/gm, \"<%_\").replace(/_%>[ \\t]*/gm, \"_%>\");\n            var self = this;\n            var matches = this.parseTemplateText();\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            if (matches && matches.length) {\n              matches.forEach(function (line, index) {\n                var closing;\n                if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {\n                  closing = matches[index + 2];\n                  if (!(closing == d + c || closing == \"-\" + d + c || closing == \"_\" + d + c)) {\n                    throw new Error('Could not find matching close tag for \"' + line + '\".');\n                  }\n                }\n                self.scanLine(line);\n              });\n            }\n          },\n          parseTemplateText: function () {\n            var str = this.templateText;\n            var pat = this.regex;\n            var result = pat.exec(str);\n            var arr = [];\n            var firstPos;\n            while (result) {\n              firstPos = result.index;\n              if (firstPos !== 0) {\n                arr.push(str.substring(0, firstPos));\n                str = str.slice(firstPos);\n              }\n              arr.push(result[0]);\n              str = str.slice(result[0].length);\n              result = pat.exec(str);\n            }\n            if (str) {\n              arr.push(str);\n            }\n            return arr;\n          },\n          _addOutput: function (line) {\n            if (this.truncate) {\n              line = line.replace(/^(?:\\r\\n|\\r|\\n)/, \"\");\n              this.truncate = false;\n            }\n            if (!line) {\n              return line;\n            }\n            line = line.replace(/\\\\/g, \"\\\\\\\\\");\n            line = line.replace(/\\n/g, \"\\\\n\");\n            line = line.replace(/\\r/g, \"\\\\r\");\n            line = line.replace(/\"/g, '\\\\\"');\n            this.source += '    ; __append(\"' + line + '\")' + \"\\n\";\n          },\n          scanLine: function (line) {\n            var self = this;\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            var newLineCount = 0;\n            newLineCount = line.split(\"\\n\").length - 1;\n            switch (line) {\n              case o + d:\n              case o + d + \"_\":\n                this.mode = Template.modes.EVAL;\n                break;\n              case o + d + \"=\":\n                this.mode = Template.modes.ESCAPED;\n                break;\n              case o + d + \"-\":\n                this.mode = Template.modes.RAW;\n                break;\n              case o + d + \"#\":\n                this.mode = Template.modes.COMMENT;\n                break;\n              case o + d + d:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + \"\\n\";\n                break;\n              case d + d + c:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + \"\\n\";\n                break;\n              case d + c:\n              case \"-\" + d + c:\n              case \"_\" + d + c:\n                if (this.mode == Template.modes.LITERAL) {\n                  this._addOutput(line);\n                }\n                this.mode = null;\n                this.truncate = line.indexOf(\"-\") === 0 || line.indexOf(\"_\") === 0;\n                break;\n              default:\n                if (this.mode) {\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                    case Template.modes.ESCAPED:\n                    case Template.modes.RAW:\n                      if (line.lastIndexOf(\"//\") > line.lastIndexOf(\"\\n\")) {\n                        line += \"\\n\";\n                      }\n                  }\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                      this.source += \"    ; \" + line + \"\\n\";\n                      break;\n                    case Template.modes.ESCAPED:\n                      this.source += \"    ; __append(escapeFn(\" + stripSemi(line) + \"))\" + \"\\n\";\n                      break;\n                    case Template.modes.RAW:\n                      this.source += \"    ; __append(\" + stripSemi(line) + \")\" + \"\\n\";\n                      break;\n                    case Template.modes.COMMENT:\n                      break;\n                    case Template.modes.LITERAL:\n                      this._addOutput(line);\n                      break;\n                  }\n                } else {\n                  this._addOutput(line);\n                }\n            }\n            if (self.opts.compileDebug && newLineCount) {\n              this.currentLine += newLineCount;\n              this.source += \"    ; __line = \" + this.currentLine + \"\\n\";\n            }\n          }\n        };\n        exports.escapeXML = utils.escapeXML;\n        exports.__express = exports.renderFile;\n        exports.VERSION = _VERSION_STRING;\n        exports.name = _NAME;\n        if (typeof window != \"undefined\") {\n          window.ejs = exports;\n        }\n      }, {\n        \"../package.json\": 6,\n        \"./utils\": 2,\n        fs: 3,\n        path: 4\n      }],\n      2: [function (require, module, exports) {\n\n        var regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var hasOwn = function (obj, key) {\n          return hasOwnProperty.apply(obj, [key]);\n        };\n        exports.escapeRegExpChars = function (string) {\n          if (!string) {\n            return \"\";\n          }\n          return String(string).replace(regExpChars, \"\\\\$&\");\n        };\n        var _ENCODE_HTML_RULES = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&#34;\",\n          \"'\": \"&#39;\"\n        };\n        var _MATCH_HTML = /[&<>'\"]/g;\n        function encode_char(c) {\n          return _ENCODE_HTML_RULES[c] || c;\n        }\n        var escapeFuncStr = \"var _ENCODE_HTML_RULES = {\\n\" + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + \"    }\\n\" + \"  , _MATCH_HTML = /[&<>'\\\"]/g;\\n\" + \"function encode_char(c) {\\n\" + \"  return _ENCODE_HTML_RULES[c] || c;\\n\" + \"};\\n\";\n        exports.escapeXML = function (markup) {\n          return markup == undefined ? \"\" : String(markup).replace(_MATCH_HTML, encode_char);\n        };\n        function escapeXMLToString() {\n          return Function.prototype.toString.call(this) + \";\\n\" + escapeFuncStr;\n        }\n        try {\n          if (typeof Object.defineProperty === \"function\") {\n            Object.defineProperty(exports.escapeXML, \"toString\", {\n              value: escapeXMLToString\n            });\n          } else {\n            exports.escapeXML.toString = escapeXMLToString;\n          }\n        } catch (err) {\n          console.warn(\"Unable to set escapeXML.toString (is the Function prototype frozen?)\");\n        }\n        exports.shallowCopy = function (to, from) {\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var p in from) {\n              if (!hasOwn(from, p)) {\n                continue;\n              }\n              if (p === \"__proto__\" || p === \"constructor\") {\n                continue;\n              }\n              to[p] = from[p];\n            }\n          }\n          return to;\n        };\n        exports.shallowCopyFromList = function (to, from, list) {\n          list = list || [];\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var i = 0; i < list.length; i++) {\n              var p = list[i];\n              if (typeof from[p] != \"undefined\") {\n                if (!hasOwn(from, p)) {\n                  continue;\n                }\n                if (p === \"__proto__\" || p === \"constructor\") {\n                  continue;\n                }\n                to[p] = from[p];\n              }\n            }\n          }\n          return to;\n        };\n        exports.cache = {\n          _data: {},\n          set: function (key, val) {\n            this._data[key] = val;\n          },\n          get: function (key) {\n            return this._data[key];\n          },\n          remove: function (key) {\n            delete this._data[key];\n          },\n          reset: function () {\n            this._data = {};\n          }\n        };\n        exports.hyphenToCamel = function (str) {\n          return str.replace(/-[a-z]/g, function (match) {\n            return match[1].toUpperCase();\n          });\n        };\n        exports.createNullProtoObjWherePossible = function () {\n          if (typeof Object.create == \"function\") {\n            return function () {\n              return Object.create(null);\n            };\n          }\n          if (!({\n            __proto__: null\n          } instanceof Object)) {\n            return function () {\n              return {\n                __proto__: null\n              };\n            };\n          }\n          return function () {\n            return {};\n          };\n        }();\n        exports.hasOwnOnlyObject = function (obj) {\n          var o = exports.createNullProtoObjWherePossible();\n          for (var p in obj) {\n            if (hasOwn(obj, p)) {\n              o[p] = obj[p];\n            }\n          }\n          return o;\n        };\n      }, {}],\n      3: [function (require, module, exports) {}, {}],\n      4: [function (require, module, exports) {\n        (function (process) {\n          function normalizeArray(parts, allowAboveRoot) {\n            var up = 0;\n            for (var i = parts.length - 1; i >= 0; i--) {\n              var last = parts[i];\n              if (last === \".\") {\n                parts.splice(i, 1);\n              } else if (last === \"..\") {\n                parts.splice(i, 1);\n                up++;\n              } else if (up) {\n                parts.splice(i, 1);\n                up--;\n              }\n            }\n            if (allowAboveRoot) {\n              for (; up--; up) {\n                parts.unshift(\"..\");\n              }\n            }\n            return parts;\n          }\n          exports.resolve = function () {\n            var resolvedPath = \"\",\n              resolvedAbsolute = false;\n            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n              var path = i >= 0 ? arguments[i] : process.cwd();\n              if (typeof path !== \"string\") {\n                throw new TypeError(\"Arguments to path.resolve must be strings\");\n              } else if (!path) {\n                continue;\n              }\n              resolvedPath = path + \"/\" + resolvedPath;\n              resolvedAbsolute = path.charAt(0) === \"/\";\n            }\n            resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function (p) {\n              return !!p;\n            }), !resolvedAbsolute).join(\"/\");\n            return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n          };\n          exports.normalize = function (path) {\n            var isAbsolute = exports.isAbsolute(path),\n              trailingSlash = substr(path, -1) === \"/\";\n            path = normalizeArray(filter(path.split(\"/\"), function (p) {\n              return !!p;\n            }), !isAbsolute).join(\"/\");\n            if (!path && !isAbsolute) {\n              path = \".\";\n            }\n            if (path && trailingSlash) {\n              path += \"/\";\n            }\n            return (isAbsolute ? \"/\" : \"\") + path;\n          };\n          exports.isAbsolute = function (path) {\n            return path.charAt(0) === \"/\";\n          };\n          exports.join = function () {\n            var paths = Array.prototype.slice.call(arguments, 0);\n            return exports.normalize(filter(paths, function (p, index) {\n              if (typeof p !== \"string\") {\n                throw new TypeError(\"Arguments to path.join must be strings\");\n              }\n              return p;\n            }).join(\"/\"));\n          };\n          exports.relative = function (from, to) {\n            from = exports.resolve(from).substr(1);\n            to = exports.resolve(to).substr(1);\n            function trim(arr) {\n              var start = 0;\n              for (; start < arr.length; start++) {\n                if (arr[start] !== \"\") break;\n              }\n              var end = arr.length - 1;\n              for (; end >= 0; end--) {\n                if (arr[end] !== \"\") break;\n              }\n              if (start > end) return [];\n              return arr.slice(start, end - start + 1);\n            }\n            var fromParts = trim(from.split(\"/\"));\n            var toParts = trim(to.split(\"/\"));\n            var length = Math.min(fromParts.length, toParts.length);\n            var samePartsLength = length;\n            for (var i = 0; i < length; i++) {\n              if (fromParts[i] !== toParts[i]) {\n                samePartsLength = i;\n                break;\n              }\n            }\n            var outputParts = [];\n            for (var i = samePartsLength; i < fromParts.length; i++) {\n              outputParts.push(\"..\");\n            }\n            outputParts = outputParts.concat(toParts.slice(samePartsLength));\n            return outputParts.join(\"/\");\n          };\n          exports.sep = \"/\";\n          exports.delimiter = \":\";\n          exports.dirname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            if (path.length === 0) return \".\";\n            var code = path.charCodeAt(0);\n            var hasRoot = code === 47;\n            var end = -1;\n            var matchedSlash = true;\n            for (var i = path.length - 1; i >= 1; --i) {\n              code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  end = i;\n                  break;\n                }\n              } else {\n                matchedSlash = false;\n              }\n            }\n            if (end === -1) return hasRoot ? \"/\" : \".\";\n            if (hasRoot && end === 1) {\n              return \"/\";\n            }\n            return path.slice(0, end);\n          };\n          function basename(path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var start = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var i;\n            for (i = path.length - 1; i >= 0; --i) {\n              if (path.charCodeAt(i) === 47) {\n                if (!matchedSlash) {\n                  start = i + 1;\n                  break;\n                }\n              } else if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n            }\n            if (end === -1) return \"\";\n            return path.slice(start, end);\n          }\n          exports.basename = function (path, ext) {\n            var f = basename(path);\n            if (ext && f.substr(-1 * ext.length) === ext) {\n              f = f.substr(0, f.length - ext.length);\n            }\n            return f;\n          };\n          exports.extname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var startDot = -1;\n            var startPart = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var preDotState = 0;\n            for (var i = path.length - 1; i >= 0; --i) {\n              var code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  startPart = i + 1;\n                  break;\n                }\n                continue;\n              }\n              if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n              if (code === 46) {\n                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n              } else if (startDot !== -1) {\n                preDotState = -1;\n              }\n            }\n            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n              return \"\";\n            }\n            return path.slice(startDot, end);\n          };\n          function filter(xs, f) {\n            if (xs.filter) return xs.filter(f);\n            var res = [];\n            for (var i = 0; i < xs.length; i++) {\n              if (f(xs[i], i, xs)) res.push(xs[i]);\n            }\n            return res;\n          }\n          var substr = \"ab\".substr(-1) === \"b\" ? function (str, start, len) {\n            return str.substr(start, len);\n          } : function (str, start, len) {\n            if (start < 0) start = str.length + start;\n            return str.substr(start, len);\n          };\n        }).call(this, require(\"_process\"));\n      }, {\n        _process: 5\n      }],\n      5: [function (require, module, exports) {\n        var process = module.exports = {};\n        var cachedSetTimeout;\n        var cachedClearTimeout;\n        function defaultSetTimout() {\n          throw new Error(\"setTimeout has not been defined\");\n        }\n        function defaultClearTimeout() {\n          throw new Error(\"clearTimeout has not been defined\");\n        }\n        (function () {\n          try {\n            if (typeof setTimeout === \"function\") {\n              cachedSetTimeout = setTimeout;\n            } else {\n              cachedSetTimeout = defaultSetTimout;\n            }\n          } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n          }\n          try {\n            if (typeof clearTimeout === \"function\") {\n              cachedClearTimeout = clearTimeout;\n            } else {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        })();\n        function runTimeout(fun) {\n          if (cachedSetTimeout === setTimeout) {\n            return setTimeout(fun, 0);\n          }\n          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n          }\n          try {\n            return cachedSetTimeout(fun, 0);\n          } catch (e) {\n            try {\n              return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n              return cachedSetTimeout.call(this, fun, 0);\n            }\n          }\n        }\n        function runClearTimeout(marker) {\n          if (cachedClearTimeout === clearTimeout) {\n            return clearTimeout(marker);\n          }\n          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n          }\n          try {\n            return cachedClearTimeout(marker);\n          } catch (e) {\n            try {\n              return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n              return cachedClearTimeout.call(this, marker);\n            }\n          }\n        }\n        var queue = [];\n        var draining = false;\n        var currentQueue;\n        var queueIndex = -1;\n        function cleanUpNextTick() {\n          if (!draining || !currentQueue) {\n            return;\n          }\n          draining = false;\n          if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n          } else {\n            queueIndex = -1;\n          }\n          if (queue.length) {\n            drainQueue();\n          }\n        }\n        function drainQueue() {\n          if (draining) {\n            return;\n          }\n          var timeout = runTimeout(cleanUpNextTick);\n          draining = true;\n          var len = queue.length;\n          while (len) {\n            currentQueue = queue;\n            queue = [];\n            while (++queueIndex < len) {\n              if (currentQueue) {\n                currentQueue[queueIndex].run();\n              }\n            }\n            queueIndex = -1;\n            len = queue.length;\n          }\n          currentQueue = null;\n          draining = false;\n          runClearTimeout(timeout);\n        }\n        process.nextTick = function (fun) {\n          var args = new Array(arguments.length - 1);\n          if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n            }\n          }\n          queue.push(new Item(fun, args));\n          if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n          }\n        };\n        function Item(fun, array) {\n          this.fun = fun;\n          this.array = array;\n        }\n        Item.prototype.run = function () {\n          this.fun.apply(null, this.array);\n        };\n        process.title = \"browser\";\n        process.browser = true;\n        process.env = {};\n        process.argv = [];\n        process.version = \"\";\n        process.versions = {};\n        function noop() {}\n        process.on = noop;\n        process.addListener = noop;\n        process.once = noop;\n        process.off = noop;\n        process.removeListener = noop;\n        process.removeAllListeners = noop;\n        process.emit = noop;\n        process.prependListener = noop;\n        process.prependOnceListener = noop;\n        process.listeners = function (name) {\n          return [];\n        };\n        process.binding = function (name) {\n          throw new Error(\"process.binding is not supported\");\n        };\n        process.cwd = function () {\n          return \"/\";\n        };\n        process.chdir = function (dir) {\n          throw new Error(\"process.chdir is not supported\");\n        };\n        process.umask = function () {\n          return 0;\n        };\n      }, {}],\n      6: [function (require, module, exports) {\n        module.exports = {\n          name: \"ejs\",\n          description: \"Embedded JavaScript templates\",\n          keywords: [\"template\", \"engine\", \"ejs\"],\n          version: \"3.1.9\",\n          author: \"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)\",\n          license: \"Apache-2.0\",\n          bin: {\n            ejs: \"./bin/cli.js\"\n          },\n          main: \"./lib/ejs.js\",\n          jsdelivr: \"ejs.min.js\",\n          unpkg: \"ejs.min.js\",\n          repository: {\n            type: \"git\",\n            url: \"git://github.com/mde/ejs.git\"\n          },\n          bugs: \"https://github.com/mde/ejs/issues\",\n          homepage: \"https://github.com/mde/ejs\",\n          dependencies: {\n            jake: \"^10.8.5\"\n          },\n          devDependencies: {\n            browserify: \"^16.5.1\",\n            eslint: \"^6.8.0\",\n            \"git-directory-deploy\": \"^1.5.1\",\n            jsdoc: \"^4.0.2\",\n            \"lru-cache\": \"^4.0.1\",\n            mocha: \"^10.2.0\",\n            \"uglify-js\": \"^3.3.16\"\n          },\n          engines: {\n            node: \">=0.10.0\"\n          },\n          scripts: {\n            test: \"npx jake test\"\n          }\n        };\n      }, {}]\n    }, {}, [1])(1);\n  });\n\n  var Utils = {\n    /**\r\n     * Проверка на объект\r\n     * @param value\r\n     */\n    isObject: function isObject(value) {\n      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;\n    },\n    /**\r\n     * @returns {string}\r\n     * @private\r\n     */\n    hashCode: function hashCode() {\n      return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);\n    },\n    /**\r\n     * @param str\r\n     * @returns {number}\r\n     * @private\r\n     */\n    crc32: function crc32(str) {\n      for (var a, o = [], c = 0; c < 256; c++) {\n        a = c;\n        for (var f = 0; f < 8; f++) {\n          a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;\n        }\n        o[c] = a;\n      }\n      for (var n = -1, t = 0; t < str.length; t++) {\n        n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];\n      }\n      return (-1 ^ n) >>> 0;\n    }\n  };\n\n  var tpl = Object.create(null);\n  tpl['badge.html'] = '<span class=\"coreui-panel__tab-badge position-absolute top-0 translate-middle z-1 badge<%= badge.classes %>\"<%- badge.attr %>> <%= badge.text %> </span>';\n  tpl['container.html'] = '<div class=\"coreui-panel text-center mb-3<%= wrapperType %><%= fit %>\" id=\"coreui-panel-<%= id %>\"> <div class=\"card-body text-start\"> <% if (issetControls) { %> <div class=\"coreui-panel-controls position-relative top-0 end-0 float-end gap-1 d-flex flex-wrap justify-content-end\"></div> <% } %> <% if (title) { %> <h4 class=\"card-title<% if ( ! subtitle) { %> mb-4<% } %>\"> <%- title %> </h4> <% } %> <% if (subtitle) { %> <p class=\"coreui-panel-subtitle text-body-secondary\"><%- subtitle %></p> <% } %> <% if (tabs.content) { %> <% if ([\\'top-left\\', \\'top-center\\', \\'top-right\\'].indexOf(tabs.position) >= 0) { %> <%- tabs.content %> <div class=\"coreui-panel-content card-content\"></div> <% } else if (tabs.position === \\'left\\') { %> <div class=\"d-flex\"> <div class=\"me-3\" style=\"width: <%= tabs.width %>\"><%- tabs.content %></div> <div class=\"coreui-panel-content card-content flex-grow-1\"></div> </div> <% } else if (tabs.position === \\'right\\') { %> <div class=\"d-flex\"> <div class=\"coreui-panel-content card-content flex-grow-1 pe-3\"></div> <div style=\"width: <%= tabs.width %>\"><%- tabs.content %></div> </div> <% } %> <% } else { %> <div class=\"coreui-panel-content card-content\"></div> <% } %> </div> </div>';\n  tpl['loader.html'] = '<div class=\"coreui-panel-lock position-absolute w-100 top-0 bottom-0\"> <div class=\"coreui-panel-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0\"></div> <div class=\"coreui-panel-message position-relative d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary\"> <div class=\"spinner-border text-secondary align-self-center\"></div> <span class=\"lh-lg\"><%= loading %></span> </div> </div>';\n  tpl['panel-control.html'] = '<div id=\"coreui-panel-control-<%= id %>\" class=\"coreui-panel__control\"></div>';\n  tpl['tabs.html'] = ' <ul class=\"coreui-panel-tabs nav <% if (type) { %>nav-<%= type %><% } %> card-body-tabs mb-3 <% if (classes) { %><%= classes %><% } %> <% if (fill) { %>nav-<%= fill %><% } %>\"> <% $.each(tabsContents, function(key, tabContent) { %> <%- tabContent %> <% }) %> </ul>';\n  tpl['controls/button.html'] = '<button type=\"button\"<%- attr %>><%- content %></button>';\n  tpl['controls/button_group.html'] = ' <div class=\"btn-group\" role=\"group\"> <% $.each(buttons, function(key, button) { %> <% if (button.type === \\'link\\') { %> <a href=\"<%= button.link %>\"<%- button.attr %>><%- button.content %></a> <% } else if (button.type === \\'button\\') { %> <button type=\"button\" id=\"btn-<%= button.id %>\"<%- button.attr %>> <%- button.content %> </button> <% } else if (button.type === \\'dropdown\\') { %> <div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- button.attr %>> <%- button.content %> </button> <ul class=\"dropdown-menu dropdown-menu-<%= button.position %>\"> <% $.each(button.items, function(key, item) { %> <% if (item.type === \\'link\\') { %> <li><a class=\"dropdown-item\" href=\"<%= item.link %>\"><%- item.content %></a></li> <% } else if (item.type === \\'button\\') { %> <li> <button type=\"button\" class=\"dropdown-item\" id=\"btn-dropdown-<%= item.id %>\"> <%- item.content %> </button> </li> <% } else if (item.type === \\'divider\\') { %> <li><hr class=\"dropdown-divider\"></li> <% } %> <% }) %> </ul> </div> <% } %> <% }) %> </div>';\n  tpl['controls/dropdown.html'] = ' <div class=\"btn-group\" role=\"group\"> <button type=\"button\" data-bs-toggle=\"dropdown\"<%- attr %>> <%- content %> </button> <ul class=\"dropdown-menu dropdown-menu-<%= position %>\"> <% items.map(function(item) { %> <% if (item.type === \\'link\\') { %> <li><a class=\"dropdown-item\" href=\"<%= item.link %>\"><%- item.content %></a></li> <% } else if (item.type === \\'button\\') { %> <li> <button type=\"button\" class=\"dropdown-item\" id=\"btn-dropdown-<%= item.id %>\"> <%- item.content %> </button> </li> <% } else if (item.type === \\'divider\\') { %> <li><hr class=\"dropdown-divider\"></li> <% } %> <% }) %> </ul> </div>';\n  tpl['controls/link.html'] = '<a href=\"<%- href %>\"<%- attr %>><%- content %></a>';\n  tpl['tabs/tab-dropdown-divider.html'] = ' <li> <hr class=\"dropdown-divider\"> </li>';\n  tpl['tabs/tab-dropdown-item.html'] = ' <li class=\"coreui-panel__tab-item-<%= item.id %>\"> <a class=\"dropdown-item position-relative<% if (item.active) { %> active<% } %><% if (item.disabled) { %> disabled<% } %>\" href=\"<% if (item.url) { %><%= item.url %><% } else { %>#<% } %>\" data-bs-toggle=\"tab\" data-tab-id=\"<%= item.id %>\"> <span class=\"coreui-panel__tab-item-title\"><%= item.title %></span> <% if (item.count !== null) { %> <span class=\"coreui-panel__tab-item-count\">(<%= item.count %>)</span><% } %> <%- item.badge %> </a> </li>';\n  tpl['tabs/tab-dropdown.html'] = ' <li class=\"nav-item coreui-panel__tab-<%= tab.id %> dropdown<% if (tab.active) { %> active<% } %><% if (tab.disabled) { %> disabled<% } %>\"> <a class=\"nav-link dropdown-toggle\" data-bs-toggle=\"dropdown\" href=\"#\"> <span class=\"coreui-panel__tab-title\"><%= tab.title %></span> <% if (tab.count !== null) { %> <span class=\"coreui-panel__tab-count\">(<%= tab.count %>)</span><% } %> <%- tab.badge %> </a> <ul class=\"dropdown-menu\"> <% $.each(tab.itemsContents, function(key, itemContent) { %> <%- itemContent %> <% }) %> </ul> </li>';\n  tpl['tabs/tab.html'] = ' <li class=\"nav-item coreui-panel__tab-<%= tab.id %>\"> <a class=\"nav-link position-relative<% if (tab.active) { %> active<% } %><% if (tab.disabled) { %> disabled<% } %>\" href=\"<% if (tab.url) { %><%= tab.url %><% } else { %>#<% } %>\" data-tab-id=\"<%= tab.id %>\" data-bs-toggle=\"tab\"> <span class=\"coreui-panel__tab-title\"><%= tab.title %></span> <% if (tab.count !== null) { %> <span class=\"coreui-panel__tab-count\">(<%= tab.count %>)<% } %> <%- tab.badge %> </a> </li>';\n\n  var Elements = {\n    /**\r\n     * получение контейнера панели\r\n     * @param panelId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getPanel: function getPanel(panelId) {\n      return $('#coreui-panel-' + panelId);\n    },\n    /**\r\n     * Получение контейнера с табов\r\n     * @param panelId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabsContainer: function getTabsContainer(panelId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel-tabs');\n    },\n    /**\r\n     * Получение контейнера таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabContainer: function getTabContainer(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId);\n    },\n    /**\r\n     * Получение контейнера с количеством таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabCount: function getTabCount(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-count');\n    },\n    /**\r\n     * Получение контейнера с текстом таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabTitle: function getTabTitle(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-title');\n    },\n    /**\r\n     * Получение контейнера с меткой таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabBadge: function getTabBadge(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-badge');\n    },\n    /**\r\n     * Получение контейнера таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabItemContainer: function getTabItemContainer(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-item-' + tabId);\n    },\n    /**\r\n     * Получение контейнера с текстом таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabItemTitle: function getTabItemTitle(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-item-title');\n    },\n    /**\r\n     * Получение контейнера с количеством таба\r\n     * @param panelId\r\n     * @param tabId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getTabItemCount: function getTabItemCount(panelId, tabId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel__tab-' + tabId + ' .coreui-panel__tab-item-count');\n    },\n    /**\r\n     *\r\n     * @param panelId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getContent: function getContent(panelId) {\n      return $('#coreui-panel-' + panelId + ' .coreui-panel-content');\n    },\n    /**\r\n     *\r\n     * @param panelId\r\n     * @param controlId\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\n    getControl: function getControl(panelId, controlId) {\n      return $('#coreui-panel-' + panelId + ' #coreui-panel-control-' + controlId);\n    },\n    /**\r\n     * Получение блокировки панели\r\n     * @param {string} panelId\r\n     * @return {jQuery}\r\n     */\n    getLock: function getLock(panelId) {\n      return $('#coreui-panel-' + panelId + ' > .coreui-panel-lock');\n    }\n  };\n\n  var Tab = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'tab',\n      title: '',\n      url: null,\n      urlContent: null,\n      urlCount: null,\n      urlBadge: null,\n      urlWindow: null,\n      count: null,\n      badge: null,\n      active: false,\n      disabled: false\n    },\n    /**\r\n     * Инициализация таба\r\n     * @param {object} panel\r\n     * @param {object} options\r\n     * @private\r\n     */\n    _init: function _init(panel, options) {\n      this._options = $.extend(true, {}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id == 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Получение опций таба\r\n     * @return {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Установка активного таба\r\n     */\n    setActive: function setActive() {\n      var tabTabElement = Elements.getTabContainer(this._panel.getId(), this.getId());\n      if (tabTabElement[0]) {\n        var tabTabsElement = Elements.getTabsContainer(this._panel.getId());\n        tabTabsElement.find('.nav-link').removeClass('active');\n        tabTabsElement.find('.nav-link.dropdown-toggle').removeClass('active');\n        tabTabsElement.find('.nav-link.dropdown-toggle .dropdown-item').removeClass('active');\n        tabTabElement.find('> a').addClass('active');\n        Private.trigger(this._panel, 'tab_click', this._panel, [this]);\n      }\n    },\n    /**\r\n     * Установка названия\r\n     * @param {string} title\r\n     */\n    setTitle: function setTitle(title) {\n      if (['string', 'number'].indexOf(_typeof(title)) < 0 || title.toString().length === 0) {\n        return;\n      }\n      var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n      tabTitleElement.text(title);\n    },\n    /**\r\n     * Установка количества\r\n     * @param {number|null} count\r\n     */\n    setCount: function setCount(count) {\n      var tabCountElement = Elements.getTabCount(this._panel.getId(), this.getId());\n      if (['string', 'number'].indexOf(_typeof(count)) < 0 || count.toString().length === 0) {\n        tabCountElement.remove();\n      } else {\n        if (tabCountElement[0]) {\n          tabCountElement.text(' (' + count + ')');\n        } else {\n          var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n          tabTitleElement.after('<span class=\"coreui-panel__tab-count\"> (' + count + ')>');\n        }\n      }\n    },\n    /**\r\n     * Установка количества\r\n     * @param {object} badge\r\n     */\n    setBadge: function setBadge(badge) {\n      var badgeRender = Private.renderBadge(badge);\n      if (badgeRender) {\n        var tabBadgeElement = Elements.getTabBadge(this._panel.getId(), this.getId());\n        if (tabBadgeElement[0]) {\n          tabBadgeElement.replaceWith(badgeRender);\n        } else {\n          var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n          tabTitleElement.after(badgeRender);\n        }\n      }\n    },\n    /**\r\n     *\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      var options = this.getOptions();\n      this._panel.on('panel_show', function () {\n        var tabsContainerElement = Elements.getTabContainer(that._panel.getId(), that.getId());\n        $('.nav-link', tabsContainerElement).click(function (event) {\n          Private.trigger(that._panel, 'tab_click', that, [that, event]);\n          if (options.url && options.url !== '#') {\n            location.href = options.url;\n          } else {\n            return false;\n          }\n        });\n        var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options._count)) >= 0 && options._count.toString().length > 0 ? options._count : null;\n        var urlCount = options.hasOwnProperty('urlCount') && typeof options.urlCount == 'string' && options.urlCount ? options.urlCount : null;\n        if (count === null && urlCount) {\n          that.setCount('<div class=\"spinner-border spinner-border-sm text-secondary\"></div>');\n          $.ajax({\n            url: urlCount,\n            method: 'get',\n            success: function success(result) {\n              try {\n                var response = typeof result === 'string' ? JSON.parse(result) : result;\n                if (Utils.isObject(response) && response.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(response._count)) >= 0 && response._count.toString().length > 0) {\n                  that.setCount(response._count);\n                } else {\n                  that.setCount(null);\n                }\n              } catch (e) {\n                that.setCount(null);\n              }\n            },\n            error: function error(xhr, textStatus, errorThrown) {\n              that.setCount(null);\n            }\n          });\n        }\n      });\n      var badge = options.hasOwnProperty('badge') && ['string', 'number'].indexOf(_typeof(options.badge)) >= 0 && options.badge.toString().length > 0 ? options.badge : null;\n      var urlBadge = options.hasOwnProperty('urlBadge') && typeof options.urlBadge == 'string' && options.urlBadge ? options.urlBadge : null;\n      if (badge === null && urlBadge) {\n        $.ajax({\n          url: urlBadge,\n          method: 'get',\n          success: function success(result) {\n            try {\n              var response = typeof result === 'string' ? JSON.parse(result) : result;\n              if (Utils.isObject(response) && response.hasOwnProperty('badge') && Utils.isObject(response.badge)) {\n                that.setBadge(response.badge);\n              }\n            } catch (e) {\n              // ignore\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Рендер содержимого\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      var title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n      var active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n      var disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n      var url = '';\n      if (options.hasOwnProperty('url') && typeof options.url == 'string' && options.url) {\n        url = options.url;\n      } else if (options.hasOwnProperty('urlWindow') && typeof options.urlWindow == 'string' && options.urlWindow) {\n        url = options.urlWindow;\n      } else {\n        url = '#';\n      }\n      var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options.count)) >= 0 && options.count.toString().length > 0 ? options.count : null;\n      var badge = options.hasOwnProperty('badge') ? Private.renderBadge(options.badge) : null;\n      return ejs.render(tpl['tabs/tab.html'], {\n        tab: {\n          id: this.getId(),\n          title: title,\n          active: active,\n          disabled: disabled,\n          url: url,\n          count: count,\n          badge: badge\n        }\n      });\n    }\n  };\n\n  var item = {\n    _id: null,\n    _panel: null,\n    _dropdown: null,\n    _options: {\n      id: null,\n      type: 'item',\n      active: false,\n      disabled: false,\n      url: '',\n      urlContent: null,\n      urlWindow: '',\n      title: '',\n      count: null\n    },\n    /**\r\n     * Инициализация таба\r\n     * @param {object} panel\r\n     * @param {object} dropdown\r\n     * @param {object} options\r\n     * @private\r\n     */\n    _init: function _init(panel, dropdown, options) {\n      this._options = $.extend(true, {}, this._options, options);\n      this._panel = panel;\n      this._dropdown = dropdown;\n      this._id = this._options.hasOwnProperty('id') && ['string', 'number'].indexOf(_typeof(this._options.id)) >= 0 && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Получение опций таба\r\n     * @return {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Установка активного таба\r\n     */\n    setActive: function setActive() {\n      var tabItemElement = Elements.getTabItemContainer(this._panel.getId(), this.getId());\n      if (tabItemElement[0]) {\n        var tabTabsElement = Elements.getTabsContainer(this._panel.getId());\n        tabTabsElement.find('.nav-link').removeClass('active');\n        tabTabsElement.find('.nav-link.dropdown-toggle').removeClass('active');\n        tabTabsElement.find('.nav-link.dropdown-toggle .dropdown-item').removeClass('active');\n        var tabElement = Elements.getTabContainer(this._panel.getId(), this._dropdown.getId());\n        tabElement.find('> a').addClass('active');\n        tabItemElement.find('> a').addClass('active');\n        Private.trigger(this._panel, 'tab_click', this._panel, [this]);\n      }\n    },\n    /**\r\n     * Установка названия\r\n     * @param {string} title\r\n     */\n    setTitle: function setTitle(title) {\n      if (['string', 'number'].indexOf(_typeof(title)) < 0 || title.toString().length === 0) {\n        return;\n      }\n      var tabTitleElement = Elements.getTabItemTitle(this._panel.getId(), this.getId());\n      tabTitleElement.text(title);\n    },\n    /**\r\n     * Установка количества\r\n     * @param {number} count\r\n     */\n    setCount: function setCount(count) {\n      var tabCountElement = Elements.getTabItemCount(this._panel.getId(), this.getId());\n      if (['string', 'number'].indexOf(_typeof(count)) < 0 || count.toString().length === 0) {\n        tabCountElement.remove();\n      } else {\n        if (tabCountElement[0]) {\n          tabCountElement.text('(' + count + ')');\n        } else {\n          var tabTitleElement = Elements.getTabItemTitle(this._panel.getId(), this.getId());\n          tabTitleElement.after('(' + count + ')');\n        }\n      }\n    },\n    /**\r\n     * Рендер содержимого\r\n     * @return {*}\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      options.title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n      options.active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n      options.disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n      var url = '';\n      if (options.hasOwnProperty('url') && typeof options._url == 'string' && options._url) {\n        url = options._url;\n      } else if (options.hasOwnProperty('urlWindow') && typeof options._urlWindow == 'string' && options._urlWindow) {\n        url = options._urlWindow;\n      } else {\n        url = '#';\n      }\n      var title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n      var active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n      var disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n      var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options._count)) >= 0 && options._count.toString().length > 0 ? options._count : null;\n      return ejs.render(tpl['tabs/tab-dropdown-item.html'], {\n        item: {\n          id: this.getId(),\n          type: 'item',\n          active: active,\n          disabled: disabled,\n          url: url,\n          title: title,\n          count: count\n        }\n      });\n    }\n  };\n\n  var Divider = {\n    _id: null,\n    _panel: null,\n    _dropdown: null,\n    _options: {\n      id: null,\n      type: 'divider'\n    },\n    /**\r\n     * Инициализация таба\r\n     * @param {object} panel\r\n     * @param {object} dropdown\r\n     * @param {object} options\r\n     * @private\r\n     */\n    _init: function _init(panel, dropdown, options) {\n      this._options = $.extend(true, {}, this._options, options);\n      this._panel = panel;\n      this._dropdown = dropdown;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id == 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Рендер содержимого\r\n     * @return {*}\r\n     */\n    render: function render() {\n      return tpl['tabs/tab-dropdown-divider.html'];\n    }\n  };\n\n  var TabDropdown = {\n    _id: null,\n    _panel: null,\n    _items: [],\n    _options: {\n      id: null,\n      type: 'dropdown',\n      title: '',\n      active: false,\n      disabled: false,\n      items: []\n    },\n    /**\r\n     * Инициализация таба\r\n     * @param {object} panel\r\n     * @param {object} options\r\n     * @private\r\n     */\n    _init: function _init(panel, options) {\n      this._options = $.extend(true, {}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id == 'string' && this._options.id ? this._options.id : Utils.hashCode();\n      var that = this;\n      if (this._options.hasOwnProperty('items') && Array.isArray(this._options.items) && this._options.items.length > 0) {\n        this._options.items.map(function (item$1) {\n          var tabType = item$1.hasOwnProperty('type') && typeof item$1.type === 'string' ? item$1.type : 'item';\n          var instance = null;\n          switch (tabType) {\n            case 'item':\n            default:\n              instance = $.extend(true, {}, item);\n              break;\n            case 'divider':\n              instance = $.extend(true, {}, Divider);\n              break;\n          }\n          if (instance) {\n            instance._init(panel, that, item$1);\n            that._items.push(instance);\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение идентификатора таба\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Инициализация событий\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      this._panel.on('panel_show', function () {\n        var tabsContainerElement = Elements.getTabContainer(that._panel.getId(), that.getId());\n        $('.dropdown-item', tabsContainerElement).click(function (event) {\n          var tabId = $(this).data('tab-id') || '';\n          var tab = that.getItem(tabId);\n          if (tab) {\n            Private.trigger(that._panel, 'tab_click', tab, [tab, event]);\n            var options = tab.getOptions();\n            if (options._url && options._url !== '#') {\n              location.href = options._url;\n            } else {\n              return false;\n            }\n          }\n        });\n      });\n    },\n    /**\r\n     * Получение опций таба\r\n     * @return {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Получение опций таба\r\n     * @property {string} itemId\r\n     * @return {object}\r\n     */\n    getItem: function getItem(itemId) {\n      var result = null;\n      var _iterator = _createForOfIteratorHelper(this._items),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          if (item.hasOwnProperty('getId') && typeof item.getId === 'function' && item.getId() == itemId) {\n            result = item;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return result;\n    },\n    /**\r\n     * Установка названия\r\n     * @param {string} title\r\n     */\n    setTitle: function setTitle(title) {\n      if (['string', 'number'].indexOf(_typeof(title)) < 0 || title.toString().length === 0) {\n        return;\n      }\n      var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n      tabTitleElement.text(title);\n    },\n    /**\r\n     * Установка количества\r\n     * @param {number} count\r\n     */\n    setCount: function setCount(count) {\n      var tabCountElement = Elements.getTabCount(this._panel.getId(), this.getId());\n      if (['string', 'number'].indexOf(_typeof(count)) < 0 || count.toString().length === 0) {\n        tabCountElement.remove();\n      } else {\n        if (tabCountElement[0]) {\n          tabCountElement.text('(' + count + ')');\n        } else {\n          var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n          tabTitleElement.after('(' + count + ')');\n        }\n      }\n    },\n    /**\r\n     * Установка метки\r\n     * @param {object} badge\r\n     */\n    setBadge: function setBadge(badge) {\n      var badgeRender = Private.renderBadge(badge);\n      if (badgeRender) {\n        var tabBadgeElement = Elements.getTabBadge(this._panel.getId(), this.getId());\n        if (tabBadgeElement[0]) {\n          tabBadgeElement.replaceWith(badgeRender);\n        } else {\n          var tabTitleElement = Elements.getTabTitle(this._panel.getId(), this.getId());\n          tabTitleElement.after(badgeRender);\n        }\n      }\n    },\n    /**\r\n     * Рендер содержимого\r\n     * @return {string}\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      var title = options.hasOwnProperty('title') && typeof options.title == 'string' && options.title ? options.title : '';\n      var active = options.hasOwnProperty('active') && typeof options.active == 'boolean' && options.active;\n      var disabled = options.hasOwnProperty('disabled') && typeof options.disabled == 'boolean' ? options.disabled : false;\n      var count = options.hasOwnProperty('count') && ['string', 'number'].indexOf(_typeof(options.count)) >= 0 && options.count.toString().length > 0 ? options.count : null;\n      var badge = options.hasOwnProperty('badge') ? Private.renderBadge(options.badge) : null;\n      var itemsContents = [];\n      this._items.map(function (item) {\n        itemsContents.push(item.render());\n      });\n      return ejs.render(tpl['tabs/tab-dropdown.html'], {\n        tab: {\n          id: this.getId(),\n          title: title,\n          active: active,\n          disabled: disabled,\n          count: count,\n          badge: badge,\n          itemsContents: itemsContents\n        }\n      });\n    }\n  };\n\n  var Private = {\n    /**\r\n     * @param panel\r\n     * @param name\r\n     * @param context\r\n     * @param params\r\n     */\n    trigger: function trigger(panel, name, context, params) {\n      params = params || [];\n      if (panel._events.hasOwnProperty(name) && panel._events[name].length > 0) {\n        for (var i = 0; i < panel._events[name].length; i++) {\n          var callback = panel._events[name][i].callback;\n          context = panel._events[name][i].context || context;\n          callback.apply(context, params);\n          if (panel._events[name][i].singleExec) {\n            panel._events[name].splice(i, 1);\n            i--;\n          }\n        }\n      }\n    },\n    /**\r\n     * Инициализация контролов и фильтров\r\n     * @param {Panel} panel\r\n     * @param {Array} controls\r\n     * @private\r\n     */\n    initControls: function initControls(panel, controls) {\n      controls.map(function (control) {\n        if (Utils.isObject(control) && typeof control.type === 'string') {\n          if (panel._controller.controls.hasOwnProperty(control.type)) {\n            var instance = $.extend(true, {}, panel._controller.controls[control.type]);\n            instance.init(panel, control);\n            panel._controls.push(instance);\n          }\n        }\n      });\n    },\n    /**\r\n     * Инициализация контролов и фильтров\r\n     * @param {Object} panel\r\n     * @param {Array}  tabItems\r\n     * @private\r\n     */\n    initTabs: function initTabs(panel, tabItems) {\n      tabItems.map(function (tabItem) {\n        if (Utils.isObject(tabItem)) {\n          var instance = null;\n          var tabType = tabItem.hasOwnProperty('type') && typeof tabItem.type === 'string' ? tabItem.type : 'tab';\n          if (tabType === 'tab') {\n            instance = $.extend(true, {}, Tab);\n          } else if (tabType === 'dropdown') {\n            instance = $.extend(true, {}, TabDropdown);\n          }\n          if (instance) {\n            instance._init(panel, tabItem);\n            panel._tabs.push(instance);\n            panel.on('panel_show', function () {\n              instance.initEvents();\n            });\n          }\n        }\n      });\n    },\n    /**\r\n     * Сборка табов\r\n     * @param {object} panel\r\n     * @param {object} tabs\r\n     */\n    renderTabs: function renderTabs(panel, tabs) {\n      var classes = [];\n      var tabsContents = [];\n      if (tabs.hasOwnProperty('position') && typeof tabs.position === 'string') {\n        switch (tabs.position) {\n          case 'top-center':\n            classes.push('justify-content-center');\n            break;\n          case 'top-right':\n            classes.push('justify-content-end');\n            break;\n          case 'left':\n            classes.push('left-tabs');\n            break;\n          case 'right':\n            classes.push('right-tabs');\n            break;\n        }\n      }\n      if (tabs.hasOwnProperty('type') && typeof tabs.type === 'string' && ['tabs', 'pills'].indexOf(tabs.type) >= 0) {\n        classes.push('gap-1');\n      }\n      panel._tabs.map(function (tab) {\n        tabsContents.push(tab.render());\n      });\n      return ejs.render(tpl['tabs.html'], {\n        classes: classes.join(' '),\n        type: tabs.hasOwnProperty('type') && typeof tabs.type === 'string' ? tabs.type : '',\n        fill: tabs.hasOwnProperty('fill') && typeof tabs.fill === 'string' ? tabs.fill : '',\n        tabsContents: tabsContents\n      });\n    },\n    /**\r\n     * Сборка элемента управления\r\n     * @param {object} panel\r\n     * @param {object} control\r\n     * @private\r\n     * @returns {HTMLElement|jQuery}\r\n     */\n    renderControl: function renderControl(panel, control) {\n      if (Utils.isObject(control)) {\n        var controlElement = $(ejs.render(tpl['panel-control.html'], {\n          id: control.getId()\n        }));\n        controlElement.append(control.render());\n        if (control.hasOwnProperty('initEvents') && typeof control.initEvents === 'function') {\n          panel.on('panel_show', function () {\n            control.initEvents();\n          });\n        }\n        return controlElement;\n      }\n    },\n    /**\r\n     * Сборка содержимого\r\n     * @param {object} panel\r\n     * @param {*} content\r\n     * @return {Array}\r\n     */\n    renderContents: function renderContents(panel, content) {\n      var result = [];\n      if (typeof content === 'string') {\n        result.push(content);\n      } else if (content instanceof Object) {\n        if (!Array.isArray(content)) {\n          content = [content];\n        }\n        for (var i = 0; i < content.length; i++) {\n          if (typeof content[i] === 'string') {\n            result.push(content[i]);\n          } else if (content[i] instanceof Object && typeof content[i].render === 'function' && typeof content[i].initEvents === 'function') {\n            result.push(content[i].render());\n            panel.one('content_show', content[i].initEvents, content[i], true);\n          } else if (!Array.isArray(content[i]) && content[i].hasOwnProperty('component') && typeof content[i].component === 'string' && content[i].component.substring(0, 6) === 'coreui') {\n            var name = content[i].component.split('.')[1];\n            if (CoreUI.hasOwnProperty(name) && Utils.isObject(CoreUI[name])) {\n              var instance = CoreUI[name].create(content[i]);\n              result.push(instance.render());\n              panel.one('content_show', instance.initEvents, instance);\n            }\n          } else {\n            result.push(JSON.stringify(content[i]));\n          }\n        }\n      }\n      return result;\n    },\n    /**\r\n     * Создание метки\r\n     * @param {object} badge\r\n     * @return {null}\r\n     * @private\r\n     */\n    renderBadge: function renderBadge(badge) {\n      if (!Utils.isObject(badge) || !badge.hasOwnProperty('text') || ['string', 'number'].indexOf(_typeof(badge.text)) < 0) {\n        return '';\n      }\n      var attr = [];\n      var type = badge.hasOwnProperty('type') && typeof badge.type === 'string' ? badge.type : 'danger';\n      var classes = badge.text.toString().length > 0 ? 'rounded-pill bg-' + type : 'rounded-circle p-1 bg-' + type;\n      if (badge.hasOwnProperty('attr') && Utils.isObject(badge.attr)) {\n        if (badge.attr.hasOwnProperty('class') && typeof badge.attr[\"class\"] === 'string') {\n          classes += ' ' + badge.attr[\"class\"];\n          delete badge.attr[\"class\"];\n        }\n        for (var _i = 0, _Object$entries = Object.entries(badge.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          if (typeof name === 'string' && ['string', 'number'].indexOf(_typeof(value)) >= 0) {\n            attr.push(name + '=\"' + value + '\"');\n          }\n        }\n      }\n      return ejs.render(tpl['badge.html'], {\n        badge: {\n          text: badge.text,\n          classes: classes ? ' ' + classes : '',\n          attr: attr.length > 0 ? ' ' + attr.join(' ') : ''\n        }\n      });\n    }\n  };\n\n  var AbstractTab = /*#__PURE__*/function () {\n    function AbstractTab() {\n      _classCallCheck(this, AbstractTab);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_title\", '');\n      _defineProperty(this, \"_disabled\", false);\n      _defineProperty(this, \"_active\", false);\n    }\n    return _createClass(AbstractTab, [{\n      key: \"setTitle\",\n      value:\n      /**\r\n       * @param {string} title\r\n       * @return {AbstractTab}\r\n       */\n      function setTitle(title) {\n        this._title = title;\n        return this;\n      }\n\n      /**\r\n       * Получение названия таба\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getTitle\",\n      value: function getTitle() {\n        return this._title;\n      }\n\n      /**\r\n       * Установка ID таба\r\n       * @param {string} id\r\n       * @return AbstractTab\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID таба\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка запрета на переход в таб\r\n       * @param {boolean} isDisabled\r\n       * @return {AbstractTab}\r\n       */\n    }, {\n      key: \"setDisabled\",\n      value: function setDisabled() {\n        var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._disabled = isDisabled;\n        return this;\n      }\n\n      /**\r\n       * Получение запрета на переход в таб\r\n       * @return {boolean}\r\n       */\n    }, {\n      key: \"isDisabled\",\n      value: function isDisabled() {\n        return this._disabled;\n      }\n\n      /**\r\n       * Установка информации активен ли таб\r\n       * @param {boolean} isActive\r\n       * @return {AbstractTab}\r\n       */\n    }, {\n      key: \"setActive\",\n      value: function setActive() {\n        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._active = isActive;\n        return this;\n      }\n\n      /**\r\n       * Получение информации активен ли таб\r\n       * @return {boolean}\r\n       */\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        return this._active;\n      }\n\n      /**\r\n       * Проебразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = {\n          id: this.getId(),\n          type: 'tab',\n          title: this.getTitle()\n        };\n        if (this.isActive()) {\n          result.active = true;\n        }\n        if (this.isDisabled()) {\n          result.disabled = true;\n        }\n        return result;\n      }\n    }]);\n  }();\n\n  function _callSuper$1(_this, derived, args) {\n    function isNativeReflectConstruct() {\n      if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n      if (Reflect.construct.sham) return false;\n      if (typeof Proxy === \"function\") return true;\n      try {\n        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (e) {\n        return false;\n      }\n    }\n    derived = _getPrototypeOf(derived);\n    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n  }\n  var HelperTab = /*#__PURE__*/function (_AbstractTab) {\n    /**\r\n     * @param {string} id\r\n     */\n    function HelperTab(id) {\n      var _this2;\n      _classCallCheck(this, HelperTab);\n      _this2 = _callSuper$1(this, HelperTab);\n      _defineProperty(_this2, \"BADGE_TYPE_DANGER\", 'danger');\n      _defineProperty(_this2, \"BADGE_TYPE_PRIMARY\", 'primary');\n      _defineProperty(_this2, \"BADGE_TYPE_SECONDARY\", 'secondary');\n      _defineProperty(_this2, \"BADGE_TYPE_SUCCESS\", 'success');\n      _defineProperty(_this2, \"BADGE_TYPE_WARNING\", 'warning');\n      _defineProperty(_this2, \"BADGE_TYPE_INFO\", 'info');\n      _defineProperty(_this2, \"BADGE_TYPE_LIGHT\", 'light');\n      _defineProperty(_this2, \"BADGE_TYPE_DARK\", 'dark');\n      _defineProperty(_this2, \"_url\", null);\n      _defineProperty(_this2, \"_urlContent\", null);\n      _defineProperty(_this2, \"_urlCount\", null);\n      _defineProperty(_this2, \"_urlBadge\", null);\n      _defineProperty(_this2, \"_urlWindow\", null);\n      _defineProperty(_this2, \"_count\", null);\n      _defineProperty(_this2, \"_badge\", null);\n      _this2.setId(id);\n      return _this2;\n    }\n\n    /**\r\n     * Установка количества для таба\r\n     * @param {string|null} count\r\n     * @return {this}\r\n     */\n    _inherits(HelperTab, _AbstractTab);\n    return _createClass(HelperTab, [{\n      key: \"setCount\",\n      value: function setCount() {\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._count = count;\n        return this;\n      }\n\n      /**\r\n       * Получение количества для таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getCount\",\n      value: function getCount() {\n        return this._count;\n      }\n\n      /**\r\n       * Установка метки для таба\r\n       * @param {string|null} text\r\n       * @param {string} type\r\n       * @param {array} attr\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setBadge\",\n      value: function setBadge() {\n        var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.BADGE_TYPE_DANGER;\n        var attr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        if (text === null) {\n          this._badge = null;\n        } else {\n          this._badge = {\n            text: text,\n            type: type,\n            attr: attr\n          };\n        }\n        return this;\n      }\n\n      /**\r\n       * Установка метки для таба в виде точки\r\n       * @param {string} type\r\n       * @param {array} attr\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setBadgeDot\",\n      value: function setBadgeDot() {\n        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.BADGE_TYPE_DANGER;\n        var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        this._badge = {\n          text: '',\n          type: type,\n          attr: attr\n        };\n        return this;\n      }\n\n      /**\r\n       * Получение метки для таба\r\n       * @return {object|null}\r\n       */\n    }, {\n      key: \"getBadge\",\n      value: function getBadge() {\n        return this._badge;\n      }\n\n      /**\r\n       * Установка url таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrl\",\n      value: function setUrl() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._url = url;\n        return this;\n      }\n\n      /**\r\n       * Установка url таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrl\",\n      value: function getUrl() {\n        return this._url;\n      }\n\n      /**\r\n       * Получение метки для таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlContent\",\n      value: function setUrlContent() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlContent = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url таба для загрузки содержимого\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlContent\",\n      value: function getUrlContent() {\n        return this._urlContent;\n      }\n\n      /**\r\n       * Установка url количества таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlCount\",\n      value: function setUrlCount() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlCount = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url количества таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlCount\",\n      value: function getUrlCount() {\n        return this._urlCount;\n      }\n\n      /**\r\n       * Установка url метки таба\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlBadge\",\n      value: function setUrlBadge() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlBadge = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url метки таба\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlBadge\",\n      value: function getUrlBadge() {\n        return this._urlBadge;\n      }\n\n      /**\r\n       * Установка url для окна браузера\r\n       * @param {string|null} url\r\n       * @return {this}\r\n       */\n    }, {\n      key: \"setUrlWindow\",\n      value: function setUrlWindow() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlWindow = url;\n        return this;\n      }\n\n      /**\r\n       * Получение url для окна браузера\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlWindow\",\n      value: function getUrlWindow() {\n        return this._urlWindow;\n      }\n\n      /**\r\n       * Convert tab to object\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = _get(_getPrototypeOf(HelperTab.prototype), \"toObject\", this).call(this);\n        var url = this.getUrl();\n        if (url !== null) {\n          result.url = url;\n        }\n        var urlContent = this.getUrlContent();\n        if (urlContent !== null) {\n          result.urlContent = urlContent;\n        }\n        var urlWindow = this.getUrlWindow();\n        if (urlWindow !== null) {\n          result.urlWindow = urlWindow;\n        }\n        var count = this.getCount();\n        if (count !== null) {\n          result.count = count;\n        }\n        var badge = this.getBadge();\n        if (badge !== null) {\n          result.badge = badge;\n        }\n        var urlCount = this.getUrlCount();\n        if (urlCount !== null) {\n          result.urlCount = urlCount;\n        }\n        var urlBadge = this.getUrlBadge();\n        if (urlBadge !== null) {\n          result.urlBadge = urlBadge;\n        }\n        return result;\n      }\n    }]);\n  }(AbstractTab);\n\n  /**\r\n   *\r\n   */\n  var DropdownItem = /*#__PURE__*/function () {\n    /**\r\n     * @param {string} id\r\n     * @param {string} title\r\n     */\n    function DropdownItem(id, title) {\n      _classCallCheck(this, DropdownItem);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_title\", '');\n      _defineProperty(this, \"_url\", null);\n      _defineProperty(this, \"_urlContent\", null);\n      _defineProperty(this, \"_urlCount\", null);\n      _defineProperty(this, \"_urlWindow\", null);\n      _defineProperty(this, \"_count\", null);\n      _defineProperty(this, \"_disabled\", false);\n      _defineProperty(this, \"_active\", false);\n      if (id) {\n        this._id = id;\n      } else {\n        this._id = String(Math.abs(Math.floor(Math.random() * 4294967295)));\n      }\n      this._title = title;\n    }\n\n    /**\r\n     * Set item ID\r\n     * @param {string} id\r\n     */\n    return _createClass(DropdownItem, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Get item ID\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set item title\r\n       * @param {string} title\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setTitle\",\n      value: function setTitle(title) {\n        this._title = title;\n        return this;\n      }\n\n      /**\r\n       * Get item title\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getTitle\",\n      value: function getTitle() {\n        return this._title;\n      }\n\n      /**\r\n       * Set item count\r\n       * @param {string|null} count\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setCount\",\n      value: function setCount() {\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._count = count;\n        return this;\n      }\n\n      /**\r\n       * Get item count\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getCount\",\n      value: function getCount() {\n        return this._count;\n      }\n\n      /**\r\n       * Set item URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrl\",\n      value: function setUrl() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._url = url;\n        return this;\n      }\n\n      /**\r\n       * Get item URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrl\",\n      value: function getUrl() {\n        return this._url;\n      }\n\n      /**\r\n       * Set content URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrlContent\",\n      value: function setUrlContent() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlContent = url;\n        return this;\n      }\n\n      /**\r\n       * Get content URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlContent\",\n      value: function getUrlContent() {\n        return this._urlContent;\n      }\n\n      /**\r\n       * Set count URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrlCount\",\n      value: function setUrlCount() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlCount = url;\n        return this;\n      }\n\n      /**\r\n       * Get count URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlCount\",\n      value: function getUrlCount() {\n        return this._urlCount;\n      }\n\n      /**\r\n       * Set window URL\r\n       * @param {string|null} url\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setUrlWindow\",\n      value: function setUrlWindow() {\n        var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this._urlWindow = url;\n        return this;\n      }\n\n      /**\r\n       * Get window URL\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getUrlWindow\",\n      value: function getUrlWindow() {\n        return this._urlWindow;\n      }\n\n      /**\r\n       * Set disabled state\r\n       * @param {boolean} isDisabled\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setDisabled\",\n      value: function setDisabled() {\n        var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._disabled = isDisabled;\n        return this;\n      }\n\n      /**\r\n       * Set active state\r\n       * @param {boolean} isActive\r\n       * @return {DropdownItem}\r\n       */\n    }, {\n      key: \"setActive\",\n      value: function setActive() {\n        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this._active = isActive;\n        return this;\n      }\n\n      /**\r\n       * Check if item is active\r\n       * @return {boolean}\r\n       */\n    }, {\n      key: \"isActive\",\n      value: function isActive() {\n        return this._active;\n      }\n\n      /**\r\n       * Convert item to plain object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = {\n          id: this.getId(),\n          type: 'tab',\n          title: this.getTitle(),\n          disabled: this._disabled,\n          active: this._active\n        };\n        var url = this.getUrl();\n        if (url !== null) {\n          result.url = url;\n        }\n        var count = this.getCount();\n        if (count !== null) {\n          result.count = count;\n        }\n        var urlContent = this.getUrlContent();\n        if (urlContent !== null) {\n          result.urlContent = urlContent;\n        }\n        var urlCount = this.getUrlCount();\n        if (urlCount !== null) {\n          result.urlCount = urlCount;\n        }\n        var urlWindow = this.getUrlWindow();\n        if (urlWindow !== null) {\n          result.urlWindow = urlWindow;\n        }\n        return result;\n      }\n    }]);\n  }();\n\n  function _callSuper(_this, derived, args) {\n    function isNativeReflectConstruct() {\n      if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n      if (Reflect.construct.sham) return false;\n      if (typeof Proxy === \"function\") return true;\n      try {\n        return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (e) {\n        return false;\n      }\n    }\n    derived = _getPrototypeOf(derived);\n    return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n  }\n  var HelperTabDropdown = /*#__PURE__*/function (_AbstractTab) {\n    /**\r\n     * @param {string} title\r\n     */\n    function HelperTabDropdown(title) {\n      var _this2;\n      _classCallCheck(this, HelperTabDropdown);\n      _this2 = _callSuper(this, HelperTabDropdown);\n      _defineProperty(_this2, \"_items\", []);\n      _this2.setTitle(title);\n      return _this2;\n    }\n\n    /**\r\n     * Add item to the dropdown list\r\n     * @param {string} title\r\n     * @param {string|null} id\r\n     * @return {DropdownItem}\r\n     */\n    _inherits(HelperTabDropdown, _AbstractTab);\n    return _createClass(HelperTabDropdown, [{\n      key: \"addItem\",\n      value: function addItem(title) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var item = new DropdownItem(id, title);\n        this._items.push(item);\n        return item;\n      }\n\n      /**\r\n       * Add divider to the dropdown\r\n       * @return {void}\r\n       */\n    }, {\n      key: \"addDivider\",\n      value: function addDivider() {\n        this._items.push({\n          type: 'divider'\n        });\n      }\n\n      /**\r\n       * Get dropdown items\r\n       * @return {Array}\r\n       */\n    }, {\n      key: \"getItems\",\n      value: function getItems() {\n        return this._items;\n      }\n\n      /**\r\n       * Установка активности для таба\r\n       * @param {string} tabId\r\n       */\n    }, {\n      key: \"setActiveItem\",\n      value: function setActiveItem(tabId) {\n        this._items.map(function (item) {\n          if (item.getId() === tabId) {\n            item.setActive(true);\n          }\n        });\n      }\n\n      /**\r\n       * Convert dropdown to object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var result = _get(_getPrototypeOf(HelperTabDropdown.prototype), \"toObject\", this).call(this);\n        result.type = 'dropdown';\n        result.items = this._items.map(function (item) {\n          return typeof item.toObject === 'function' ? item.toObject() : item;\n        });\n        return result;\n      }\n    }]);\n  }(AbstractTab);\n\n  /**\r\n   *\r\n   */\n  var HelperControlButton = /*#__PURE__*/function () {\n    /**\r\n     * @param {string}      content\r\n     * @param {string|null} id\r\n     */\n    function HelperControlButton(content) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      _classCallCheck(this, HelperControlButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      _defineProperty(this, \"_attr\", {\n        'class': \"btn btn-outline-secondary\"\n      });\n      this.setContent(content);\n      this.setId(id || String(Math.abs(Math.floor(Math.random() * 4294967295))));\n    }\n\n    /**\r\n     * Установка содержимого кнопки\r\n     * @param {string} content\r\n     * @return {HelperControlButton}\r\n     */\n    return _createClass(HelperControlButton, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка js функции выполняющейся при клике\r\n       * @param {function|string} onclick\r\n       * @return {HelperControlButton}\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение js функции выполняющейся при клике\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Установка ID контрола\r\n       * @param {string} id\r\n       * @return {HelperControlButton}\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'button',\n          content: this.getContent(),\n          onClick: this.getOnClick(),\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupButton = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор кнопки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupButton() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      _defineProperty(this, \"_attr\", {\n        'class': 'btn btn-secondary'\n      });\n      this.setId(id || Math.random().toString(36).substring(2, 11));\n    }\n\n    /**\r\n     * Установка содержимого кнопки\r\n     * @param {string} content - Текст кнопки\r\n     * @return {ButtonGroupButton} Возвращает текущий экземпляр для цепочки вызовов\r\n     */\n    return _createClass(ButtonGroupButton, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string} Текущий текст кнопки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка обработчика клика\r\n       * @param {string} onclick - JavaScript код для выполнения при клике\r\n       * @return {ButtonGroupButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение обработчика клика\r\n       * @return {string} Текущий обработчик клика\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Установка идентификатора кнопки\r\n       * @param {string} id - Новый идентификатор\r\n       * @return {ButtonGroupButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора кнопки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование кнопки в объект\r\n       * @return {Object} Объект с данными кнопки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'button',\n          content: this._content,\n          onClick: this._onclick,\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdownLink = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор ссылки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupDropdownLink() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupDropdownLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_link\", '');\n      if (id) {\n        this._id = id;\n      } else {\n        this._id = 'link-' + Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n      }\n    }\n\n    /**\r\n     * Установка идентификатора ссылки\r\n     * @param {string} id - Новый идентификатор\r\n     */\n    return _createClass(ButtonGroupDropdownLink, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Получение идентификатора ссылки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого ссылки\r\n       * @param {string} content - Текст ссылки\r\n       * @return {ButtonGroupDropdownLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого ссылки\r\n       * @return {string} Текущий текст ссылки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка URL ссылки\r\n       * @param {string} link - URL адрес\r\n       * @return {ButtonGroupDropdownLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setLink\",\n      value: function setLink(link) {\n        this._link = link;\n        return this;\n      }\n\n      /**\r\n       * Получение URL ссылки\r\n       * @return {string} Текущий URL\r\n       */\n    }, {\n      key: \"getLink\",\n      value: function getLink() {\n        return this._link;\n      }\n\n      /**\r\n       * Преобразование ссылки в объект\r\n       * @return {Object} Объект с данными ссылки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'link',\n          content: this._content,\n          link: this._link\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdownButton = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор кнопки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupDropdownButton() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupDropdownButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      this.setId(id || 'btn-' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5));\n    }\n\n    /**\r\n     * Установка идентификатора кнопки\r\n     * @param {string} id - Новый идентификатор\r\n     * @return {ButtonGroupDropdownButton} Возвращает текущий экземпляр для цепочки вызовов\r\n     */\n    return _createClass(ButtonGroupDropdownButton, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора кнопки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого кнопки\r\n       * @param {string} content - Текст кнопки\r\n       * @return {ButtonGroupDropdownButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string} Текущий текст кнопки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка обработчика клика\r\n       * @param {string} onclick - JavaScript код для выполнения при клике\r\n       * @return {ButtonGroupDropdownButton} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение обработчика клика\r\n       * @return {string} Текущий обработчик клика\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Преобразование кнопки в объект\r\n       * @return {Object} Объект с данными кнопки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'button',\n          content: this._content,\n          onClick: this._onclick\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdownDivider = /*#__PURE__*/function () {\n    function ButtonGroupDropdownDivider() {\n      _classCallCheck(this, ButtonGroupDropdownDivider);\n    }\n    return _createClass(ButtonGroupDropdownDivider, [{\n      key: \"toObject\",\n      value:\n      /**\r\n       * Преобразование разделителя в объект\r\n       * @return {Object} Объект с типом разделителя\r\n       */\n      function toObject() {\n        return {\n          type: 'divider'\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupDropdown = /*#__PURE__*/function () {\n    /**\r\n     * @param {string|null} id\r\n     */\n    function ButtonGroupDropdown() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupDropdown);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_position\", ButtonGroupDropdown.POSITION_END);\n      _defineProperty(this, \"_items\", []);\n      _defineProperty(this, \"_itemIndex\", 1);\n      _defineProperty(this, \"_attr\", {\n        'class': 'btn btn-secondary'\n      });\n      this.setId(id || Math.random().toString(36).substring(2, 11));\n    }\n\n    /**\r\n     * Установка содержимого кнопки выпадающего меню\r\n     * @param {string} content\r\n     * @return {ButtonGroupDropdown}\r\n     */\n    return _createClass(ButtonGroupDropdown, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка позиции раскрытия меню\r\n       * @param {string} position\r\n       * @return {ButtonGroupDropdown}\r\n       */\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(position) {\n        this._position = position;\n        return this;\n      }\n\n      /**\r\n       * Получение позиции раскрытия меню\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getPosition\",\n      value: function getPosition() {\n        return this._position;\n      }\n\n      /**\r\n       * Установка идентификатора\r\n       * @param {string} id\r\n       * @return {ButtonGroupDropdown}\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Добавление ссылки в выпадающее меню\r\n       * @param {string} content\r\n       * @param {string} link\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupDropdownLink}\r\n       */\n    }, {\n      key: \"addItemLink\",\n      value: function addItemLink(content, link) {\n        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new ButtonGroupDropdownLink(id);\n        item.setContent(content);\n        item.setLink(link);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление кнопки в выпадающее меню\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupDropdownButton}\r\n       */\n    }, {\n      key: \"addItemButton\",\n      value: function addItemButton(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new ButtonGroupDropdownButton(id);\n        item.setContent(content);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление разделителя в меню\r\n       * @return {ButtonGroupDropdownDivider}\r\n       */\n    }, {\n      key: \"addItemDivider\",\n      value: function addItemDivider() {\n        var item = new ButtonGroupDropdownDivider();\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var items = this._items.map(function (item) {\n          return item.toObject();\n        });\n        return {\n          id: this._id,\n          type: 'dropdown',\n          content: this._content,\n          position: this._position,\n          attr: this._attr,\n          items: items\n        };\n      }\n    }]);\n  }();\n  _defineProperty(ButtonGroupDropdown, \"POSITION_START\", 'start');\n  _defineProperty(ButtonGroupDropdown, \"POSITION_END\", 'end');\n\n  /**\r\n   *\r\n   */\n  var ButtonGroupLink = /*#__PURE__*/function () {\n    /**\r\n     * Конструктор класса\r\n     * @param {string|null} id - Идентификатор ссылки (если не указан, будет сгенерирован автоматически)\r\n     */\n    function ButtonGroupLink() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, ButtonGroupLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_link\", '');\n      _defineProperty(this, \"_attr\", {});\n      this.setId(id || Math.random().toString(36).substring(2, 9));\n    }\n\n    /**\r\n     * Установка идентификатора ссылки\r\n     * @param {string} id - Новый идентификатор\r\n     * @return {ButtonGroupLink} Возвращает текущий экземпляр для цепочки вызовов\r\n     */\n    return _createClass(ButtonGroupLink, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение идентификатора ссылки\r\n       * @return {string} Текущий идентификатор\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого ссылки\r\n       * @param {string} content - Текст ссылки\r\n       * @return {ButtonGroupLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого ссылки\r\n       * @return {string} Текущий текст ссылки\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка URL ссылки\r\n       * @param {string} link - URL адрес\r\n       * @return {ButtonGroupLink} Возвращает текущий экземпляр для цепочки вызовов\r\n       */\n    }, {\n      key: \"setLink\",\n      value: function setLink(link) {\n        this._link = link;\n        return this;\n      }\n\n      /**\r\n       * Получение URL ссылки\r\n       * @return {string} Текущий URL\r\n       */\n    }, {\n      key: \"getLink\",\n      value: function getLink() {\n        return this._link;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование ссылки в объект\r\n       * @return {Object} Объект с данными ссылки\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this._id,\n          type: 'link',\n          content: this._content,\n          link: this._link,\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var HelperControlButtonGroup = /*#__PURE__*/function () {\n    /**\r\n     * @param {string|null} id\r\n     */\n    function HelperControlButtonGroup() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, HelperControlButtonGroup);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_buttons\", []);\n      _defineProperty(this, \"_btnIndex\", 1);\n      _defineProperty(this, \"_attr\", {\n        'class': \"btn-group\"\n      });\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка ID контрола\r\n     * @param {string} id\r\n     */\n    return _createClass(HelperControlButtonGroup, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Добавление ссылки\r\n       * @param {string} content\r\n       * @param {string} link\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupLink}\r\n       */\n    }, {\n      key: \"addBtnLink\",\n      value: function addBtnLink(content, link) {\n        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!id) {\n          id = \"btn\".concat(this._btnIndex);\n        }\n        var item = new ButtonGroupLink(id);\n        item.setContent(content);\n        item.setLink(link);\n        this._buttons.push(item);\n        this._btnIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление кнопки\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupButton}\r\n       */\n    }, {\n      key: \"addBtnButton\",\n      value: function addBtnButton(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"btn\".concat(this._btnIndex);\n        }\n        var item = new ButtonGroupButton(id);\n        item.setContent(content);\n        this._buttons.push(item);\n        this._btnIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление выпадающего меню\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {ButtonGroupDropdown}\r\n       */\n    }, {\n      key: \"addBtnDropdown\",\n      value: function addBtnDropdown(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"btn\".concat(this._btnIndex);\n        }\n        var item = new ButtonGroupDropdown(id);\n        item.setContent(content);\n        this._buttons.push(item);\n        this._btnIndex++;\n        return item;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var buttons = this._buttons.map(function (button) {\n          return button.toObject();\n        });\n        return {\n          id: this.getId(),\n          type: 'buttonGroup',\n          buttons: buttons,\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  var HelperControlCustom = /*#__PURE__*/function () {\n    /**\r\n     * @param {string}      content\r\n     * @param {string|null} id\r\n     */\n    function HelperControlCustom(content) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      _classCallCheck(this, HelperControlCustom);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      this.setContent(content);\n      this.setId(id || String(Math.floor(Math.random() * 4294967296)));\n    }\n\n    /**\r\n     * Set control ID\r\n     * @param {string} id\r\n     */\n    return _createClass(HelperControlCustom, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n      }\n\n      /**\r\n       * Get control ID\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set control content\r\n       * @param {string} content\r\n       * @return {HelperControlCustom} Returns self for method chaining\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Get control content\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Convert to plain object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'custom',\n          content: this.getContent()\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var DropdownLink = /*#__PURE__*/function () {\n    /**\r\n     * @param id\r\n     */\n    function DropdownLink() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, DropdownLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_link\", '');\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка ID контрола\r\n     * @param {string} id\r\n     * @return {DropdownLink}\r\n     */\n    return _createClass(DropdownLink, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого ссылки\r\n       * @param {string} content\r\n       * @return {DropdownLink}\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого ссылки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка ссылки\r\n       * @param {string} link\r\n       * @return {DropdownLink}\r\n       */\n    }, {\n      key: \"setLink\",\n      value: function setLink(link) {\n        this._link = link;\n        return this;\n      }\n\n      /**\r\n       * Получение ссылки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getLink\",\n      value: function getLink() {\n        return this._link;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'link',\n          content: this.getContent(),\n          link: this.getLink()\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var DropdownButton = /*#__PURE__*/function () {\n    /**\r\n      * @param id\r\n     */\n    function DropdownButton() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      _classCallCheck(this, DropdownButton);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка ID контрола\r\n     * @param {string} id\r\n     * @return {DropdownButton}\r\n     */\n    return _createClass(DropdownButton, [{\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Установка содержимого кнопки\r\n       * @param {string} content\r\n       * @return {DropdownButton}\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка JavaScript-функции, выполняющейся при клике\r\n       * @param {string} onclick\r\n       * @return {DropdownButton}\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Получение JavaScript-функции, выполняющейся при клике\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'button',\n          content: this.getContent(),\n          onClick: this.getOnClick()\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var DropdownDivider = /*#__PURE__*/function () {\n    function DropdownDivider() {\n      _classCallCheck(this, DropdownDivider);\n    }\n    return _createClass(DropdownDivider, [{\n      key: \"toObject\",\n      value:\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n      function toObject() {\n        return {\n          type: 'divider'\n        };\n      }\n    }]);\n  }();\n\n  /**\r\n   *\r\n   */\n  var HelperControlDropdown = /*#__PURE__*/function () {\n    /**\r\n     @param {string}      content\r\n     @param {string|null} id\r\n     */\n    function HelperControlDropdown(content) {\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      _classCallCheck(this, HelperControlDropdown);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_position\", 'end');\n      _defineProperty(this, \"_items\", []);\n      _defineProperty(this, \"_itemIndex\", 1);\n      _defineProperty(this, \"_attr\", {\n        'class': \"btn btn-secondary\"\n      });\n      this.setContent(content);\n      this.setId(id || Math.floor(Math.random() * 4294967296).toString());\n    }\n\n    /**\r\n     * Установка содержимого кнопки\r\n     * @param {string} content\r\n     * @return {HelperControlDropdown}\r\n     */\n    return _createClass(HelperControlDropdown, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Получение содержимого кнопки\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Установка позиции раскрывающегося списка\r\n       * @param {string} position\r\n       * @return {HelperControlDropdown}\r\n       */\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(position) {\n        this._position = position;\n        return this;\n      }\n\n      /**\r\n       * Получение позиции раскрывающегося списка\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getPosition\",\n      value: function getPosition() {\n        return this._position;\n      }\n\n      /**\r\n       * Установка ID контрола\r\n       * @param {string} id\r\n       * @return {HelperControlDropdown}\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Получение ID контрола\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Добавление ссылки\r\n       * @param {string} content\r\n       * @param {string} link\r\n       * @param {string|null} id\r\n       * @return {DropdownLink}\r\n       */\n    }, {\n      key: \"addItemLink\",\n      value: function addItemLink(content, link) {\n        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new DropdownLink(id);\n        item.setContent(content);\n        item.setLink(link);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление кнопки\r\n       * @param {string} content\r\n       * @param {string|null} id\r\n       * @return {DropdownButton}\r\n       */\n    }, {\n      key: \"addItemButton\",\n      value: function addItemButton(content) {\n        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        if (!id) {\n          id = \"item\".concat(this._itemIndex);\n        }\n        var item = new DropdownButton(id);\n        item.setContent(content);\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Добавление разделителя\r\n       * @return {DropdownDivider}\r\n       */\n    }, {\n      key: \"addItemDivider\",\n      value: function addItemDivider() {\n        var item = new DropdownDivider();\n        this._items.push(item);\n        this._itemIndex++;\n        return item;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Получение значения атрибута\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Преобразование в объект\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        var items = this._items.map(function (item) {\n          return item.toObject();\n        });\n        return {\n          id: this.getId(),\n          type: 'dropdown',\n          content: this.getContent(),\n          position: this.getPosition(),\n          attr: this._attr,\n          items: items\n        };\n      }\n    }]);\n  }();\n  _defineProperty(HelperControlDropdown, \"POSITION_START\", 'start');\n  _defineProperty(HelperControlDropdown, \"POSITION_END\", 'end');\n\n  var HelperControlLink = /*#__PURE__*/function () {\n    /**\r\n     * @param {string}      content\r\n     * @param {string}      href\r\n     * @param {string|null} id\r\n     */\n    function HelperControlLink(content, href) {\n      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      _classCallCheck(this, HelperControlLink);\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_href\", '');\n      _defineProperty(this, \"_content\", '');\n      _defineProperty(this, \"_onclick\", '');\n      _defineProperty(this, \"_attr\", {});\n      this.setContent(content);\n      this.setHref(href);\n      this.setId(id || String(Math.floor(Math.random() * 4294967296)));\n    }\n\n    /**\r\n     * Set link content\r\n     * @param {string} content\r\n     * @return {HelperControlLink}\r\n     */\n    return _createClass(HelperControlLink, [{\n      key: \"setContent\",\n      value: function setContent(content) {\n        this._content = content;\n        return this;\n      }\n\n      /**\r\n       * Get link content\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this._content;\n      }\n\n      /**\r\n       * Set href URL\r\n       * @param {string} href\r\n       * @return {HelperControlLink}\r\n       */\n    }, {\n      key: \"setHref\",\n      value: function setHref(href) {\n        this._href = href;\n        return this;\n      }\n\n      /**\r\n       * Get href URL\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getHref\",\n      value: function getHref() {\n        return this._href;\n      }\n\n      /**\r\n       * Set onClick handler\r\n       * @param {function} onclick\r\n       * @return {HelperControlLink}\r\n       */\n    }, {\n      key: \"setOnClick\",\n      value: function setOnClick(onclick) {\n        this._onclick = onclick;\n        return this;\n      }\n\n      /**\r\n       * Get onClick handler\r\n       * @return {function}\r\n       */\n    }, {\n      key: \"getOnClick\",\n      value: function getOnClick() {\n        return this._onclick;\n      }\n\n      /**\r\n       * Set control ID\r\n       * @param {string} id\r\n       */\n    }, {\n      key: \"setId\",\n      value: function setId(id) {\n        this._id = id;\n        return this;\n      }\n\n      /**\r\n       * Get control ID\r\n       * @return {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Set multiple attributes\r\n       * @param {Object} attr\r\n       */\n    }, {\n      key: \"setAttr\",\n      value: function setAttr(attr) {\n        for (var _i = 0, _Object$entries = Object.entries(attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          this._attr[name] = value;\n        }\n        return this;\n      }\n\n      /**\r\n       * Get attribute value\r\n       * @param {string} name\r\n       * @return {string|null}\r\n       */\n    }, {\n      key: \"getAttr\",\n      value: function getAttr(name) {\n        return this._attr[name] || null;\n      }\n\n      /**\r\n       * Convert to plain object\r\n       * @return {Object}\r\n       */\n    }, {\n      key: \"toObject\",\n      value: function toObject() {\n        return {\n          id: this.getId(),\n          type: 'link',\n          content: this.getContent(),\n          href: this.getHref(),\n          onClick: this.getOnClick(),\n          attr: this._attr\n        };\n      }\n    }]);\n  }();\n\n  var Panel = /*#__PURE__*/function () {\n    /**\r\n     *\r\n     * @param {object} options\r\n     */\n    function Panel(options) {\n      _classCallCheck(this, Panel);\n      _defineProperty(this, \"_options\", {\n        id: '',\n        lang: 'en',\n        langList: {},\n        title: null,\n        subtitle: null,\n        controls: [],\n        contentFit: null,\n        content: null,\n        contentUrl: null,\n        wrapperType: 'card',\n        tabs: {\n          type: 'tabs',\n          // pills, underline\n          position: 'top-left',\n          // top-center, top-right, left, right\n          width: 200,\n          fill: '',\n          // fill, justify\n          items: []\n        }\n      });\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_tabs\", []);\n      _defineProperty(this, \"_controls\", []);\n      _defineProperty(this, \"_events\", {});\n      _defineProperty(this, \"_controller\", null);\n      _defineProperty(this, \"controls\", {\n        button: function button(content) {\n          var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return new HelperControlButton(content, id);\n        },\n        buttonGroup: function buttonGroup() {\n          var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          return new HelperControlButtonGroup(id);\n        },\n        custom: function custom(content) {\n          var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return new HelperControlCustom(content, id);\n        },\n        dropdown: function dropdown(content) {\n          var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return new HelperControlDropdown(content, id);\n        },\n        link: function link(content, _link) {\n          var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          return new HelperControlLink(content, _link, id);\n        }\n      });\n      this._controller = Controller;\n      options = Utils.isObject(options) ? options : {};\n      this._options = $.extend(true, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    }\n\n    /**\r\n     * Инициализация событий\r\n     */\n    return _createClass(Panel, [{\n      key: \"initEvents\",\n      value: function initEvents() {\n        var that = this;\n        this.on('tab_click', function (tab, event) {\n          var options = tab.getOptions();\n          var urlContent = options.hasOwnProperty('urlContent') && typeof options.urlContent == 'string' && options.urlContent ? options.urlContent : '#';\n          if (urlContent && urlContent !== '#') {\n            that.loadContent(urlContent);\n          }\n          var urlWindow = options.hasOwnProperty('urlWindow') && typeof options.urlWindow == 'string' && options.urlWindow ? options.urlWindow : null;\n          if (urlWindow) {\n            window.history.pushState({\n              path: urlWindow\n            }, '', urlWindow);\n          }\n        });\n        Private.trigger(this, 'panel_show');\n        if (this._options.content !== null) {\n          Private.trigger(this, 'content_show');\n        }\n      }\n\n      /**\r\n       * Получение идентификатора\r\n       * @returns {string}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * Получение опций\r\n       * @returns {object}\r\n       */\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return $.extend(true, {}, this._options);\n      }\n\n      /**\r\n       * Блокировка панели\r\n       * @param {string} text\r\n       */\n    }, {\n      key: \"lock\",\n      value: function lock(text) {\n        var container = Elements.getPanel(this.getId());\n        if (container[0] && !container.find('.coreui-panel-lock')[0]) {\n          var html = ejs.render(tpl['loader.html'], {\n            loading: typeof text === 'string' ? text : this.getLang().loading\n          });\n          container.prepend(html);\n        }\n      }\n\n      /**\r\n       * Разблокировка панели\r\n       */\n    }, {\n      key: \"unlock\",\n      value: function unlock() {\n        Elements.getLock(this.getId()).hide(50, function () {\n          $(this).remove();\n        });\n      }\n\n      /**\r\n       * Загрузка данных и установка их в панель\r\n       * @param {string}      url\r\n       * @param {string|null} urlWindow\r\n       */\n    }, {\n      key: \"loadContent\",\n      value: function loadContent(url, urlWindow) {\n        var that = this;\n        this.lock();\n        if (typeof urlWindow === 'string') {\n          window.history.pushState({\n            path: urlWindow\n          }, '', urlWindow);\n        }\n        $.ajax({\n          url: url,\n          method: 'get',\n          beforeSend: function beforeSend(xhr) {\n            Private.trigger(that, 'load_start', that, [xhr]);\n          },\n          success: function success(result) {\n            Private.trigger(that, 'load_success', that, [result]);\n            that.setContent(result);\n          },\n          error: function error(xhr, textStatus, errorThrown) {\n            Private.trigger(that, 'load_error', that, [xhr, textStatus, errorThrown]);\n            that.setContent('');\n          },\n          complete: function complete(xhr, textStatus) {\n            that.unlock();\n            Private.trigger(that, 'load_end', that, [xhr, textStatus]);\n          }\n        });\n      }\n\n      /**\r\n       * Получение переводов текущего языка\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getLang\",\n      value: function getLang() {\n        return $.extend(true, {}, this._options.langList);\n      }\n\n      /**\r\n       * Установка заголовка\r\n       * @param {string} title\r\n       * @param {string} subtitle\r\n       */\n    }, {\n      key: \"setTitle\",\n      value: function setTitle(title, subtitle) {\n        this._options.title = title;\n        this._options.subtitle = subtitle;\n      }\n\n      /**\r\n       * Установка правила для отображения обертки в панели\r\n       * @param {string} wrapperType\r\n       */\n    }, {\n      key: \"setWrapperType\",\n      value: function setWrapperType(wrapperType) {\n        this._options.wrapperType = wrapperType;\n      }\n\n      /**\r\n       * Правило для отображения панели относительно ее содержимого\r\n       * @param {string} contentFit\r\n       */\n    }, {\n      key: \"setContentFit\",\n      value: function setContentFit(contentFit) {\n        this._options.contentFit = contentFit;\n      }\n\n      /**\r\n       * Установка вида табов\r\n       * @param {string} type\r\n       */\n    }, {\n      key: \"setTabType\",\n      value: function setTabType(type) {\n        this._options.tabs.type = type;\n      }\n\n      /**\r\n       * Установка состояния табов\r\n       * @param {string} fill\r\n       */\n    }, {\n      key: \"setTabFill\",\n      value: function setTabFill(fill) {\n        this._options.tabs.fill = fill;\n      }\n\n      /**\r\n       * Установка положения табов\r\n       * @param {string} position\r\n       */\n    }, {\n      key: \"setTabPosition\",\n      value: function setTabPosition(position) {\n        this._options.tabs.position = position;\n      }\n\n      /**\r\n       * Установка ширины табов\r\n       * @param {string} width\r\n       */\n    }, {\n      key: \"setTabsWidth\",\n      value: function setTabsWidth(width) {\n        this._options.tabs.width = width;\n      }\n\n      /**\r\n       * Установка ширины табов\r\n       * @param {string} tabId\r\n       */\n    }, {\n      key: \"setTabActive\",\n      value: function setTabActive(tabId) {\n        if (this._options.tabs && this._options.tabs.items && Array.isArray(this._options.tabs.items)) {\n          var isActive = false;\n          this._options.tabs.items.map(function (tab) {\n            if (isActive) {\n              return;\n            }\n            if (tab) {\n              if (tab.constructor) {\n                if (tab.constructor.name === 'Tab') {\n                  if (tab.getId() === tabId) {\n                    tab.setActive(true);\n                    isActive = true;\n                  }\n                } else if (tab.constructor.name === 'TabDropdown') {\n                  tab.getItems().map(function (item) {\n                    if (item.getId() === tabId) {\n                      item.setActive(true);\n                      isActive = true;\n                    }\n                  });\n                }\n              } else if (Utils.isObject(tab)) {\n                if (tab._id === tabId) {\n                  tab.active = true;\n                  isActive = true;\n                }\n              }\n            }\n          });\n        }\n      }\n\n      /**\r\n       * Добавление таба\r\n       * @param {string} id\r\n       * @param {string} title\r\n       * @param {string} url\r\n       * @return {HelperTab}\r\n       */\n    }, {\n      key: \"addTab\",\n      value: function addTab(id, title, url) {\n        var tab = new HelperTab(id);\n        if (title) {\n          tab.setTitle(title);\n        }\n        if (url) {\n          tab.setUrl(url);\n        }\n        if (!this._options.tabs) {\n          this._options.tabs = {};\n        }\n        if (!this._options.tabs.items) {\n          this._options.tabs.items = [];\n        }\n        this._options.tabs.items.push(tab);\n        return tab;\n      }\n\n      /**\r\n       * Добавление таба\r\n       * @param {string} title\r\n       * @return HelperTabDropdown\r\n       */\n    }, {\n      key: \"addTabDropdown\",\n      value: function addTabDropdown(title) {\n        var dropdown = new HelperTabDropdown(title);\n        if (!this._options.tabs) {\n          this._options.tabs = {};\n        }\n        if (!this._options.tabs.items) {\n          this._options.tabs.items = [];\n        }\n        this._options.tabs.items.push(dropdown);\n        return dropdown;\n      }\n\n      /**\r\n       * Установка элементов управления\r\n       * @param {Array} controls\r\n       */\n    }, {\n      key: \"addControls\",\n      value: function addControls(controls) {\n        if (!Array.isArray(controls)) {\n          return;\n        }\n        if (!Array.isArray(this._options.controls)) {\n          this._options.controls = [];\n        }\n        var that = this;\n        controls.map(function (control) {\n          if (control && control.constructor) {\n            if (control.constructor.name && typeof control.toObject === 'function') {\n              that._options.controls.push(control.toObject());\n              console.log(control.toObject());\n            }\n          } else if (Utils.isObject(control)) {\n            that._options.controls.push(control);\n          }\n        });\n      }\n\n      /**\r\n       * Получение объекта таба по id\r\n       * @param tabId\r\n       */\n    }, {\n      key: \"getTabById\",\n      value: function getTabById(tabId) {\n        var result = null;\n        this._tabs.map(function (tab) {\n          if (tab.hasOwnProperty('getId') && typeof tab.getId === 'function' && tab.getId() === tabId) {\n            result = tab;\n          }\n        });\n        return result;\n      }\n\n      /**\r\n       * Получение объекта контрола по его id\r\n       * @param {string} id\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getControlById\",\n      value: function getControlById(id) {\n        var result = null;\n        this._controls.map(function (control) {\n          if (control.hasOwnProperty('getId') && typeof control.getId === 'function' && control.getId() === id) {\n            result = control;\n          }\n        });\n        return result;\n      }\n\n      /**\r\n       * Установка содержимого для контейнера\r\n       * @param {string} url\r\n       */\n    }, {\n      key: \"setContentUrl\",\n      value: function setContentUrl(url) {\n        this._options.contentUrl = url;\n      }\n\n      /**\r\n       * Размещение содержимого внутри панели\r\n       * @param {string|object|Array} content\r\n       */\n    }, {\n      key: \"setContent\",\n      value: function setContent(content) {\n        var container = Elements.getContent(this.getId());\n        if (container[0]) {\n          var contents = Private.renderContents(this, content);\n          container.html('');\n          contents.map(function (content) {\n            container.append(content);\n          });\n          Private.trigger(this, 'content_show');\n        } else {\n          this._options.content = content;\n        }\n      }\n\n      /**\r\n       *\r\n       * @param element\r\n       * @returns {*}\r\n       */\n    }, {\n      key: \"render\",\n      value: function render(element) {\n        var that = this;\n        var tabsContent = null;\n        var tabsPosition = 'top-left';\n        var tabsWidth = '200px';\n        var fitContent = '';\n        var wrapperType = '';\n        if (!this._options.hasOwnProperty('lang')) {\n          this._options.lang = this._controller.getSetting('lang');\n        }\n        var langList = this._controller.lang.hasOwnProperty(this._options.lang) ? this._controller.lang[this._options.lang] : {};\n        this._options.langList = this._options.hasOwnProperty('langList') && Utils.isObject(this._options.langList) ? $.extend(true, {}, langList, this._options.langList) : langList;\n\n        // Инициализация контролов\n        if (this._options.hasOwnProperty('controls') && Array.isArray(this._options.controls) && this._options.controls.length > 0) {\n          Private.initControls(this, this._options.controls);\n        }\n\n        // Инициализация табов\n        if (this._options.hasOwnProperty('tabs') && Utils.isObject(this._options.tabs) && this._options.tabs.hasOwnProperty('items') && Array.isArray(this._options.tabs.items) && this._options.tabs.items.length > 0) {\n          Private.initTabs(this, this._options.tabs.items);\n        }\n        if (this._options.hasOwnProperty('tabs') && Utils.isObject(this._options.tabs) && this._options.tabs.hasOwnProperty('items') && Array.isArray(this._options.tabs.items) && this._options.tabs.items.length > 0) {\n          tabsContent = Private.renderTabs(this, this._options.tabs);\n          tabsPosition = this._options.tabs.hasOwnProperty('position') && typeof this._options.tabs.position === 'string' ? this._options.tabs.position : 'top-left';\n          if (this._options.tabs.hasOwnProperty('width') && ['string', 'number'].indexOf(_typeof(this._options.tabs.width)) && this._options.tabs.width) {\n            var unit = typeof this._options.tabs.width === 'number' ? 'px' : '';\n            tabsWidth = this._options.tabs.width + unit;\n          }\n        }\n        if (this._options.hasOwnProperty('contentFit') && typeof this._options.contentFit === 'string') {\n          switch (this._options.contentFit) {\n            case 'fit':\n              fitContent = ' coreui-panel__content-fit';\n              break;\n            case 'min':\n              fitContent = ' coreui-panel__content-min';\n              break;\n            case 'max':\n              fitContent = ' coreui-panel__content-max';\n              break;\n          }\n        }\n        if (this._options.hasOwnProperty('wrapperType') && typeof this._options.wrapperType === 'string') {\n          if (this._options.wrapperType === 'card') {\n            wrapperType = ' card shadow-sm';\n          }\n        }\n        var panelElement = $(ejs.render(tpl['container.html'], {\n          issetControls: !!this._controls.length,\n          id: this.getId(),\n          title: this._options.title,\n          subtitle: this._options.subtitle,\n          fit: fitContent,\n          wrapperType: wrapperType,\n          tabs: {\n            content: tabsContent,\n            position: tabsPosition,\n            width: tabsWidth\n          }\n        }));\n        this._controls.map(function (control) {\n          panelElement.find('.coreui-panel-controls').append(Private.renderControl(that, control));\n        });\n        if (this._options.contentUrl) {\n          this.on('panel_show', function (event) {\n            that.loadContent(this._options.contentUrl);\n          });\n        } else {\n          var renderContents = Private.renderContents(this, this._options.content);\n          renderContents.map(function (content) {\n            panelElement.find('.coreui-panel-content').append(content);\n          });\n        }\n        if (element === undefined) {\n          return panelElement;\n        }\n\n        // Dom element\n        var domElement = null;\n        if (typeof element === 'string') {\n          domElement = document.getElementById(element);\n        } else if (element instanceof HTMLElement) {\n          domElement = element;\n        }\n        if (domElement) {\n          $(domElement).html(panelElement);\n          this.initEvents();\n        }\n      }\n\n      /**\r\n       * Регистрация функции на событие\r\n       * @param eventName\r\n       * @param callback\r\n       * @param context\r\n       */\n    }, {\n      key: \"on\",\n      value: function on(eventName, callback, context) {\n        if (_typeof(this._events[eventName]) !== 'object') {\n          this._events[eventName] = [];\n        }\n        this._events[eventName].push({\n          context: context || this,\n          callback: callback,\n          singleExec: false\n        });\n      }\n\n      /**\r\n       * Регистрация функции на событие\r\n       * @param eventName\r\n       * @param callback\r\n       * @param context\r\n       */\n    }, {\n      key: \"one\",\n      value: function one(eventName, callback, context) {\n        if (_typeof(this._events[eventName]) !== 'object') {\n          this._events[eventName] = [];\n        }\n        this._events[eventName].push({\n          context: context || this,\n          callback: callback,\n          singleExec: true\n        });\n      }\n    }]);\n  }();\n\n  var Controller = {\n    lang: {},\n    controls: {},\n    _instances: {},\n    _settings: {\n      lang: 'en'\n    },\n    /**\r\n     * @param {object} options\r\n     * @returns {Panel}\r\n     */\n    create: function create(options) {\n      options = Utils.isObject(options) ? options : {};\n      var instance = new Panel(options);\n      var panelId = instance.getId();\n      this._instances[panelId] = instance;\n      return instance;\n    },\n    /**\r\n     * @param {string} id\r\n     * @returns {Panel|null}\r\n     */\n    get: function get(id) {\n      if (!this._instances.hasOwnProperty(id)) {\n        return null;\n      }\n      if (!$('#coreui-panel-' + id)[0]) {\n        delete this._instances[id];\n        return null;\n      }\n      return this._instances[id];\n    },\n    /**\r\n     * Установка настроек\r\n     * @param {object} settings\r\n     */\n    setSettings: function setSettings(settings) {\n      this._settings = $.extend(true, {}, this._settings, settings);\n    },\n    /**\r\n     * Получение значения настройки\r\n     * @param {string} name\r\n     */\n    getSetting: function getSetting(name) {\n      var value = null;\n      if (this._settings.hasOwnProperty(name)) {\n        value = this._settings[name];\n      }\n      return value;\n    }\n  };\n\n  var PanelControlLink = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'link',\n      href: null,\n      content: null,\n      onClick: null,\n      attr: null\n    },\n    /**\r\n     * Инициализация\r\n     * @param {object} panel\r\n     * @param {object}                options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {\n        var control = Elements.getControl(this._panel.getId(), this.getId());\n        $('a', control).click(function (event) {\n          var prop = {\n            event: event,\n            panel: that._panel\n          };\n          if (typeof that._options.onClick === 'function') {\n            return that._options.onClick(prop);\n          } else if (typeof that._options.onClick === 'string') {\n            return new Function(that._options.onClick)(prop);\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var attributes = [];\n      if (_typeof(this._options.attr) === 'object') {\n        for (var _i = 0, _Object$entries = Object.entries(this._options.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      }\n      return ejs.render(tpl['controls/link.html'], {\n        href: this._options.href,\n        content: this._options.content,\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n      });\n    }\n  };\n\n  var PanelControlButton = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'button',\n      content: null,\n      onClick: null,\n      attr: null\n    },\n    /**\r\n     * Инициализация\r\n     * @param {Panel}  panel\r\n     * @param {object} options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      if (typeof this._options.onClick === 'function' || typeof this._options.onClick === 'string') {\n        var control = Elements.getControl(this._panel.getId(), this.getId());\n        $('button', control).click(function (event) {\n          var prop = {\n            event: event,\n            panel: that._panel\n          };\n          if (typeof that._options.onClick === 'function') {\n            return that._options.onClick(prop);\n          } else if (typeof that._options.onClick === 'string') {\n            return new Function(that._options.onClick)(prop);\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var attributes = [];\n      if (Utils.isObject(this._options.attr)) {\n        for (var _i = 0, _Object$entries = Object.entries(this._options.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      }\n      return ejs.render(tpl['controls/button.html'], {\n        content: this._options.content,\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : ''\n      });\n    }\n  };\n\n  var PanelControlDropdown = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'dropdown',\n      content: null,\n      items: null,\n      attr: {\n        \"class\": 'btn btn-primary dropdown-toggle'\n      }\n    },\n    /**\r\n     * Инициализация\r\n     * @param {Panel}  panel\r\n     * @param {object} options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n      if (Array.isArray(this._options.items)) {\n        this._options.items.map(function (item) {\n          if (Utils.isObject(item) && typeof item.type === 'string') {\n            item.id = item.hasOwnProperty('id') && typeof item.id === 'string' && item.id ? item.id : Utils.hashCode();\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение параметров\r\n     * @returns {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      var options = this.getOptions();\n      if (Array.isArray(options.items)) {\n        options.items.map(function (item) {\n          if (Utils.isObject(item) && typeof item.type === 'string') {\n            if (item.type === 'button') {\n              if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0 && typeof item.content === 'string') {\n                var control = Elements.getControl(that._panel.getId(), that.getId());\n                $('button#btn-dropdown-' + item.id, control).click(function (event) {\n                  var prop = {\n                    event: event,\n                    panel: that._panel\n                  };\n                  if (typeof item.onClick === 'function') {\n                    return item.onClick(prop);\n                  } else if (typeof item.onClick === 'string') {\n                    return new Function(item.onClick)(prop);\n                  }\n                });\n              }\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      var items = [];\n      var attributes = [];\n      if (Array.isArray(options.items)) {\n        options.items.map(function (item) {\n          if (Utils.isObject(item) && typeof item.type === 'string') {\n            if (item.type === 'link') {\n              if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {\n                items.push({\n                  type: 'link',\n                  link: item.link,\n                  content: item.content\n                });\n              }\n            } else if (item.type === 'button') {\n              if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                items.push({\n                  type: 'button',\n                  id: item.id,\n                  content: item.content\n                });\n              }\n            } else if (item.type === 'divider') {\n              items.push({\n                type: 'divider'\n              });\n            }\n          }\n        });\n      }\n      if (Utils.isObject(options.attr)) {\n        if (options.attr.hasOwnProperty('type')) {\n          delete options.attr.type;\n        }\n        if (options.attr.hasOwnProperty('id')) {\n          delete options.attr.id;\n        }\n        if (options.attr.hasOwnProperty('data-bs-toggle')) {\n          delete options.attr['data-bs-toggle'];\n        }\n        for (var _i = 0, _Object$entries = Object.entries(options.attr); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            name = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          attributes.push(name + '=\"' + value + '\"');\n        }\n      }\n      return ejs.render(tpl['controls/dropdown.html'], {\n        content: options.content,\n        position: options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'end',\n        attr: attributes.length > 0 ? ' ' + attributes.join(' ') : '',\n        items: items\n      });\n    }\n  };\n\n  var PanelControlButtonGroup = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'buttonGroup',\n      content: null,\n      onClick: null,\n      attr: null\n    },\n    _link: {\n      attr: {\n        \"class\": 'btn btn-secondary'\n      }\n    },\n    _button: {\n      attr: {\n        \"class\": 'btn btn-secondary'\n      }\n    },\n    _dropdown: {\n      attr: {\n        \"class\": 'btn btn-secondary dropdown-toggle'\n      }\n    },\n    /**\r\n     * Инициализация\r\n     * @param {object} panel\r\n     * @param {object}                options\r\n     */\n    init: function init(panel, options) {\n      this._panel = panel;\n      this._options = $.extend({}, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n      if (Array.isArray(this._options.buttons)) {\n        this._options.buttons.map(function (button) {\n          if (Utils.isObject(button) && typeof button.type === 'string') {\n            button.id = Utils.hashCode();\n            if (button.type === 'dropdown' && Array.isArray(button.items)) {\n              $.each(button.items, function (key, item) {\n                if (Utils.isObject(item) && typeof item.type === 'string') {\n                  item.id = item.hasOwnProperty('id') && typeof item.id === 'string' && item.id ? item.id : Utils.hashCode();\n                }\n              });\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение параметров\r\n     * @returns {object}\r\n     */\n    getOptions: function getOptions() {\n      return $.extend(true, {}, this._options);\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {\n      var that = this;\n      var options = this.getOptions();\n      if (Array.isArray(options.buttons)) {\n        var control = Elements.getControl(this._panel.getId(), this._id);\n        options.buttons.map(function (button) {\n          if (Utils.isObject(button) && typeof button.type === 'string') {\n            if (button.type === 'button') {\n              if (button.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {\n                $('button#btn-' + button.id, control).click(function (event) {\n                  var prop = {\n                    event: event,\n                    panel: that._panel\n                  };\n                  if (typeof button.onClick === 'function') {\n                    button.onClick(prop);\n                  } else if (typeof button.onClick === 'string') {\n                    new Function(button.onClick)(prop);\n                  }\n                });\n              }\n            } else if (button.type === 'dropdown' && Array.isArray(button.items)) {\n              button.items.map(function (item) {\n                if (Utils.isObject(item) && typeof item.type === 'string') {\n                  if (item.hasOwnProperty('onClick') && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                    $('button#btn-dropdown-' + item.id, control).click(function (event) {\n                      var prop = {\n                        event: event,\n                        panel: that._panel\n                      };\n                      if (typeof item.onClick === 'function') {\n                        item.onClick(prop);\n                      } else if (typeof item.onClick === 'string') {\n                        new Function(item.onClick)(prop);\n                      }\n                    });\n                  }\n                }\n              });\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      var options = this.getOptions();\n      var buttons = [];\n      var that = this;\n      if (Array.isArray(options.buttons)) {\n        options.buttons.map(function (button) {\n          if (Utils.isObject(button) && typeof button.type === 'string') {\n            if (button.type === 'link') {\n              if (button.hasOwnProperty('link') && button.hasOwnProperty('content') && typeof button.link === 'string' && typeof button.content === 'string') {\n                var attributes = [];\n                if (!Utils.isObject(button.attr)) {\n                  button.attr = {};\n                }\n                if (button.attr.hasOwnProperty('href')) {\n                  delete button.attr.href;\n                }\n                if (!button.attr.hasOwnProperty('class')) {\n                  button.attr[\"class\"] = that._link.attr[\"class\"];\n                }\n                $.each(button.attr, function (name, value) {\n                  attributes.push(name + '=\"' + value + '\"');\n                });\n                buttons.push({\n                  type: 'link',\n                  link: button.link,\n                  content: button.content,\n                  attr: attributes\n                });\n              }\n            } else if (button.type === 'button') {\n              if (button.hasOwnProperty('content') && button.hasOwnProperty('onClick') && typeof button.content === 'string' && ['string', 'function'].indexOf(_typeof(button.onClick)) >= 0) {\n                var _attributes = [];\n                if (!Utils.isObject(button.attr)) {\n                  button.attr = {};\n                }\n                if (button.attr.hasOwnProperty('type')) {\n                  delete button.attr.type;\n                }\n                if (button.attr.hasOwnProperty('id')) {\n                  delete button.attr.id;\n                }\n                if (!button.attr.hasOwnProperty('class')) {\n                  button.attr[\"class\"] = that._button.attr[\"class\"];\n                }\n                for (var _i = 0, _Object$entries = Object.entries(button.attr); _i < _Object$entries.length; _i++) {\n                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                    name = _Object$entries$_i[0],\n                    value = _Object$entries$_i[1];\n                  _attributes.push(name + '=\"' + value + '\"');\n                }\n                buttons.push({\n                  type: 'button',\n                  link: button.link,\n                  id: button.id,\n                  content: button.content,\n                  attr: _attributes\n                });\n              }\n            } else if (button.type === 'dropdown') {\n              if (Array.isArray(button.items)) {\n                var _attributes2 = [];\n                var items = [];\n                button.items.map(function (item) {\n                  if (Utils.isObject(item) && typeof item.type === 'string') {\n                    if (item.type === 'link') {\n                      if (item.hasOwnProperty('link') && item.hasOwnProperty('content') && typeof item.link === 'string' && typeof item.content === 'string') {\n                        items.push({\n                          type: 'link',\n                          link: item.link,\n                          content: item.content\n                        });\n                      }\n                    } else if (item.type === 'button') {\n                      if (item.hasOwnProperty('content') && item.hasOwnProperty('onClick') && typeof item.content === 'string' && ['string', 'function'].indexOf(_typeof(item.onClick)) >= 0) {\n                        items.push({\n                          type: 'button',\n                          id: item.id,\n                          content: item.content\n                        });\n                      }\n                    } else if (item.type === 'divider') {\n                      items.push({\n                        type: 'divider'\n                      });\n                    }\n                  }\n                });\n                if (!Utils.isObject(button.attr)) {\n                  button.attr = {};\n                }\n                if (button.attr.hasOwnProperty('type')) {\n                  delete button.attr.type;\n                }\n                if (button.attr.hasOwnProperty('id')) {\n                  delete button.attr.id;\n                }\n                if (!button.attr.hasOwnProperty('class')) {\n                  button.attr[\"class\"] = that.dropdown.attr[\"class\"];\n                }\n                for (var _i2 = 0, _Object$entries2 = Object.entries(button.attr); _i2 < _Object$entries2.length; _i2++) {\n                  var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                    _name = _Object$entries2$_i[0],\n                    _value = _Object$entries2$_i[1];\n                  _attributes2.push(_name + '=\"' + _value + '\"');\n                }\n                buttons.push({\n                  type: 'dropdown',\n                  content: button.content,\n                  position: button.hasOwnProperty('position') && typeof button.position === 'string' ? button.position : 'end',\n                  attr: _attributes2,\n                  items: items\n                });\n              }\n            }\n          }\n        });\n      }\n      return ejs.render(tpl['controls/button_group.html'], {\n        buttons: buttons\n      });\n    }\n  };\n\n  var PanelControlCustom = {\n    _id: null,\n    _panel: null,\n    _options: {\n      id: null,\n      type: 'custom',\n      content: null\n    },\n    /**\r\n     * Инициализация\r\n     * @param {object} panel\r\n     * @param {object}                options\r\n     */\n    init: function init(panel, options) {\n      this._options = $.extend({}, this._options, options);\n      this._panel = panel;\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : Utils.hashCode();\n    },\n    /**\r\n     * Инициализация событий связанных с элементом управления\r\n     */\n    initEvents: function initEvents() {},\n    /**\r\n     * Получение ID элемента управления\r\n     * @returns {string}\r\n     */\n    getId: function getId() {\n      return this._id;\n    },\n    /**\r\n     * Формирование контента для размещения на странице\r\n     * @returns {string}\r\n     */\n    render: function render() {\n      if (typeof this._options.content === 'string') {\n        return this._options.content;\n      } else if (typeof this._options.content === 'function') {\n        return this._options.content();\n      }\n    }\n  };\n\n  var langEn = {\n    \"loading\": \"Loading...\"\n  };\n\n  var langRu = {\n    \"loading\": \"Загрузка...\"\n  };\n\n  Controller.controls.link = PanelControlLink;\n  Controller.controls.button = PanelControlButton;\n  Controller.controls.dropdown = PanelControlDropdown;\n  Controller.controls.buttonGroup = PanelControlButtonGroup;\n  Controller.controls.custom = PanelControlCustom;\n  Controller.lang.en = langEn;\n  Controller.lang.ru = langRu;\n\n  return Controller;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["global","factory","exports","module","define","amd","globalThis","self","CoreUI","panel","this","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","value","_inherits","subClass","superClass","create","_setPrototypeOf","_getPrototypeOf","setPrototypeOf","getPrototypeOf","bind","__proto__","p","_possibleConstructorReturn","call","ReferenceError","_get","Reflect","get","property","receiver","base","object","hasOwnProperty","desc","getOwnPropertyDescriptor","arguments","apply","_slicedToArray","arr","Array","isArray","r","l","t","e","n","u","a","f","next","done","push","return","_unsupportedIterableToArray","minLen","_arrayLikeToArray","toString","slice","name","from","test","len","arr2","arg","input","hint","prim","toPrimitive","undefined","String","Number","res","window","ejs","c","require","Error","code","1","fs","path","utils","scopeOptionWarned","_VERSION_STRING","version","_OPTS_PASSABLE_WITH_DATA","_OPTS_PASSABLE_WITH_DATA_EXPRESS","concat","_BOM","_JS_IDENTIFIER","resolvePaths","paths","filePath","some","v","resolveInclude","existsSync","handleCache","options","template","func","filename","hasTemplate","cache","fileLoader","replace","compile","set","includeFile","opts","shallowCopy","createNullProtoObjWherePossible","includePath","views","match","exec","root","includer","escapeFunction","includerResult","rethrow","err","str","flnm","lineno","esc","lines","split","start","Math","max","end","min","context","map","line","curr","join","message","stripSemi","Template","text","optsParam","hasOwnOnlyObject","templateText","mode","truncate","currentLine","source","client","escape","escapeXML","compileDebug","debug","openDelimiter","closeDelimiter","delimiter","strict","rmWhitespace","outputFunctionName","localsName","async","destructuredLocals","legacyInclude","_with","regex","createRegex","readFileSync","promiseImpl","Function","Promise","isDir","dirname","extname","resolve","scope","console","warn","render","d","data","shallowCopyFromList","renderFile","cb","result","args","shift","pop","settings","viewOpts","reject","clearCache","reset","modes","EVAL","ESCAPED","RAW","COMMENT","LITERAL","delim","escapeRegExpChars","open","close","RegExp","fn","prepended","appended","escapeFn","sanitizedFilename","JSON","stringify","generateSource","destructuring","src","log","ctor","SyntaxError","returnedFn","includeData","basename","matches","parseTemplateText","forEach","index","indexOf","closing","scanLine","firstPos","pat","substring","_addOutput","newLineCount","lastIndexOf","__express","VERSION","../package.json","./utils","2","hasOwn","regExpChars","_ENCODE_HTML_RULES","string","&","<",">","\"","'","_MATCH_HTML","encode_char","escapeXMLToString","markup","to","list","_data","val","remove","hyphenToCamel","toUpperCase","3","4","process","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","filter","xs","resolvedPath","resolvedAbsolute","cwd","charAt","normalize","isAbsolute","trailingSlash","substr","relative","trim","fromParts","toParts","samePartsLength","outputParts","sep","hasRoot","charCodeAt","matchedSlash","ext","startDot","startPart","preDotState","_process","5","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","6","description","keywords","author","license","bin","main","jsdelivr","unpkg","repository","type","url","bugs","homepage","dependencies","jake","devDependencies","browserify","eslint","git-directory-deploy","jsdoc","lru-cache","mocha","uglify-js","engines","node","scripts","Utils","isObject","hashCode","crc32","Date","getTime","random","tpl","Elements","panelId","$","tabId","controlId","Tab","_id","_panel","_options","id","urlContent","urlCount","urlBadge","urlWindow","count","badge","active","disabled","_init","extend","getId","getOptions","setActive","tabTabsElement","tabTabElement","find","removeClass","addClass","Private","trigger","setTitle","setCount","tabCountElement","after","setBadge","tabBadgeElement","badgeRender","renderBadge","replaceWith","initEvents","that","tabsContainerElement","click","event","location","href","_count","ajax","method","success","response","parse","error","xhr","textStatus","errorThrown","tab","item","_dropdown","dropdown","tabItemElement","_url","_urlWindow","Divider","TabDropdown","_items","items","item$1","getItem","itemId","_step","_iterator","allowArrayLike","normalCompletion","didErr","it","s","step","F","itemsContents","params","_events","callback","singleExec","initControls","controls","control","_controller","init","_controls","initTabs","tabItems","tabItem","tabType","_tabs","renderTabs","tabs","classes","tabsContents","position","fill","renderControl","controlElement","append","renderContents","content","one","component","attr","_i","_Object$entries","entries","_Object$entries$_i","AbstractTab","_title","_disabled","_active","getTitle","isActive","isDisabled","HelperTab","_this","derived","_this2","construct","sham","Proxy","Boolean","valueOf","setId","BADGE_TYPE_DANGER","_badge","_urlContent","_urlCount","_urlBadge","getUrl","getUrlContent","getUrlWindow","getCount","getBadge","getUrlCount","getUrlBadge","DropdownItem","abs","floor","HelperTabDropdown","toObject","HelperControlButton","class","setContent","_content","onclick","_onclick","_attr","getContent","onClick","getOnClick","ButtonGroupButton","ButtonGroupDropdownLink","now","link","_link","ButtonGroupDropdownButton","ButtonGroupDropdownDivider","ButtonGroupDropdown","POSITION_END","_position","_itemIndex","setLink","ButtonGroupLink","HelperControlButtonGroup","_btnIndex","_buttons","buttons","button","HelperControlCustom","DropdownLink","getLink","DropdownButton","DropdownDivider","HelperControlDropdown","getPosition","HelperControlLink","setHref","_href","getHref","Panel","lang","langList","subtitle","contentFit","contentUrl","wrapperType","width","buttonGroup","custom","Controller","loadContent","history","pushState","container","html","loading","getLang","prepend","hide","lock","beforeSend","complete","unlock","getItems","setUrl","contents","element","tabsContent","tabsPosition","tabsWidth","fitContent","getSetting","unit","panelElement","issetControls","fit","domElement","document","getElementById","HTMLElement","eventName","_instances","_settings","setSettings","PanelControlButton","prop","attributes","PanelControlDropdown","PanelControlButtonGroup","_button","each","_attributes","_attributes2","_i2","_Object$entries2","_Object$entries2$_i","_name","_value","PanelControlCustom","en","ru"],"mappings":"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"}